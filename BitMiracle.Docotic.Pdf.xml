<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BitMiracle.Docotic.Pdf</name>
    </assembly>
    <members>
        <member name="T:BitMiracle.Docotic.EmbeddedResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.LicenseManager">
            <summary>
            Class for license management. Provides properties and methods to add
            one or multiple licenses to the Docotic.Pdf library.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.LicenseManager.Uid">
            <summary>
            Retrieves an unique ID for your server.
            We generate server license keys using this UID.
            </summary>
            <value>Unique ID for this server.</value>
        </member>
        <member name="P:BitMiracle.Docotic.LicenseManager.HasValidLicense">
            <summary>
            Gets a value indicating whether this instance has valid license(s).
            </summary>
            <value>
                <c>true</c> if this instance has valid license(s); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.LicenseManager.AddLicenseData(System.String)">
            <summary>
            Adds license data to the Docotic.Pdf library.
            </summary>
            <param name="licenseKey">License key</param>
            <remarks>
                <para>
            You can use this method multiple times if you have several licenses which you use in
            one code base (usually, it's the case for a server application running on multiple
            servers).
            </para>
                <para>
            We recommend to add all license data at the start of your application. It is not
            recommended to call this method each time before you create a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> instance.
            </para>
                <para>
            In classic ASP.NET apps we recommended to add license data in Global.asax.cs. In
            ASP.NET Core apps we recommend to use Startup.cs for the same.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.LicenseManager.Reset">
            <summary>
            Resets all previously set licenses.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfAction">
            <summary>
            Abstract class for an action. This class is a base class for
            <see cref="T:BitMiracle.Docotic.Pdf.PdfControlAction" />, <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfImportDataAction" />, <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" />
            and <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" /> classes.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfAction.NextActions">
            <summary>
            Gets the collection of actions to be performed after this action.
            </summary>
            <value>The collection of actions to be performed after this action.</value>
            <remarks>
            The collection can contain <c>null</c> items for unsupported or broken actions.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfAction.op_Equality(BitMiracle.Docotic.Pdf.PdfAction,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Determines whether the two specified objects are equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfAction.op_Inequality(BitMiracle.Docotic.Pdf.PdfAction,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Determines whether the two specified objects are not equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are not equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfAction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with
            this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfAction.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfControlAction">
            <summary>
            Abstract class for an action that operates on <see cref="T:BitMiracle.Docotic.Pdf.PdfControl" />s.
            This class is a base class for
            <see cref="T:BitMiracle.Docotic.Pdf.PdfHideAction" />, <see cref="T:BitMiracle.Docotic.Pdf.PdfResetFormAction" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />  classes.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControlAction.Controls">
            <summary>
            Gets the collection of controls associated with this action.
            </summary>
            <value>The collection of controls associated with this action.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControlAction.ControlCount">
            <summary>
            Gets the number of controls associated with this action.
            </summary>
            <value>The number of controls associated with this action.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfControlAction.GetControl(System.Int32)">
            <summary>
            Gets the control at a specified index in the collection of controls
            associated with this action.
            </summary>
            <param name="index">The zero-based index of the control to
            retrieve.</param>
            <returns>The control at a specified index in the collection of
            controls associated with this action.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfControlAction.AddControl(BitMiracle.Docotic.Pdf.PdfControl)">
            <summary>
            Adds the control to the end of the collection of controls
            associated with this action.
            </summary>
            <param name="control">The control to be added to the end of the
            collection of controls associated with this action.</param>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfGoToAction">
            <summary>
            Class for a Go-To action. A go-to action changes the current 
            document view to a specified one.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfGoToAction.View">
            <summary>
            Gets or sets the view to display as the result of the action.
            </summary>
            <value>The view to display as the result of the action.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfHideAction">
            <summary>
            Class for a Hide action. A hide action hides or shows one or more
            controls on the screen.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfHideAction.Hide">
            <summary>
            Gets or sets a value indicating whether to hide or show controls
            associated with this action.
            </summary>
            <value>
                <c>true</c> if to hide controls associated with this action;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfImportDataAction">
            <summary>
            Class for an Import-Data action. An import-data action imports
            Forms Data Format (FDF) data into the document's interactive form
            from a specified file.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImportDataAction.FileName">
            <summary>
            Gets the name of the FDF file from which to import the data.
            </summary>
            <value>The name of the FDF file from which to import the
            data.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction">
            <summary>
            Class for a JavaScript action. A JavaScript action causes a script
            to be compiled and executed by the JavaScript interpreter. Depending on
            the nature of the script, various interactive form fields in the
            document may update their values or change their visual appearances.
            Netscape Communications Corporation's "Client-Side JavaScript Reference"
            and the Adobe "JavaScript for Acrobat API Reference" give details on
            the contents and effects of JavaScript scripts.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfJavaScriptAction.Script">
            <summary>
            Gets or sets the text string containing the JavaScript script to
            be executed.
            </summary>
            <value>The text string containing the JavaScript script to
            be executed.</value>
            <remarks>The value can not be <c>null</c>.</remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLaunchAction">
            <summary>
            A launch action launches an application or opens a document.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLaunchAction.Path">
            <summary>
            Gets or sets the path to the application to be launched or to the document to be opened.
            </summary>
            <value>
            The path to the application to be launched or to the document to be opened.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLaunchAction.OpenInNewWindow">
            <summary>
            Gets or sets a value indicating whether to open the destination document in
            a new window.
            </summary>
            <value>
                <c>true</c> if the destination document should be opened in a new window;
              <c>false</c> if the destination document should replace the current document
              in the same window.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfNamedAction">
            <summary>
            A named action that viewer application should perform.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfNamedAction.Name">
            <summary>
            The name of the action to be performed.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction">
            <summary>
            Class for a remote Go-To action. A remote go-to action changes the current 
            document view to a document view in another PDF file.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction.View">
            <summary>
            Gets or sets the view to display as the result of the action.
            </summary>
            <value>The view to display as the result of the action.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction.FilePath">
            <summary>
            Gets or sets the path to the file in which the destination is located.
            </summary>
            <value>
            The path to the file in which the destination is located.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction.OpenInNewWindow">
            <summary>
            Gets or sets a value indicating whether to open the destination document in
            a new window.
            </summary>
            <value>
                <c>true</c> if the destination document should be opened in a new window;
              <c>false</c> if the destination document should replace the current document
              in the same window.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRenditionAction">
            <summary>
            Class for a rendition action.
            A rendition action (PDF 1.5) controls the playing of multimedia content.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRenditionAction.ScreenAnnotation">
            <summary>
            Screen annotation for the rendition.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRenditionAction.Operation">
            <summary>
            The operation to perform when the action is triggered.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRenditionAction.Script">
            <summary>
            Gets or sets the text string containing the JavaScript script to
            be executed when the action is triggered.
            </summary>
            <value>The text string containing the JavaScript script to
            be executed when the action is triggered.</value>
            <remarks>The value can be <c>null</c> if there is an operation associated with this
            action. Use <c>null</c> for the value, when you want the script to be removed from
            the action. </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfResetFormAction">
            <summary>
            Class for a Reset-Form action. A reset-form action resets
            associated controls to their default values.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction">
            <summary>
            Class for a Submit-Form action. A submit-form action transmits the
            names and values of associated controls to a specified uniform resource
            identifier (URI), presumably the address of a Web server that will process
            them and send back a response.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSubmitFormAction.Uri">
            <summary>
            Gets or sets the uniform resource identifier (URI) of the script at
            the Web server that will process the submission.
            </summary>
            <value>The uniform resource identifier (URI) of the script at
            the Web server that will process the submission.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSubmitFormAction.IncludeNoValueControls">
            <summary>
            Gets or sets a value indicating whether to submit controls without
            a value.
            </summary>
            <remarks>For controls without a value, only the control name is
            transmitted.</remarks>
            <value>
                <c>true</c> if to submit controls without a value;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSubmitFormAction.SubmitMethod">
            <summary>
            Gets or sets the submit method.
            </summary>
            <value>The submit method.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSubmitFormAction.SubmitFormat">
            <summary>
            Gets or sets the submit format.
            </summary>
            <value>The submit format.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfUriAction">
            <summary>
            Class for a URI action. A URI action causes a URI to be resolved.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfUriAction.Target">
            <summary>
            Gets or sets the uniform resource identifier (URI) to resolve.
            </summary>
            <value>The uniform resource identifier (URI) to resolve.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCalGrayColorSpace">
            <summary>
            Represents a CIE-based A color space with one transformation stage instead of two.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCalGrayColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCalRgbColorSpace">
            <summary>
            Represents a CIE-based ABC color space with one transformation stage instead of two.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCalRgbColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCmykColor">
            <summary>
            Represents a color in a CMYK color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCmykColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfCmykColor" /> class.
            </summary>
            <param name="cyan">The cyan component value in percent.</param>
            <param name="magenta">The magenta component value in percent.</param>
            <param name="yellow">The yellow component value in percent.</param>
            <param name="key">The key component value in percent.</param>
            <remarks>Each component value must be a number between 0 (zero
            concentration) and 100 (maximum concentration).</remarks>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfCmykColor" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCmykColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorProfile,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfCmykColor" /> class.
            </summary>
            <param name="colorProfile">The ICC color profile for CMYK color space.</param>
            <param name="cyan">The cyan component value in percent.</param>
            <param name="magenta">The magenta component value in percent.</param>
            <param name="yellow">The yellow component value in percent.</param>
            <param name="key">The key component value in percent.</param>
            <remarks>Each component value must be a number between 0 (zero
            concentration) and 100 (maximum concentration).</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCmykColor.C">
            <summary>
            Gets the cyan component value in percent.
            </summary>
            <value>The cyan component value in percent.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCmykColor.M">
            <summary>
            Gets the magenta component value in percent.
            </summary>
            <value>The magenta component value in percent.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCmykColor.Y">
            <summary>
            Gets the yellow component value in percent.
            </summary>
            <value>The yellow component value in percent.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCmykColor.K">
            <summary>
            Gets the key component value in percent.
            </summary>
            <value>The key component value in percent.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCmykColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfCmykColor" /> to the equivalent 
            <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent 
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfCmykColor" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCmykColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCmykColorSpace">
            <summary>
            Represents a CMYK device dependent color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCmykColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfCmykColorSpace" /> class.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCmykColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfColor">
            <summary>
            Represents a PDF color.
            </summary>
            <remarks>A PDF color value consists of one or more color components and,
            optionally, associated ICC color profile.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColor.ColorProfile">
            <summary>
            Gets the ICC color profile associated with this <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />.
            </summary>
            <value>The ICC color profile associated with this <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfColor.Darken(System.Int32)">
            <summary>
            Darkens the current <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" /> by the specified percentage.
            </summary>
            <param name="percent">The percentage to darken the current
            <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />.</param>
            <returns>A new color created from the current <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />
            that is darkened by the specified percentage.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfColor.Lighten(System.Int32)">
            <summary>
            Lightens the current <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" /> by the specified percentage.
            </summary>
            <param name="percent">The percentage to lighten the current
            <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />.</param>
            <returns>A new color created from the current <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />
            that is lightened by the specified percentage.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with
            this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfColor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" /> to the equivalent <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent 
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfColor" />.</returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfColorProfile">
            <summary>
            Class for an ICC color profile.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorProfile.ColorSpace">
            <summary>
            Gets the underlying color space of this color profile.
            </summary>
            <value>The underlying color space of this color profile.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorProfile.Copyright">
            <summary>
            Gets the copyright of the creator of this color profile.
            </summary>
            <value>The copyright of the creator of this color profile.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorProfile.Description">
            <summary>
            Gets the description of this color profile.
            </summary>
            <value>The description of this color profile.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorProfile.DeviceManufacturer">
            <summary>
            Gets the intended device manufacturer specified in this color profile.
            </summary>
            <value>The intended device manufacturer specified in this color profile.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorProfile.DeviceModel">
            <summary>
            Gets the intended device model specified in this color profile.
            </summary>
            <value>The intended device model specified in this color profile.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorProfile.ViewingConditions">
            <summary>
            Gets the viewing conditions specified in this color profile.
            </summary>
            <value>The viewing conditions specified in this color profile.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfColorProfile.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfColorSpace">
            <summary>
            The base class for PDF color space classes.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfColorSpace.DefaultColor">
            <summary>
            Gets the default color for this color space.
            </summary>
            <value>The default color for this color space.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDeviceNColorSpace">
            <summary>
            Represents a DeviceN color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDeviceNColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfGrayColor">
            <summary>
            Represents a color in a Gray color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfGrayColor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfGrayColor" /> class.
            </summary>
            <param name="gray">The gray level of color in percent.</param>
            <remarks>The <paramref name="gray" /> is a number between 0
            (black) and 100 (white).</remarks>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfGrayColor" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfGrayColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorProfile,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfGrayColor" /> class.
            </summary>
            <param name="colorProfile">The ICC color profile for Gray color space.</param>
            <param name="gray">The gray level of color in percent.</param>
            <remarks>The <paramref name="gray" /> is a number between 0
            (black) and 100 (white).</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfGrayColor.G">
            <summary>
            Gets the gray level of color in percent.
            </summary>
            <value>The gray level of color in percent.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfGrayColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfGrayColor" /> to the equivalent 
            <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent 
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfGrayColor" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfGrayColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfGrayColorSpace">
            <summary>
            Represents a Gray device dependent color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfGrayColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfGrayColorSpace" /> class.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfGrayColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfIndexedColor">
            <summary>
            Represents a color in an indexed color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfIndexedColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfIndexedColor" /> to the equivalent <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent to this <see cref="T:BitMiracle.Docotic.Pdf.PdfIndexedColor" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfIndexedColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfIndexedColorSpace">
            <summary>
            Represents an indexed color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfIndexedColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLabColor">
            <summary>
            Represents a color in a L*a*b* color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorSpace,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColor" /> class.
            </summary>
            <param name="colorSpace">The L*a*b* color space for the color.</param>
            <param name="l">The L* component value.</param>
            <param name="a">The a* component value.</param>
            <param name="b">The b* component value.</param>
            <remarks>
                <para>
            L* component value must be a number between 0 and 100. Values for a* and b*
            components must be within the range defined by the L*a*b* color space specified by
            the <paramref name="colorSpace" /> parameter.
            </para>
                <para>
            The color space specified by the <paramref name="colorSpace" /> parameter must be either
            a <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" /> or a color space for which the alternate color space
            is a <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" />.
            </para>
            </remarks>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColor" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorProfile,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColor" /> class.
            </summary>
            <param name="colorProfile">The ICC color profile for L*a*b* color space.</param>
            <param name="l">The L* component value.</param>
            <param name="a">The a* component value.</param>
            <param name="b">The b* component value.</param>
            <remarks>
                <para>
            L* component value must be a number between 0 and 100. Values for a* and b*
            components must be within the range defined by the L*a*b* color space of the 
            color profile specified by the <paramref name="colorProfile" /> parameter.
            </para>
                <para>
            The underlying color space of the color profile specified by the
            <paramref name="colorProfile" /> parameter must be either a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" /> or a color space for which the alternate color space
            is a <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" />.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLabColor.L">
            <summary>
            Gets the L* component value.
            </summary>
            <value>The L* component value.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLabColor.A">
            <summary>
            Gets the a* component value.
            </summary>
            <value>The a* component value.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLabColor.B">
            <summary>
            Gets the b* component value.
            </summary>
            <value>The b* component value.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColor" /> to the equivalent 
            <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent 
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColor" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace">
            <summary>
            Represents a L*a*b* color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColorSpace.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" /> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" />
            class.</overloads>
            <param name="document">The document to which this color space belongs.</param>
            <param name="whitePoint">An array of three numbers [Xw Yw Zw] specifying the
            tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point.
            </param>
            <remarks>
                <para>
            The numbers Xw and Zw must be positive, and Yw must be equal to 1.0.
            </para>
                <para>
            Black point array is assumed to be [0.0 0.0 0.0].
            </para>
                <para>
            Range is assumed to be [−100 100 −100 100].
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColorSpace.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" /> class.
            </summary>
            <param name="document">The document to which this color space belongs.</param>
            <param name="whitePoint">An array of three numbers [Xw Yw Zw] specifying the
            tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point.
            </param>
            <param name="blackPoint">An array of three numbers [Xb Yb Zb] specifying the
            tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point.
            Can be <c>null</c>.</param>
            <remarks>
                <para>
            The numbers Xw and Zw must be positive, and Yw must be equal to 1.0.
            </para>
                <para>All three numbers in the <paramref name="blackPoint" /> array must be
            non-negative. If <paramref name="blackPoint" /> array is <c>null</c> then
            the black point array is assumed to be [0.0 0.0 0.0].</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColorSpace.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.Double[],System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfLabColorSpace" /> class.
            </summary>
            <param name="document">The document to which this color space belongs.</param>
            <param name="whitePoint">An array of three numbers [Xw Yw Zw] specifying the
            tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point.
            </param>
            <param name="blackPoint">An array of three numbers [Xb Yb Zb] specifying the
            tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point.
            Can be <c>null</c>.</param>
            <param name="range">An array of four numbers [amin amax bmin bmax] specifying the
            range of valid values for the a* and b* (B and C) components of the color space.
            Can be <c>null</c>.</param>
            <remarks>
                <para>
            The numbers Xw and Zw must be positive, and Yw must be equal to 1.0.
            </para>
                <para>All three numbers in the <paramref name="blackPoint" /> array must be
            non-negative. If <paramref name="blackPoint" /> array is <c>null</c> then
            the black point array is assumed to be [0.0 0.0 0.0].</para>
                <para>If <paramref name="range" /> array is <c>null</c> then the range array is 
            assumed to be [−100 100 −100 100].</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLabColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPatternColorSpace">
            <summary>
            Represents a pattern color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPatternColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRgbColor">
            <summary>
            Represents a color in an RGB color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </summary>
            <param name="red">The red component value.</param>
            <param name="green">The green component value.</param>
            <param name="blue">The blue component value.</param>
            <remarks>Each component value must be a number between 0 (minimum
            intensity) and 255 (maximum intensity).</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color" /> structure
            to create <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> from.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorProfile,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </summary>
            <param name="colorProfile">The ICC color profile for RGB color space.</param>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorProfile,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </summary>
            <param name="colorProfile">The ICC color profile for RGB color space.</param>
            <param name="color">The <see cref="T:System.Drawing.Color" /> structure
            to create <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> from.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.#ctor(BitMiracle.Docotic.Pdf.PdfColorProfile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </summary>
            <param name="colorProfile">The ICC color profile for RGB color space.</param>
            <param name="red">The red component value.</param>
            <param name="green">The green component value.</param>
            <param name="blue">The blue component value.</param>
            <remarks>Each component value must be a number between 0 (minimum
            intensity) and 255 (maximum intensity).</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRgbColor.R">
            <summary>
            Gets the red component value.
            </summary>
            <value>The red component value.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRgbColor.G">
            <summary>
            Gets the green component value.
            </summary>
            <value>The green component value.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRgbColor.B">
            <summary>
            Gets the blue component value.
            </summary>
            <value>The blue component value.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> to the equivalent 
            <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent 
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRgbColorSpace">
            <summary>
            Represents an RGB device dependent color space.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColorSpace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColorSpace" /> class.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRgbColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSeparationColorSpace">
            <summary>
            Represents a Separation color space. A color value in a Separation color space consists
            of a single tint component.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSeparationColorSpace.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.String,BitMiracle.Docotic.Pdf.PdfColorSpace,BitMiracle.Docotic.Pdf.PdfFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSeparationColorSpace" /> class.
            </summary>
            <param name="document">The document to which this color space belongs.</param>
            <param name="name">The name of the colorant that this Separation color space is
            intended to represent.</param>
            <param name="alternateSpace">The alternate color space.</param>
            <param name="tintTransform">The tint transform function.</param>
            <remarks>
                <para>
            The alternate color space can not be a Pattern, Indexed, Separation, or DeviceN
            color space.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSeparationColorSpace.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSpotColor">
            <summary>
            Represents a spot color.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSpotColor.#ctor(System.Double,BitMiracle.Docotic.Pdf.PdfSeparationColorSpace)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSpotColor" /> class.
            </summary>
            <param name="amount">The amount (concentration) of spot colorant (tint).</param>
            <param name="colorSpace">The separation color space in which the colorant is
            defined.</param>
            <remarks>
                <para>
            The value 0.0 for the <paramref name="amount" /> parameter represents the minimum
            amount of colorant that can be applied; 1.0 represents the maximum. Thus, 0.0
            denotes the lightest color that can be achieved with the given colorant, and 1.0 
            denotes the darkest.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSpotColor.ToColor">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfSpotColor" /> to the equivalent 
            <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <returns>The <see cref="T:System.Drawing.Color" /> structure that is the equivalent 
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfSpotColor" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSpotColor.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfaConformance">
            <summary>
            Specifies levels of PDF/A standard conformance the library can detect.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfaConformance.None">
            <summary>
            Document does not conform to PDF/A standard.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfaConformance.Pdfa1B">
            <summary>
            Document conforms to PDF/A part 1 standard with Level B (basic) conformance.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfaConformance.Pdfa1A">
            <summary>
            Document conforms to PDF/A part 1 standard with Level A (accessible) conformance.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfaConformance.Pdfa2A">
            <summary>
            Document conforms to PDF/A part 2 standard.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfaConformance.Pdfa3A">
            <summary>
            Document conforms to PDF/A part 3 standard.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfaConformance.Pdfa4A">
            <summary>
            Document conforms to PDF/A part 4 standard.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfBlendMode">
            <summary>
            Specifies names of standard blend modes available in PDF.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color values. The result color
            is always at least as dark as either of the two constituent colors.
            Multiplying any color with black produces black; multiplying with
            white leaves the original color unchanged. Painting successive
            overlapping objects with a color other than black or white
            produces progressively darker colors.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source color values,
            then complements the result. The result color is always at least
            as light as either of the two constituent colors. Screening any
            color with white produces white; screening with black leaves the
            original color unchanged. The effect is similar to projecting
            multiple photographic slides simultaneously onto a single screen.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Overlay">
            <summary>
            Multiplies or screens the colors, depending on the backdrop color
            value. Source colors overlay the backdrop while preserving its
            highlights and shadows. The backdrop color is not replaced but is
            mixed with the source color to reflect the lightness or darkness
            of the backdrop.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Darken">
            <summary>
            Selects the darker of the backdrop and source colors. The
            backdrop is replaced with the source where the source is darker;
            otherwise, it is left unchanged.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors. The backdrop
            is replaced with the source where the source is lighter; otherwise,
            it is left unchanged.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color. Painting
            with black produces no changes.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color. Painting
            with white produces no change.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color
            value. The effect is similar to shining a harsh spotlight on
            the backdrop.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color
            value. The effect is similar to shining a diffused spotlight on
            the backdrop.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the
            lighter color. Painting with white inverts the backdrop color;
            painting with black produces no change.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Exclusion">
            <summary>
            Produces an effect similar to that of the <see cref="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Difference" />
            mode but lower in contrast. Painting with white inverts the
            backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Hue">
            <summary>
            Creates a color with the hue of the source color and the saturation
            and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Saturation">
            <summary>
            Creates a color with the saturation of the source color and the hue
            and luminosity of the backdrop color. Painting with this mode in an
            area of the backdrop that is a pure gray (no saturation) produces
            no change.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Color">
            <summary>
            Creates a color with the hue and saturation of the source color and
            the luminosity of the backdrop color. This preserves the gray levels
            of the backdrop and is useful for coloring monochrome images or
            tinting color images.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color and the hue
            and saturation of the backdrop color. This produces an inverse
            effect to that of the <see cref="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Color" /> mode.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfBuiltInFont">
            <summary>
            Specifies names of built-in Type1 fonts available in PDF.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.TimesRoman">
            <summary>
            Times New Roman PS MT (v4.x) font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.Helvetica">
            <summary>
            Helvetica (v3) regular font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.Courier">
            <summary>
            Courier regular font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.Symbol">
            <summary>
            Symbol font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.TimesBold">
            <summary>
            Times (v3) bold font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.HelveticaBold">
            <summary>
            Helvetica (v3) bold font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.CourierBold">
            <summary>
            Courier bold font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.ZapfDingbats">
            <summary>
            Zapf Dingbats font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.TimesItalic">
            <summary>
            Times (v3) italic font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.HelveticaOblique">
            <summary>
            Helvetica (v3) italic font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.CourierOblique">
            <summary>
            Courier italic font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.TimesBoldItalic">
            <summary>
            Times (v3) bold italic font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.HelveticaBoldOblique">
            <summary>
            Helvetica (v3) bold italic font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.CourierBoldOblique">
            <summary>
            Courier bold italic font.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfButtonLayout">
            <summary>
            Specifies how text and image should be placed on the surface of a <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> control relative to each other.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.TextOnly">
            <summary>
            Specifies that only the text is displayed. Image is hidden.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.ImageOnly">
            <summary>
            Specifies that only the image is displayed. Text is hidden.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.ImageAboveText">
            <summary>
            Specifies that the image is displayed horizontally before the text of a control.
            This mode currently is not supported and produces the same result as Overlay mode.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.TextAboveImage">
            <summary>
            Specifies that the text is displayed vertically above the image of a button.
            This mode currently is not supported and produces the same result as Overlay mode.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.ImageBeforeText">
            <summary>
            Specifies that the image is displayed horizontally before the text of a button.
            This mode currently is not supported and produces the same result as Overlay mode.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.TextBeforeImage">
            <summary>
            Specifies that the text is displayed horizontally before the image of a button.
            This mode currently is not supported and produces the same result as Overlay mode.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfButtonLayout.Overlay">
            <summary>
            Specifies that the image and text share the same space on a button. Text overlaid directly on the image.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode">
            <summary>
            All possible modes for certificate revocation checks.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode.EmbeddedOcsp">
            <summary>
            Library checks certificate revocation status using only 
            <a href="https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol">OCSP
            information</a> embedded in the file. 
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode.OnlineOcsp">
            <summary>
            Library checks certificate revocation status using only
            <a href="https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol">OCSP
            information</a> available online. This mode requires internet connection.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode.EmbeddedCrl">
            <summary>
            Library checks certificate revocation status using only  
            <a href="https://en.wikipedia.org/wiki/Certificate_revocation_list">CRL
            information</a> embedded in the file. 
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode.OnlineCrl">
            <summary>
            Library checks certificate revocation status using only
            <a href="https://en.wikipedia.org/wiki/Certificate_revocation_list">CRL
            information</a> available online. This mode requires internet connection.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCertificateValidity">
            <summary>
            All possible results for certificate validity checks.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateValidity.Valid">
            <summary>
            Certificate is valid on the given date and time.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateValidity.Expired">
            <summary>
            Certificate is expired on the given date and time.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCertificateValidity.NotYetValid">
            <summary>
            Certificate is not yet valid on the given date and time.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCompression">
            <summary>
            Specifies compression filter of a document object.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCompression.None">
            <summary>
            An object is uncompressed.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfCompression.Flate">
            <summary>
            An object is compressed using zlib/deflate compression method.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm">
            <summary>
            Specifies names of digest algorithms. Digest algorithms are used for signing documents digitally.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm.Sha1">
            <summary>
            SHA-1. Secure Hash Algorithm 1.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm.Sha256">
            <summary>
            (PDF 1.6) SHA-256. Secure Hash Algorithm 2 with 256 bit digest.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm.Sha384">
            <summary>
            (PDF 1.7) SHA-384. Secure Hash Algorithm 2 with 384 bit digest.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm.Sha512">
            <summary>
            (PDF 1.7) SHA-512. Secure Hash Algorithm 2 with 512 bit digest.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm.Ripemd160">
            <summary>
            (PDF 1.7) RIPEMD-160. RIPE Message Digest algorithm with 160 bit digest.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDrawFormat">
            <summary>
            Specifies the image format to use while saving an image of
            a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawFormat.Png">
            <summary>
            The Portable Network Graphics (PNG) image format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawFormat.Jpeg">
            <summary>
            The Joint Photographic Experts Group (JPEG) image format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawFormat.Tiff">
            <summary>
            The Tagged Image File Format (TIFF) image format.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDrawMode">
            <summary>
            Specifies whether a shape drawn on a <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> should be
            stroked, filled, or filled and then stroked.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawMode.Stroke">
            <summary>
            A shape should be stroked.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawMode.Fill">
            <summary>
            A shape should be filled.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawMode.FillAndStroke">
            <summary>
            A shape should be filled and then stroked.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDrawScaling">
            <summary>
            Specifies how a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> should be resized before being drawn
            and saved as an image.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawScaling.Zoom">
            <summary>
            Scale page to the specified percent.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawScaling.FitWidth">
            <summary>
            Scale page to fit the specified width.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawScaling.FitHeight">
            <summary>
            Scale page to fit the specified height.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfDrawScaling.FitSize">
            <summary>
            Scale page to fit the specified size.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfEncryptionAlgorithm">
            <summary>
            Specifies encryption algorithm of a <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfEncryptionAlgorithm.None">
            <summary>
            Document is not encrypted.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfEncryptionAlgorithm.Standard40Bit">
            <summary>
            Document is encrypted using RC4 algorithm with encryption key
            length of 40 bits.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfEncryptionAlgorithm.Standard128Bit">
            <summary>
            (PDF 1.4) Document is encrypted using RC4 algorithm with encryption
            key length of 128 bits.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfEncryptionAlgorithm.Aes128Bit">
            <summary>
            (PDF 1.6) Document is encrypted using AES algorithm with encryption
            key length of 128 bits.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfEncryptionAlgorithm.Aes256Bit">
            <summary>
            (BaseVersion 1.7, Adobe ExtensionLevel 3) Document is encrypted using AES algorithm with encryption
            key length of 256 bits.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfExtractedImageFormat">
            <summary>
            Specifies the file format of the image extracted from PDF document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfExtractedImageFormat.Png">
            <summary>
            The Portable Network Graphics (PNG) image format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfExtractedImageFormat.Jpeg">
            <summary>
            The Joint Photographic Experts Group (JPEG) image format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfExtractedImageFormat.Tiff">
            <summary>
            The Tagged Image File Format (TIFF) image format.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFileAnnotationIcon">
            <summary>
            Specifies the icon to be used in displaying <see cref="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation" />.
            </summary>
            <remarks>Icon appearances are viewer application-specific.</remarks>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFileAnnotationIcon.Pushpin">
            <summary>
            Predefined "PushPin" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFileAnnotationIcon.Paperclip">
            <summary>
            Predefined "Paperclip" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFileAnnotationIcon.Graph">
            <summary>
            Predefined "Graph" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFileAnnotationIcon.Tag">
            <summary>
            Predefined "Tag" icon to be used.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFillMode">
            <summary>
            Specifies how the interior of a closed path is filled.
            </summary>
            <remarks>
                <para>
            For a simple path, it is intuitively clear what region lies inside. However, for a more complex path - for example,
            a path that intersects itself or has one subpath that encloses another - it is not always obvious which points
            lie inside the path.
            The path machinery uses one of two rules for determining which points lie inside a path: the nonzero winding
            number rule and the even-odd rule.
            </para>
                <h2>Even-Odd Rule</h2>
                <para>
            The even-odd rule determines whether a point is inside a path by drawing a ray from that point in any
            direction and simply counting the number of path segments that cross the ray, regardless of direction.
            If this number is odd, the point is inside; if even, the point is outside. This yields the same results
            as the nonzero winding number rule for paths with simple shapes, but produces different results for more
            complex shapes.
            </para>
                <para>
            The image below shows the effects of applying the even-odd rule to complex paths. For the five-pointed star,
            the rule considers the triangular points to be inside the path, but not the pentagon in the center. For the
            two concentric circles, only the doughnut shape between the two circles is considered inside, regardless of
            the directions in which the circles are drawn.
            </para>
                <img src="media\even-odd-rule.png" />
                <h2>Nonzero Winding Number Rule</h2>
                <para>
            The nonzero winding number rule determines whether a given point is inside a path by conceptually drawing
            a ray from that point to infinity in any direction and then examining the places where a segment of the
            path crosses the ray. Starting with a count of 0, the rule adds 1 each time a path segment crosses the ray
            from left to right and subtracts 1 each time a segment crosses from right to left. After counting all the
            crossings, if the result is 0, the point is outside the path; otherwise, it is inside.
            </para>
                <para>
            Note: The method just described does not specify what to do if a path segment coincides with or is tangent
            to the chosen ray. Since the direction of the ray is arbitrary, the rule simply chooses a ray that does not
            encounter such problem intersections.
            </para>
                <para>
            For simple convex paths, the nonzero winding number rule defines the inside and outside as one would
            intuitively expect. The more interesting cases are those involving complex or self-intersecting paths like
            the ones shown below:
            </para>
                <img src="media\non-zero-winding-rule.png" />
                <para>
            For a path consisting of a five-pointed star, drawn with five connected straight line segments intersecting
            each other, the rule considers the inside to be the entire area enclosed by the star, including the pentagon in the center.
            </para>
                <para>
            For a path composed of two concentric circles, the areas enclosed by both circles are considered to be inside,
            <i>provided that both are drawn in the same direction</i>.
            </para>
                <para>
            If the circles are drawn in opposite directions, only the doughnut shape between them is inside, according
            to the rule; the doughnut hole is outside.
            </para>
            </remarks>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFillMode.Alternate">
            <summary>
            The alternate fill mode (the even-odd rule) should be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFillMode.Winding">
            <summary>
            The winding fill mode (the nonzero winding number rule) should be used.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFontFormat">
            <summary>
            Specifies the format of a <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFontFormat.Type1">
            <summary>
            Type 1 font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFontFormat.MultipleMaster">
            <summary>
            Multiple Master font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFontFormat.TrueType">
            <summary>
            True Type font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFontFormat.Type3">
            <summary>
            Type 3 font.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFontFormat.CidType0">
            <summary>
            Type 0 CID font, containing glyph descriptions in the Compact Font Format (CFF).
            See Adobe Technical Note #5176 for more detail.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfFontFormat.CidType2">
            <summary>
            Type 2 CID font, containing glyph descriptions in the True Type format.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfImageCompression">
            <summary>
            Specifies a compression scheme of an image within a PDF document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.None">
            <summary>
            Uncompressed image data.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate">
            <summary>
            Image data is compressed using zlib/deflate compression method.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group3Fax">
            <summary>
            Image data is compressed using Group 3 CCITT facsimile (fax) encoding.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax">
            <summary>
            Image data is compressed using Group 4 CCITT facsimile (fax) encoding.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg">
            <summary>
            Image data is encoded in the JPEG baseline format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.JBig2">
            <summary>
            Image data is compressed using JBIG2 encoding.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg2000">
            <summary>
            Image data is encoded using the JPEG2000 compression method.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfImageScaleMode">
            <summary>
            Specifies when and how an image on a widget gets scaled.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageScaleMode.AlwaysScale">
            <summary>
            Scale image to exactly fit into the widget rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageScaleMode.ScaleWhenImageBigger">
            <summary>
            Scale only when the image is bigger than the widget rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageScaleMode.ScaleWhenImageSmaller">
            <summary>
            Scale only when the image is smaller than the widget rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfImageScaleMode.NeverScale">
            <summary>
            Never scale the image.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLayerIntent">
            <summary>
            Specifies names of recognizable layer intents.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLayerIntent.View">
            <summary>
            A layer with View intent is intended for interactive use by document consumers.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLayerIntent.Design">
            <summary>
            A layer with Design intent is intended to represent a document designer's structural
            organization of artwork.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLineCap">
            <summary>
            Specifies the shape to be used at the ends of open subpaths (and
            dashes, if any) when they are stroked.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLineCap.ButtEnd">
            <summary>
            The stroke is squared off at the endpoint of the path. There is
            no projection beyond the end of the path.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLineCap.Round">
            <summary>
            A semicircular arc with a diameter equal to the line width is drawn
            around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLineCap.ProjectingSquare">
            <summary>
            The stroke continues beyond the endpoint of the path for a distance
            equal to half the line width and is squared off.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLineJoin">
            <summary>
            Specifies the shape of joints between connected segments of a
            stroked path.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Miter">
            <summary>
            The outer edges of the strokes for the two segments are extended
            until they meet at an angle. If the segments meet at too sharp an
            angle (as defined by the <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.MiterLimit" />
            property), a <see cref="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Bevel" /> join is used instead.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Round">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn
            around the point where the two segments meet, connecting the outer
            edges of the strokes for the two segments. This pie slice-shaped
            figure is filled in, producing a rounded corner.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Bevel">
            <summary>
            The two segments are finished with butt caps (see
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.EndCap" /> property) and the resulting notch
            beyond the ends of the segments is filled with a triangle.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfMetadataSyncMode">
            <summary>
            Specifies how values in <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata">XMP Metadata</see> and
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info">Document Info</see> should be synchronized when
            document gets saved.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfMetadataSyncMode.DoNotSync">
            <summary>
            XMP Metadata and Document Info should not be synchronized.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfMetadataSyncMode.PreferMetadata">
            <summary>
            XMP Metadata and Document Info should be synchronized and XMP Metadata
            should be treated as the source of the information.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfMetadataSyncMode.PreferInfo">
            <summary>
            XMP Metadata and Document Info should be synchronized and Document Info
            should be treated as the source of the information.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageLayout">
            <summary>
            Specifies the page layout to be used when the document is opened.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.Default">
            <summary>
            Display page using default layout. This is the same as SinglePage layout except 
            the PDF does not contain information about the layout at all.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.SinglePage">
            <summary>
            Display one page at a time
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.OneColumn">
            <summary>
            Display the pages in one column
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with odd-numbered pages on
            the left
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.TwoColumnRight">
            <summary>
            Display the pages in two columns, with odd-numbered pages on
            the right
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.TwoPageLeft">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages
            on the left
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageLayout.TwoPageRight">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages
            on the right
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageMode">
            <summary>
            Specifies how the document should be displayed when opened.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseOutlines">
            <summary>
            Document outline visible
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseThumbs">
            <summary>
            Thumbnail images visible
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseOC">
            <summary>
            (PDF 1.5) Optional content group panel visible
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseAttachments">
            <summary>
            (PDF 1.6) Attachments panel visible
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle">
            <summary>
            The numbering styles that can be used for the numeric portion of page labels in
            a <see cref="T:BitMiracle.Docotic.Pdf.PdfPageLabelingRange">labeling range</see>.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.DecimalArabic">
            <summary>
            Decimal arabic numerals.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.UppercaseRoman">
            <summary>
            Uppercase roman numerals.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.LowercaseRoman">
            <summary>
            Lowercase roman numerals.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.UppercaseLetters">
            <summary>
            Uppercase letters (A to Z for the first 26 pages,
            AA to ZZ for the next 26, and so on).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.LowercaseLetters">
            <summary>
            Lowercase letters (a to z for the first 26 pages,
            aa to zz for the next 26, and so on).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.Unspecified">
            <summary>
            Style is unspecified. Page labels won't contain numeric portion.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageObjectType">
            <summary>
            Specifies the type of a <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageObjectType.Text">
            <summary>
            Text object.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageObjectType.Image">
            <summary>
            Image object
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPageObjectType.Path">
            <summary>
            Vector path object.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPaperOrientation">
            <summary>
            Specifies paper orientation of a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> or a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfXObject" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperOrientation.Portrait">
            <summary>
            Paper is rotated into portrait orientation.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperOrientation.Landscape">
            <summary>
            Paper is rotated into landscape orientation.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPaperSize">
            <summary>
            Specifies the standard paper sizes.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Custom">
            <summary>
            The paper size is defined by the user.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Letter">
            <summary>
            Letter paper (8.5 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.LetterSmall">
            <summary>
            Letter small paper (8.5 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Tabloid">
            <summary>
            Tabloid paper (11 in. by 17 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Ledger">
            <summary>
            Ledger paper (17 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Legal">
            <summary>
            Legal paper (8.5 in. by 14 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Statement">
            <summary>
            Statement paper (5.5 in. by 8.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Executive">
            <summary>
            Executive paper (7.25 in. by 10.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A3">
            <summary>
            A3 paper (297 mm by 420 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4">
            <summary>
            A4 paper (210 mm by 297 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4Small">
            <summary>
            A4 small paper (210 mm by 297 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A5">
            <summary>
            A5 paper (148 mm by 210 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B4">
            <summary>
            B4 paper (250 mm by 353 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B5">
            <summary>
            B5 paper (176 mm by 250 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Folio">
            <summary>
            Folio paper (8.5 in. by 13 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Quarto">
            <summary>
            Quarto paper (215 mm by 275 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Standard10x14">
            <summary>
            Standard paper (10 in. by 14 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Standard11x17">
            <summary>
            Standard paper (11 in. by 17 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Note">
            <summary>
            Note paper (8.5 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Number9Envelope">
            <summary>
            #9 envelope (3.875 in. by 8.875 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Number10Envelope">
            <summary>
            #10 envelope (4.125 in. by 9.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Number11Envelope">
            <summary>
            #11 envelope (4.5 in. by 10.375 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Number12Envelope">
            <summary>
            #12 envelope (4.75 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Number14Envelope">
            <summary>
            #14 envelope (5 in. by 11.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.CSheet">
            <summary>
            C paper (17 in. by 22 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.DSheet">
            <summary>
            D paper (22 in. by 34 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.ESheet">
            <summary>
            E paper (34 in. by 44 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.DLEnvelope">
            <summary>
            DL envelope (110 mm by 220 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.C5Envelope">
            <summary>
            C5 envelope (162 mm by 229 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.C3Envelope">
            <summary>
            C3 envelope (324 mm by 458 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.C4Envelope">
            <summary>
            C4 envelope (229 mm by 324 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.C6Envelope">
            <summary>
            C6 envelope (114 mm by 162 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.C65Envelope">
            <summary>
            C65 envelope (114 mm by 229 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B4Envelope">
            <summary>
            B4 envelope (250 mm by 353 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B5Envelope">
            <summary>
            B5 envelope (176 mm by 250 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B6Envelope">
            <summary>
            B6 envelope (176 mm by 125 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.ItalyEnvelope">
            <summary>
            Italy envelope (110 mm by 230 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.MonarchEnvelope">
            <summary>
            Monarch envelope (3.875 in. by 7.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PersonalEnvelope">
            <summary>
            6 3/4 envelope (3.625 in. by 6.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.USStandardFanfold">
            <summary>
            US standard fanfold (14.875 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.GermanStandardFanfold">
            <summary>
            German standard fanfold (8.5 in. by 12 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.GermanLegalFanfold">
            <summary>
            German legal fanfold (8.5 in. by 13 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.IsoB4">
            <summary>
            ISO B4 (250 mm by 353 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.JapanesePostcard">
            <summary>
            Japanese postcard (100 mm by 148 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Standard9x11">
            <summary>
            Standard paper (9 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Standard10x11">
            <summary>
            Standard paper (10 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Standard15x11">
            <summary>
            Standard paper (15 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.InviteEnvelope">
            <summary>
            Invitation envelope (220 mm by 220 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4Extra">
            <summary>
            A4 extra paper (236 mm by 322 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.LetterTransverse">
            <summary>
            Letter transverse paper (8.275 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4Transverse">
            <summary>
            A4 transverse paper (210 mm by 297 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.LetterExtraTransverse">
            <summary>
            Letter extra transverse paper (9.275 in. by 12 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.APlus">
            <summary>
            SuperA/SuperA/A4 paper (227 mm by 356 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.BPlus">
            <summary>
            SuperB/SuperB/A3 paper (305 mm by 487 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.LetterPlus">
            <summary>
            Letter plus paper (8.5 in. by 12.69 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4Plus">
            <summary>
            A4 plus paper (210 mm by 330 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A5Transverse">
            <summary>
            A5 transverse paper (148 mm by 210 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B5Transverse">
            <summary>
            JIS B5 transverse paper (182 mm by 257 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A3Extra">
            <summary>
            A3 extra paper (322 mm by 445 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A5Extra">
            <summary>
            A5 extra paper (174 mm by 235 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B5Extra">
            <summary>
            ISO B5 extra paper (201 mm by 276 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A2">
            <summary>
            A2 paper (420 mm by 594 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A3Transverse">
            <summary>
            A3 transverse paper (297 mm by 420 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A3ExtraTransverse">
            <summary>
            A3 extra transverse paper (322 mm by 445 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.JapaneseDoublePostcard">
            <summary>
            Japanese double postcard (200 mm by 148 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A6">
            <summary>
            A6 paper (105 mm by 148 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.LetterRotated">
            <summary>
            Letter rotated paper (11 in. by 8.5 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A3Rotated">
            <summary>
            A3 rotated paper (420 mm by 297 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4Rotated">
            <summary>
            A4 rotated paper (297 mm by 210 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A5Rotated">
            <summary>
            A5 rotated paper (210 mm by 148 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B4JisRotated">
            <summary>
            JIS B4 rotated paper (364 mm by 257 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B5JisRotated">
            <summary>
            JIS B5 rotated paper (257 mm by 182 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.JapanesePostcardRotated">
            <summary>
            Japanese rotated postcard (148 mm by 100 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.JapaneseDoublePostcardRotated">
            <summary>
            Japanese rotated double postcard (148 mm by 200 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A6Rotated">
            <summary>
            A6 rotated paper (148 mm by 105 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B6Jis">
            <summary>
            JIS B6 paper (128 mm by 182 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.B6JisRotated">
            <summary>
            JIS B6 rotated paper (182 mm by 128 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Standard12x11">
            <summary>
            Standard paper (12 in. by 11 in.).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Prc16K">
            <summary>
            People's Republic of China 16K paper (146 mm by 215 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Prc32K">
            <summary>
            People's Republic of China 32K paper (97 mm by 151 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Prc32KBig">
            <summary>
            People's Republic of China 32K big paper (97 mm by 151 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber1">
            <summary>
            People's Republic of China #1 envelope (102 mm by 165 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber2">
            <summary>
            People's Republic of China #2 envelope (102 mm by 176 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber3">
            <summary>
            People's Republic of China #3 envelope (125 mm by 176 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber4">
            <summary>
            People's Republic of China #4 envelope (110 mm by 208 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber5">
            <summary>
            People's Republic of China #5 envelope (110 mm by 220 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber6">
            <summary>
            People's Republic of China #6 envelope (120 mm by 230 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber7">
            <summary>
            People's Republic of China #7 envelope (160 mm by 230 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber8">
            <summary>
            People's Republic of China #8 envelope (120 mm by 309 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber9">
            <summary>
            People's Republic of China #9 envelope (229 mm by 324 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber10">
            <summary>
            People's Republic of China #10 envelope (324 mm by 458 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Prc16KRotated">
            <summary>
            People's Republic of China 16K rotated paper (146 mm by 215 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Prc32KRotated">
            <summary>
            People's Republic of China 32K rotated paper (97 mm by 151 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.Prc32KBigRotated">
            <summary>
            People's Republic of China 32K big rotated paper (97 mm by 151 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber1Rotated">
            <summary>
            People's Republic of China #1 rotated envelope (165 mm by 102 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber2Rotated">
            <summary>
            People's Republic of China #2 rotated envelope (176 mm by 102 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber3Rotated">
            <summary>
            People's Republic of China #3 rotated envelope (176 mm by 125 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber4Rotated">
            <summary>
            People's Republic of China #4 rotated envelope (208 mm by 110 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber5Rotated">
            <summary>
            People's Republic of China Envelope #5 rotated envelope (220 mm by 110 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber6Rotated">
            <summary>
            People's Republic of China #6 rotated envelope (230 mm by 120 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber7Rotated">
            <summary>
            People's Republic of China #7 rotated envelope (230 mm by 160 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber8Rotated">
            <summary>
            People's Republic of China #8 rotated envelope (309 mm by 120 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber9Rotated">
            <summary>
            People's Republic of China #9 rotated envelope (324 mm by 229 mm).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPaperSize.PrcEnvelopeNumber10Rotated">
            <summary>
            People's Republic of China #10 rotated envelope (458 mm by 324 mm).
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPathSegmentType">
            <summary>
            Specifies the type of a <see cref="T:BitMiracle.Docotic.Pdf.PdfPathSegment" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPathSegmentType.Rectangle">
            <summary>
            Rectangular segment. See <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangleSegment" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPathSegmentType.Point">
            <summary>
            Point segment. See <see cref="T:BitMiracle.Docotic.Pdf.PdfPointSegment" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPathSegmentType.Line">
            <summary>
            Straight line segment. See <see cref="T:BitMiracle.Docotic.Pdf.PdfLineSegment" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPathSegmentType.Bezier">
            <summary>
            Bezier curve segment. See <see cref="T:BitMiracle.Docotic.Pdf.PdfBezierSegment" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPathSegmentType.CloseSubpath">
            <summary>
            A segment, closing subpath. See <see cref="T:BitMiracle.Docotic.Pdf.PdfCloseSubpathSegment" /> class.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPatternPaintType">
            <summary>
            Specifies how the color of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPattern" /> cell is to be
            specified.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPatternPaintType.Colored">
            <summary>
            The pattern is colored. The pattern itself is to be used for drawing.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPatternPaintType.Uncolored">
            <summary>
            The pattern has no color. The pattern describes a stencil through
            which the current color is to be poured.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPatternTiling">
            <summary>
            Specifies adjustments to the spacing of <see cref="T:BitMiracle.Docotic.Pdf.PdfPattern" /> tiles
            relative to the device pixel grid. 
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPatternTiling.ConstantSpacing">
            <summary>
            Pattern cells are spaced consistently - that is, by a multiple of
            a device pixel. To achieve this, the application may need to
            distort the pattern cell slightly. The amount of distortion does
            not exceed 1 device pixel.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPatternTiling.NoDistortion">
            <summary>
            The pattern cell is not distorted, but the spacing between pattern
            cells may vary by as much as 1 device pixel, both horizontally and
            vertically, when the pattern is painted.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPatternTiling.ConstantSpacingAndFasterTiling">
            <summary>
            Pattern cells are spaced consistently as in
            <see cref="F:BitMiracle.Docotic.Pdf.PdfPatternTiling.ConstantSpacing" /> but with additional distortion
            permitted to enable a more efficient implementation.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPermissionFlags">
            <summary>
            Specifies user access permissions for an encrypted document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.None">
            <summary>
            Permit only viewing.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.PrintDocument">
            <summary>
            Print the document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.ModifyContents">
            <summary>
            Modify the contents of the document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.CopyContents">
            <summary>
            Copy or otherwise extract text and graphics from the document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.ModifyAnnotations">
            <summary>
            Add or modify text annotations, fill in interactive form fields.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.FillFormFields">
            <summary>
            Fill in existing interactive form fields (including signature fields).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.ExtractContents">
            <summary>
            Extract text and graphics (in support of accessibility to users
            with disabilities or for other purposes).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.AssembleDocument">
            <summary>
            Assemble the document (insert, rotate, or delete pages and create
            bookmarks or thumbnail images).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.PrintFaithfulCopy">
            <summary>
            Print the document to a representation from which a faithful
            digital copy of the PDF content could be generated.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPermissionFlags.Everything">
            <summary>
            Permit everything.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRenditionOperation">
            <summary>
            Enumeration for all known rendition operations.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRenditionOperation.Unspecified">
            <summary>
            Operation is not specified.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRenditionOperation.PlayNew">
            <summary>
            If no rendition is associated with the annotation, play the specified rendition,
            associating it with the annotation. If a rendition is already associated with the
            annotation, it shall be stopped, and the new rendition shall be associated with
            the annotation.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRenditionOperation.Stop">
            <summary>
            Stop any rendition being played in association with the annotation, and remove
            the association. If no rendition is being played, there is no effect.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRenditionOperation.Pause">
            <summary>
            Pause any rendition being played in association with the annotation. If no rendition
            is being played, there is no effect.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRenditionOperation.Resume">
            <summary>
            Resume any rendition being played in association with the annotation. If no rendition
            is being played or the rendition is not paused, there is no effect.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRenditionOperation.Play">
            <summary>
            Play the specified rendition, associating it with the annotation. If a rendition is
            already associated with the annotation, resume the rendition if it is paused;
            otherwise, do nothing.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRotation">
            <summary>
            Specifies the rotation of a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRotation.None">
            <summary>
            Page is not rotated.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRotation.Rotate90">
            <summary>
            Page is rotated 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRotation.Rotate180">
            <summary>
            Page is rotated 180 degrees clockwise.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRotation.Rotate270">
            <summary>
            Page is rotated 270 degrees clockwise.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureFieldLockAction">
            <summary>
            All possible actions for a signature field lock.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureFieldLockAction.All">
            <summary>
            All fields in the document get locked.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureFieldLockAction.Include">
            <summary>
            All fields with the specified names get locked.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureFieldLockAction.Exclude">
            <summary>
            All fields except fields with the specified names get locked.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureFormat">
            <summary>
            Specifies digital signature formats.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureFormat.Pkcs7Detached">
            <summary>
            The adbe.pkcs7.detached signature format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureFormat.CadesDetached">
            <summary>
            (PDF 1.7) The ETSI.CAdES.detached signature format.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureType">
            <summary>
            Specifies digital signature type.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureType.Approval">
            <summary>
            The approval signature type.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureType.AuthorNoChanges">
            <summary>
            An author (certification) signature type. No changes allowed to the signed document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureType.AuthorFormFillingAllowed">
            <summary>
            An author (certification) signature type. It is allowed to fill the form in the signed
            document.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSignatureType.AuthorFormFillingAndAnnotationsAllowed">
            <summary>
            An author (certification) signature type. It is allowed to add annotations to and fill
            the form in the signed document.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSubmitFormat">
            <summary>
            Specifies the form in which control names and values are submitted by
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSubmitFormat.Html">
            <summary>
            Control names and values are submitted in HTML Form format.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSubmitFormat.Fdf">
            <summary>
            Control names and values are submitted in Forms Data Format (FDF).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSubmitFormat.Xfdf">
            <summary>
            (PDF 1.4) Control names and values are submitted in XML Forms Data
            Format (XFDF).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSubmitFormat.Pdf">
            <summary>
            (PDF 1.4) The whole document (not only control names and values) is
            submitted as PDF, using the MIME content type application/pdf
            (described in Internet RFC 2045, Multipurpose Internet Mail
            Extensions (MIME), Part One: Format of Internet Message Bodies).
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSubmitMethod">
            <summary>
            Specifies how control names and values are submitted by
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSubmitMethod.Get">
            <summary>
            Control names and values are submitted using an HTTP GET request.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSubmitMethod.Post">
            <summary>
            Control names and values are submitted using an HTTP POST request.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextAlign">
            <summary>
            Specifies the horizontal alignment of text.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAlign.Left">
            <summary>
            Text is left justified.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAlign.Center">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAlign.Right">
            <summary>
            Text is right justified.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon">
            <summary>
            Specifies the icon to be used in displaying 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" />.
            </summary>
            <remarks>Icon appearances are viewer application-specific.</remarks>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.Comment">
            <summary>
            Predefined "Comment" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.Key">
            <summary>
            Predefined "Key" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.Note">
            <summary>
            Predefined "Note" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.Help">
            <summary>
            Predefined "Help" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.NewParagraph">
            <summary>
            Predefined "NewParagraph" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.Paragraph">
            <summary>
            Predefined "Paragraph" icon to be used.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextAnnotationIcon.Insert">
            <summary>
            Predefined "Insert" icon to be used.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextRenderingMode">
            <summary>
            Specifies whether drawing text on a <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> causes glyph
            outlines to be stroked, filled, used as a clipping boundary, or some
            combination of the three.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.Stroke">
            <summary>
            Stroke text.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.FillAndStroke">
            <summary>
            Fill, then stroke text.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.NeitherFillNorStroke">
            <summary>
            Neither fill nor stroke text (draw invisible text).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.FillAndAddToPath">
            <summary>
            Fill text and add to path for clipping.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.StrokeAndAddToPath">
            <summary>
            Stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.FillStrokeAndAddToPath">
            <summary>
            Fill, then stroke text and add to path for clipping.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.AddToPath">
            <summary>
            Add text to path for clipping.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfVersion">
            <summary>
            Specifies the version of the PDF specification to which the file conforms
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf10">
            <summary>
            PDF-1.0 (supported in Adobe Acrobat 1.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf11">
            <summary>
            PDF-1.1 (supported in Adobe Acrobat 2.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf12">
            <summary>
            PDF-1.2 (supported in Adobe Acrobat 3.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf13">
            <summary>
            PDF-1.3 (supported in Adobe Acrobat 4.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf14">
            <summary>
            PDF-1.4 (supported in Adobe Acrobat 5.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf15">
            <summary>
            PDF-1.5 (supported in Adobe Acrobat 6.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf16">
            <summary>
            PDF-1.6 (supported in Adobe Acrobat 7.0 and higher versions)
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf17">
            <summary>
            PDF-1.7 (supported in Adobe Acrobat 8.0 and higher versions)
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfVerticalAlign">
            <summary>
            Specifies the vertical alignment of text.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVerticalAlign.Top">
            <summary>
            Text is aligned with the top of the enclosing rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVerticalAlign.Center">
            <summary>
            Text is aligned with the center of the enclosing rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfVerticalAlign.Bottom">
            <summary>
            Text is aligned with the bottom of the enclosing rectangle.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfWidgetFlags">
            <summary>
            Specifies various characteristics of a <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.Invisible">
            <summary>
            If set, do not display the widget if it does not belong to one of
            the standard widget types and there is no action associated with the
            widget.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.Hidden">
            <summary>
            If set, do not display or print the widget or allow it to interact
            with the user, regardless of its widget type or whether there is an
            action associated with the widget.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.Print">
            <summary>
            If set, print the widget when the page is printed. If clear, never
            print the widget, regardless of whether it is displayed on the screen.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.NoZoom">
            <summary>
            If set, do not scale the widget's appearance to match the 
            magnification of the page.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.NoRotate">
            <summary>
            If set, do not rotate the widget's appearance to match the 
            rotation of the page.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.NoView">
            <summary>
            If set, do not display the widget on the screen or allow it
            to interact with the user. The widget may be printed (depending on
            the setting of the <see cref="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.Print" /> flag) but should be 
            considered hidden for purposes of on-screen display and 
            user interaction.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.ReadOnly">
            <summary>
            If set, do not allow the widget to interact with the user. 
            The widget may be displayed or printed (depending on the
            settings of the <see cref="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.NoView" /> and <see cref="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.Print" /> flags)
            but should not respond to mouse clicks or change its appearance in
            response to mouse motions.</summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.Locked">
            <summary>
            (PDF 1.4) If set, do not allow the widget to be deleted or its
            properties (including position and size) to be modified by the user.
            This flag does not restrict changes to the widget's
            contents, such as the value of a form field.</summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.ToggleNoView">
            <summary>
            (PDF 1.5) If set, invert the interpretation of the
            <see cref="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.NoView" /> flag for certain events.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetFlags.LockedContents">
            <summary>
            (PDF 1.7) If set, do not allow the contents of the widget to be
            modified by the user.
            This flag does not restrict deletion of the widget or
            changes to other widget properties, such as position and
            size.</summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfWidgetType">
            <summary>
            Specifies the type of a <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.TextAnnotation">
            <summary>
            Text annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.ActionArea">
            <summary>
            Action area. See <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Button">
            <summary>
            Button. See <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.CheckBox">
            <summary>
            Check box. See <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.ComboBox">
            <summary>
            Combo box. See <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.RadioButton">
            <summary>
            Radio button. See <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.TextBox">
            <summary>
            Text box. See <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Signature">
            <summary>
            Signature field. See <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.FreeTextAnnotation">
            <summary>
            Free text annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Line">
            <summary>
            Line annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfLineAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Rectangle">
            <summary>
            Rectangle annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Ellipse">
            <summary>
            Ellipse annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Polygon">
            <summary>
            Polygon annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Polyline">
            <summary>
            Polyline annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.HighlightAnnotation">
            <summary>
            Highlight annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfHighlightAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.UnderlineAnnotation">
            <summary>
            Underline annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfUnderlineAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.JaggedUnderlineAnnotation">
            <summary>
            Jagged-underline annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfJaggedUnderlineAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.StrikeoutAnnotation">
            <summary>
            Strikeout annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfStrikeoutAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Stamp">
            <summary>
            Rubber stamp annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfStampAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Caret">
            <summary>
            Caret annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfCaretAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Ink">
            <summary>
            Ink annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfInkAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Popup">
            <summary>
            Pop-up annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfPopupAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.FileAttachment">
            <summary>
            File attachment annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Sound">
            <summary>
            Sound annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfSoundAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Movie">
            <summary>
            Movie annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfMovieAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Screen">
            <summary>
            Screen annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfScreenAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.PrinterMark">
            <summary>
            Printer’s mark annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfPrinterMarkAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.TrapNetworkAnnotation">
            <summary>
            Trap network annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfTrapNetworkAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Watermark">
            <summary>
            Watermark annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfWatermarkAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Artwork3D">
            <summary>
            3D annotation. See <see cref="T:BitMiracle.Docotic.Pdf.Pdf3dAnnotation" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.ListBox">
            <summary>
            List box. See <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> class.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfWidgetType.RichMedia">
            <summary>
            Rich media annotation. See <see cref="T:BitMiracle.Docotic.Pdf.PdfRichMediaAnnotation" /> class.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfZoom">
            <summary>
            Specifies <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> zoom type.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.PercentBased">
            <summary>
            Display the page designated by page, with the coordinates 
            (left, top) positioned at the upper-left corner of the window and
            the contents of the page magnified by the factor zoom.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitPage">
            <summary>
            Display the page designated by page, with its contents magnified
            just enough to fit the entire page within the window both
            horizontally and vertically.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitWidth">
            <summary>
            Display the page designated by page, with the vertical coordinate
            top positioned at the top edge of the window and the contents of
            the page magnified just enough to fit the entire width of the
            page within the window.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitHeight">
            <summary>
            Display the page designated by page, with the horizontal coordinate
            left positioned at the left edge of the window and the contents of
            the page magnified just enough to fit the entire height of the page
            within the window.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitRect">
            <summary>
            Display the page designated by page, with its contents magnified
            just enough to fit the rectangle specified by the coordinates left,
            bottom, right, and top entirely within the window both horizontally
            and vertically.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBox">
            <summary>
            Display the page designated by page, with its contents magnified
            just enough to fit its bounding box entirely within the window both
            horizontally and vertically.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxWidth">
            <summary>
            Display the page designated by page, with the vertical coordinate
            top positioned at the top edge of the window and the contents of
            the page magnified just enough to fit the entire width of its
            bounding box within the window.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxHeight">
            <summary>
            Display the page designated by page, with the horizontal coordinate
            left positioned at the left edge of the window and the contents of
            the page magnified just enough to fit the entire height of its
            bounding box within the window.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpArrayType">
            <summary>
            Specifies the type of an <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.XmpArrayType.Unordered">
            <summary>
            An unordered array. A list of values whose order does not have significance.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.XmpArrayType.Ordered">
            <summary>
            An ordered array. A list whose order is significant.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.XmpArrayType.Alternative">
            <summary>
            An alternative array. A set of one or more values, one of which should be chosen.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.CannotDecryptPdfException">
            <summary>
            The exception that is thrown when the library can not decrypt an encrypted PDF. 
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotDecryptPdfException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotDecryptPdfException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.CannotDecryptPdfException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotDecryptPdfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotDecryptPdfException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotDecryptPdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotDecryptPdfException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotDecryptPdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotDecryptPdfException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.CannotParseFdfException">
            <summary>
            The exception that is thrown when the library can not parse a Forms Data File (FDF).
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotParseFdfException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotParseFdfException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.CannotParseFdfException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotParseFdfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotParseFdfException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotParseFdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotParseFdfException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotParseFdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotParseFdfException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.CannotShowTextException">
            <summary>
            The exception that is thrown when the library can not show text on a PDF canvas.
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotShowTextException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotShowTextException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.CannotShowTextException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotShowTextException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotShowTextException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotShowTextException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotShowTextException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.CannotShowTextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.CannotShowTextException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.DigitalSignatureException">
            <summary>
            The exception that is thrown when the library can not validate a digital signature
            or when the library can no sign a PDF with a digital signature.
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.DigitalSignatureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.DigitalSignatureException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.DigitalSignatureException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.DigitalSignatureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.DigitalSignatureException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.DigitalSignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.DigitalSignatureException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.DigitalSignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.DigitalSignatureException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.IncorrectPasswordException">
            <summary>
            The exception that is thrown when the library tries to open an encrypted PDF with an
            incorrect password or without a password.
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.IncorrectPasswordException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.IncorrectPasswordException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.IncorrectPasswordException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.IncorrectPasswordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.IncorrectPasswordException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.IncorrectPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.IncorrectPasswordException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.IncorrectPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.IncorrectPasswordException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfException">
            <summary>
            Class for errors specific to Docotic.Pdf that occur during application execution.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.UnexpectedStructureException">
            <summary>
            The exception that is thrown when the library can not parse a PDF or when the document
            contains unexpected objects. The exception is also thrown when a PDF does not contain
            expected objects.
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnexpectedStructureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnexpectedStructureException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.UnexpectedStructureException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnexpectedStructureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnexpectedStructureException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnexpectedStructureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnexpectedStructureException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnexpectedStructureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnexpectedStructureException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.UnsupportedFontException">
            <summary>
            The exception that is thrown when the library can not process a font. It might be an
            embedded font or an external one.
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedFontException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedFontException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedFontException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedFontException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedFontException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedFontException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedFontException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedFontException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedFontException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.UnsupportedImageException">
            <summary>
            The exception that is thrown when the library can not open, extract or recompress an image. 
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedImageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedImageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedImageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedImageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.UnsupportedMetadataException">
            <summary>
            The exception that is thrown when the library can not process document metadata.
            </summary>
            <remarks>The <see cref="P:System.Exception.Message" /> contains more info about the cause of the
            exception.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedMetadataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedMetadataException" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedMetadataException" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedMetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedMetadataException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedMetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedMetadataException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.UnsupportedMetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedMetadataException" /> class.
            </summary>
            <param name="info">The
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
            holds the serialized object data about the exception being
            thrown.</param>
            <param name="context">The
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
            contains contextual information about the source or
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The
            <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" />
            is zero (0). </exception>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfExponentialFunction">
            <summary>
            Defines an exponential interpolation of one input value and <c>n</c> output values:
            <c>f(x) = y<sub>0</sub>, ..., y<sub>n-1</sub></c>.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfExponentialFunction.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.Double,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfExponentialFunction" /> class.
            </summary>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfExponentialFunction" />
            class.</overloads>
            <param name="document">The document to which this function belongs.</param>
            <param name="exponent">The interpolation exponent.</param>
            <param name="domain">The domain of the function (the set of input values for
            which the function is defined).</param>
            <remarks>
                <para>
            Each input value <c>x</c> will return <c>n</c> values, given by
            y<sub>j</sub> = C0<sub>j</sub> + x<sup>N</sup> * (C1<sub>j</sub> − C0<sub>j</sub>),
            for 0 ≤ j &lt; n. Where N is the interpolation exponent specified by
            <paramref name="exponent" /> parameter.
            </para>
                <para>
                    <c>C0</c> and <c>C1</c> are assumed to have default values of
            <c>[ 0.0 ]</c> and <c>[ 1.0 ]</c> respectively.
            </para>
                <para>Since the range of the function is not set, output values won't be clipped.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfExponentialFunction.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.Double,System.Double[],System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfExponentialFunction" /> class.
            </summary>
            <param name="document">The document to which this function belongs.</param>
            <param name="exponent">The interpolation exponent.</param>
            <param name="c0">The array of <c>n</c> numbers defining the function result
            when <c>x</c> = 0.0.</param>
            <param name="c1">The array of <c>n</c> numbers defining the function result
            when <c>x</c> = 1.0.</param>
            <param name="domain">The domain of the function (the set of input values for
            which the function is defined).</param>
            <remarks>
                <para>
            Each input value <c>x</c> will return <c>n</c> values, given by
            y<sub>j</sub> = C0<sub>j</sub> + x<sup>N</sup> * (C1<sub>j</sub> − C0<sub>j</sub>),
            for 0 ≤ j &lt; n. Where N is the interpolation exponent specified by
            <paramref name="exponent" /> parameter.
            </para>
                <para>Since the range of the function is not set, output values won't be clipped.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfExponentialFunction.#ctor(BitMiracle.Docotic.Pdf.PdfDocument,System.Double,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfExponentialFunction" /> class.
            </summary>
            <param name="document">The document to which this function belongs.</param>
            <param name="exponent">The interpolation exponent.</param>
            <param name="c0">The array of <c>n</c> numbers defining the function result
            when <c>x</c> = 0.0.</param>
            <param name="c1">The array of <c>n</c> numbers defining the function result
            when <c>x</c> = 1.0.</param>
            <param name="domain">The domain of the function (the set of input values for
            which the function is defined).</param>
            <param name="range">The range of the function (the set of output values of
            the function).</param>
            <remarks>
                <para>
            Each input value <c>x</c> will return <c>n</c> values, given by
            y<sub>j</sub> = C0<sub>j</sub> + x<sup>N</sup> * (C1<sub>j</sub> − C0<sub>j</sub>),
            for 0 ≤ j &lt; n. Where N is the interpolation exponent specified by
            <paramref name="exponent" /> parameter.
            </para>
                <para>Output values will be clipped to the range of the function specified by
            <paramref name="range" /> parameter.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfExponentialFunction.Exponent">
            <summary>
            Gets the interpolation exponent of this function.
            </summary>
            <value>
            The interpolation exponent of this function.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfExponentialFunction.C0">
            <summary>
            Gets the array of numbers defining the function result when <c>x</c> = 0.0.
            </summary>
            <value>
            The array of numbers defining the function result when <c>x</c> = 0.0.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfExponentialFunction.C1">
            <summary>
            Gets the array of numbers defining the function result when <c>x</c> = 1.0.
            </summary>
            <value>
            The array of numbers defining the function result when <c>x</c> = 1.0.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfExponentialFunction.Domain">
            <summary>
            Gets the domain of the function.
            </summary>
            <value>
            The domain of the function.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfExponentialFunction.Range">
            <summary>
            Gets the range of the function.
            </summary>
            <value>
            The range of the function.
            </value>
            <remarks>The range of the function can be undefined (equal to <c>null</c>).</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfExponentialFunction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFunction">
            <summary>
            The base class for PDF function classes.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.Internal.Annotations.AnnotationBorderStyle">
            <summary>
            All possible annotation border styles.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Annotations.AnnotationBorderStyle.S">
            <summary>
            (Solid) A solid rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Annotations.AnnotationBorderStyle.D">
            <summary>
            (Dashed) A dashed rectangle surrounding the annotation.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Annotations.AnnotationBorderStyle.B">
            <summary>
            (Beveled) A simulated embossed rectangle that appears to be raised above the surface of the page.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Annotations.AnnotationBorderStyle.I">
            <summary>
            (Inset) A simulated engraved rectangle that appears to be recessed below the surface of the page.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Annotations.AnnotationBorderStyle.U">
            <summary>
            (Underline) A single line along the bottom of the annotation rectangle.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.Internal.Images.RenderingIntent">
            <summary>
            A color rendering intent to be used in rendering the image
            (see PDF Reference 1.7 "Rendering Intents" on page 260).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Images.RenderingIntent.Perceptual">
            <summary>
            Colors are represented in a manner that provides a pleasing
            perceptual appearance.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Images.RenderingIntent.RelativeColorimetric">
            <summary>
            Colors are represented with respect to the combination of the light
            source and the output medium’s white point (such as the color of
            unprinted paper).
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Images.RenderingIntent.Saturation">
            <summary>
            Colors are represented in a manner that preserves or 
            emphasizes saturation.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.Internal.Images.RenderingIntent.AbsoluteColorimetric">
            <summary>
            Colors are represented solely with respect to the light source;
            no correction is made for the output medium’s white point (such as
            the color of unprinted paper).
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.Internal.Layers.LayerBaseState">
            <summary>
            Specifies base state of all layers in a layer configuration
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.DirectoryFontLoader">
            <summary>
            An implementation of the <see cref="T:BitMiracle.Docotic.Pdf.IFontLoader" /> interface that loads
            font bytes from the specified directories.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.DirectoryFontLoader.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.DirectoryFontLoader" /> class.
            </summary>
            <param name="directories">
            The array of directory names to use when looking for the font.
            </param>
            <param name="recursive">
            Set to <c>true</c> to perform the search in subdirectories too.
            </param>
            <remarks>
                <para>
            The <paramref name="directories" /> array must include at least one entry. Each entry 
            must be the name of an existing directory.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.DirectoryFontLoader.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads font bytes.
            </summary>
            <param name="familyName">Family name of the font</param>
            <param name="bold">Set to <c>true</c> for the bold font weight</param>
            <param name="italic">Set to <c>true</c> for the italic font style</param>
            <returns>
            The bytes of an eligible font or <c>null</c> if an eligible font was not found.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.GdiFontLoader">
            <summary>
            An implementation of the <see cref="T:BitMiracle.Docotic.Pdf.IFontLoader" /> interface that loads
            font bytes from the operating system using GDI+ and the 
            <see cref="T:System.Drawing.Font" /> class.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.GdiFontLoader.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads font bytes.
            </summary>
            <param name="familyName">Family name of the font</param>
            <param name="bold">Set to <c>true</c> for the bold font weight</param>
            <param name="italic">Set to <c>true</c> for the italic font style</param>
            <returns>
            The bytes of an eligible font or <c>null</c> if an eligible font was not found.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.IFontLoader">
            <summary>
            Exposes method used to load font bytes from a generic source (operating system,
            directory, etc.)
            </summary>
            <remarks>
            This interface is used to load font bytes when:
            <ul><li>the font is not embedded in PDF document, or</li><li>the font is added to PDF document by using family name and style only</li></ul></remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.IFontLoader.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads font bytes.
            </summary>
            <param name="familyName">Family name of the font</param>
            <param name="bold">Set to <c>true</c> for the bold font weight</param>
            <param name="italic">Set to <c>true</c> for the italic font style</param>
            <returns>
            The bytes of an eligible font or <c>null</c> if an eligible font was not found.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.ImageCompressionOptions">
            <summary>
            The compression options for images produced during PDF to image conversion.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.Format">
            <summary>
            Gets the image format to use while saving an image of a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <value>The image format to use while saving an image of a page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.BitsPerPixel">
            <summary>
            Get the number of bits per pixel of the image.
            </summary>
            <value>The number of bits per pixel of the image.</value>
            <remarks>
                <para>The lower the value, the less bytes will be used by the image.</para>
                <para>Valid values for this property depend on the <see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.Format" />.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.TileWidth">
            <summary>
            Gets the width of the tile to use while drawing.
            </summary>
            <value>
            The width of the tile to use while drawing.
            </value>
            <remarks>
                <para>
            This value is useful when you want to reduce amount of memory used while drawing.
            </para>
                <para>
            The lower the value, the less memory is used but the overall drawing process will take more time.
            </para>
                <para>
            The value of this property is ignored when output format is not TIFF.
            </para>
                <para>
            The library uses the value of this property as a recommendation only and can use slightly
            bigger or smaller tiles if needed.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.TileHeight">
            <summary>
            Gets the height of the tile to use while drawing.
            </summary>
            <value>
            The height of the tile to use while drawing.
            </value>
            <remarks>
                <para>
            This value is useful when you want to reduce amount of memory used while drawing.
            </para>
                <para>
            The lower the value, the less memory is used but the overall drawing process will take more time.
            </para>
                <para>
            The value of this property is ignored when output format is not TIFF.
            </para>
                <para>
            The library uses the value of this property as a recommendation only and can use slightly
            bigger or smaller tiles if needed.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.BitonalConversionThreshold">
            <summary>
            Gets the threshold level to use when producing bitonal images.
            </summary>
            <value>The threshold level to use when producing bitonal images.</value>
            <remarks>
                <para>The threshold level is used to decide which pixels are white and
            which are black when converting image data to black-and-white format.</para>
                <para>The threshold level value should be between 0 and 255 inclusive. A
            threshold value 0 means that library should use midpoint between most
            light and dark pixels as a threshold value.
            </para>
                <para>
            If the image contains some scanned document or other data with mostly white
            background pixels and mostly black foreground pixels then threshold level
            of 189 or higher is recommended to preserve most of the data.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.ImageCompressionOptions.CreatePng">
            <summary>
            Creates options for PNG images.
            </summary>
            <returns>The newly created options for PNG images.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.ImageCompressionOptions.CreateJpeg">
            <summary>
            Creates options for JPEG images.
            </summary>
            <returns>The newly created options for JPEG images.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.ImageCompressionOptions.CreateTiff">
            <summary>
            Creates options for TIFF images.
            </summary>
            <returns>The newly created options for TIFF images.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.ImageCompressionOptions.CreateTiledTiff(System.Int32,System.Int32)">
            <summary>
            Creates options for tiled TIFF images.
            </summary>
            <param name="tileWidth">Width of the tiles in the TIFF.</param>
            <param name="tileHeight">Height of the tiles in the TIFF.</param>
            <returns>The newly created options for tiled TIFF images.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.ImageCompressionOptions.CreateBitonalTiff">
            <summary>
            Creates options for bitonal (black and white) TIFF images.
            </summary>
            <returns>The newly created options for TIFF images.</returns>
            <overloads>Creates options for bitonal (black and white) TIFF images.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.ImageCompressionOptions.CreateBitonalTiff(System.Int32)">
            <summary>
            Creates options for TIFF images with specified number of bits per pixel and specified
            threshold level to use when producing bitonal images.
            </summary>
            <param name="threshold">The threshold level to use.</param>
            <returns>The newly created options for TIFF images.</returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.IPdfStreamProvider">
            <summary>
            Exposes method used to acquire streams.
            </summary>
            <remarks>
                <para>Streams are used by the library while creating, reading, or otherwise manipulating
            PDF documents. For example, streams are used to store decoded contents of document pages
            and as the intermediate storage for images.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.IPdfStreamProvider.GetStream(System.Int64)">
            <summary>
            Gets a stream with initial capacity not less than specified.
            </summary>
            <param name="capacity">Minimum initial capacity of the stream.</param>
            <returns>Returns a stream with initial capacity not less than specified
            by the <paramref name="capacity" />.</returns>
            <remarks>
                <para>The stream must be readable, seekable and writable.</para>
                <para>Caller of the method is responsible for disposing of the returned stream.</para>
                <para>The library tries to specify size of the stream beforehand but it's possible for
            the library to request zero length streams and then increase streams length by writing
            to the stream.</para>
                <para>Streams can be of almost any length from a few bytes to several megabytes.</para>
                <para>Streams can be used for a short period of time or for the lifetime of the PDF
            document.</para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfConfigurationOptions">
            <summary>
            The settings affecting the way <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> works under the hood.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfConfigurationOptions.StreamProvider">
            <summary>
            Gets the stream provider.
            </summary>
            <value>The stream provider.</value>
            <remarks>
                <para>The library uses streams while creating, reading, or otherwise manipulating PDF
            documents. For example, streams are used to store decoded contents of document pages
            and as the intermediate storage for images.</para>
                <para>Number of streams used depends on the PDF document being processed and the way
            it's being processed.</para>
                <para>Streams can be of almost any length from a few bytes to several megabytes.</para>
                <para>The library tries to specify size of the stream beforehand but it's possible for
            the library to request zero length streams and then increase streams length by writing
            to the stream.</para>
                <para>Streams can be used for a short period of time or for the lifetime of the PDF
            document.</para>
                <para>The library disposes all streams acquired through the stream provider.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfConfigurationOptions.FontLoader">
            <summary>
            Gets or sets the font loader.
            </summary>
            <value>The font loader to use.</value>
            <remarks>
                <para>
            The font loader can not be <c>null</c>. By default the library uses instances of
            <see cref="T:BitMiracle.Docotic.Pdf.GdiFontLoader" /> for font loaders.
            </para>
                <para>
            The library uses font loader to get font bytes when:
            <ul><li>the font is not embedded in PDF document, or</li><li>the font is added to PDF document by using family name and style only</li></ul></para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfConfigurationOptions.Error">
            <summary>
            Gets or sets the delegate to invoke when error event occurs.
            </summary>
            <value>
            The delegate to invoke when error event occurs.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfConfigurationOptions.XObjectCache">
            <summary>
            Gets cache for form XObjects.
            </summary>
            <value>The cache for form XObjects.</value>
            <remarks>
                <para>
            This cache is disabled by default.
            </para>
                <para>
            Enabling this cache can improve speed of processing for documents with a lot of
            form XObjects reused on different pages. Note that enabling the cache can either
            increase or decrease memory consumption based on the contents of the PDF.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfConfigurationOptions.Create">
            <summary>
            Creates configuration options initialized with default stream provider.
            </summary>
            <returns>
            The newly created configuration options initialized with default stream provider.
            </returns>
            <remarks>
                <para>
            By default the library uses instances of <see cref="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider" />
            for document stream providers.
            </para>
                <para>In cases when speed is most important and you are not concerned about memory
            footprint you might want to use instances of <see cref="T:BitMiracle.Docotic.Pdf.PdfMemoryStreamProvider" />
            instead.
            </para>
                <para>
            You are free to create and use any other stream provider.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfConfigurationOptions.CreateWithStreamProvider(BitMiracle.Docotic.Pdf.IPdfStreamProvider)">
            <summary>
            Creates configuration options initialized with specified stream provider.
            </summary>
            <param name="provider">The stream provider to use in this options.</param>
            <returns>
            The newly created configuration options initialized with specified stream provider.
            </returns>
            <remarks>
                <para>
            By default the library uses instances of <see cref="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider" />
            for document stream providers.
            </para>
                <para>In cases when speed is most important and you are not concerned about memory
            footprint you might want to use instances of <see cref="T:BitMiracle.Docotic.Pdf.PdfMemoryStreamProvider" />
            instead.
            </para>
                <para>
            You are free to create and use any other stream provider.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDrawOptions">
            <summary>
            The options for PDF page drawings.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.Compression">
            <summary>
            Gets or sets the image compression options.
            </summary>
            <value>The image compression options to use while saving an image of a page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.BackgroundColor">
            <summary>
            Gets or sets the background color of produced images.
            </summary>
            <value>The background color of produced images.</value>
            <remarks>The <c>null</c> value means transparent background.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.SimulateOverprint">
            <summary>
            Gets or sets the value indicating whether to simulate the effects of overprinting spot and
            process colors in the same way they would occur when printing.
            </summary>
            <value>The value indicating whether to simulate the effects of overprinting spot.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.ScalingMode">
            <summary>
            Gets the value indicating how PDF pages are resized before being drawn and
            saved as images.
            </summary>
            <value>The value indicating how PDF pages are resized before being drawn
            and saved as images.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.ZoomPercent">
            <summary>
            Gets the zoom percent (magnification level) to resize a page to.
            </summary>
            <value>The zoom percent (magnification level) to resize a page to.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.Width">
            <summary>
            Gets the width in pixels to fit a page to.
            </summary>
            <value>The width in pixels to fit a page to.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.Height">
            <summary>
            Gets the height in pixels to fit a page to.
            </summary>
            <value>The height in pixels to fit a page to.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.HorizontalResolution">
            <summary>
            Gets or sets the horizontal resolution of the output image.
            </summary>
            <value>
            The horizontal resolution in pixels per inch.
            </value>
            <remarks>
                <para>Default value: 72</para>
                <para>The horizontal resolution should be in the [1..2000] range.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.VerticalResolution">
            <summary>
            Gets or sets the vertical resolution of the output image.
            </summary>
            <value>
            The vertical resolution in pixels per inch.
            </value>
            <remarks>
                <para>Default value: 72</para>
                <para>The vertical resolution should be in the [1..2000] range.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDrawOptions.CutUnusedSpace">
            <summary>
            Gets a value indicating whether to cut unused space in produced images.
            </summary>
            <value>
                <c>true</c> if unused space should be cut; otherwise, <c>false</c>.
            </value>
            <remarks>
            See remarks for <see cref="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.CreateFitSize(BitMiracle.Docotic.Pdf.PdfSize,System.Boolean)" /> method for more details.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.Create">
            <summary>
            Creates default draw options.
            </summary>
            <returns>The newly created default draw options.</returns>
            <remarks>
                <para>
            Default draw options are:
            <list type="bullet"><item><description>Background is transparent.</description></item><item><description>Image format is <see cref="F:BitMiracle.Docotic.Pdf.PdfDrawFormat.Png" />.</description></item><item><description>Size of the output image is equal to the page size.</description></item><item><description>Vertical resolution is 72 pixels per inch.</description></item><item><description>Horizontal resolution is 72 pixels per inch.</description></item></list></para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.CreateZoom(System.Double)">
            <summary>
            Creates draw options for producing images of PDF pages zoomed in or out to
            the specified percent.
            </summary>
            <param name="zoomPercent">The zoom percent (magnification level).</param>
            <returns>The options for producing images of PDF pages zoomed in or out to
            the specified percent.</returns>
            <remarks>
                <para>The zoom percent should be in the [1..6500] range.</para>
                <para>Any image produced with these options will have the size of a page
            zoomed to the percent specified by <paramref name="zoomPercent" />.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.CreateFitWidth(System.Double)">
            <summary>
            Creates draw options for producing images of PDF pages resized to fit the
            specified width.
            </summary>
            <param name="widthPixels">The width of images in pixels.</param>
            <returns>The options for producing images of PDF pages resized to fit the
            specified width.</returns>
            <remarks>
                <para>The width should be in the [1..10000] range.</para>
                <para>Any image produced with these options will have the specified width.
            The height of the image will be calculated dynamically using aspect ratio
            of the PDF page being drawn.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.CreateFitHeight(System.Double)">
            <summary>
            Creates draw options for producing images of PDF pages resized to fit the
            specified height.
            </summary>
            <param name="heightPixels">The height of images in pixels.</param>
            <returns>The options for producing images of PDF pages resized to fit the
            specified height.</returns>
            <remarks>
                <para>The height should be in the [1..10000] range.</para>
                <para>Any image produced with these options will have the specified height.
            The width of the image will be calculated dynamically using aspect ratio
            of the PDF page being drawn.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.CreateFitSize(BitMiracle.Docotic.Pdf.PdfSize,System.Boolean)">
            <summary>
            Creates draw options for producing images of PDF pages resized to fit the
            specified size.
            </summary>
            <param name="sizePixels">The size of images in pixels.</param>
            <param name="cutUnusedSpace">Defines whether to cut unused space.</param>
            <returns>The options for producing images of PDF pages resized to fit the
            specified size.</returns>
            <remarks>
                <para>The width and height should be in the [1..10000] range.</para>
                <para>If <paramref name="cutUnusedSpace" /> is <c>true</c> then images will
            have the same size as PDF pages resized to fit specified size.</para>
                <para>If <paramref name="cutUnusedSpace" /> is <c>false</c> then images will
            have the size specified by <paramref name="sizePixels" />, PDF pages will be drawn
            at the center of the image preserving aspect ratio and unused space will be
            filled with transparent color.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDrawOptions.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfMemoryStreamProvider">
            <summary>
            An implementation of the <see cref="T:BitMiracle.Docotic.Pdf.IPdfStreamProvider" /> interface that provides
            memory streams (i.e. instances of <see cref="T:System.IO.MemoryStream" />).
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMemoryStreamProvider.Dispose">
            <summary>
            Implements <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMemoryStreamProvider.GetStream(System.Int64)">
            <summary>
            Gets a memory stream with initial capacity not less than specified.
            </summary>
            <param name="capacity">Minimum initial capacity of the stream.</param>
            <returns>Returns a memory stream with initial capacity not less than specified
            by the <paramref name="capacity" />.</returns>
            <remarks>
                <para>Caller of the method is responsible for disposing of the returned stream.</para>
                <para>Returned stream is of <see cref="T:System.IO.MemoryStream" /> type.</para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider">
            <summary>
            An implementation of the <see cref="T:BitMiracle.Docotic.Pdf.IPdfStreamProvider" /> interface that provides
            streams with mixed storage. Initially contents of any provided stream is stored in memory
            but can be flushed to disk if needed. 
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider.MemoryLimit">
            <summary>
            Gets the memory limit value of this stream provider.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider.CreateWithDefaultMemoryLimit">
            <summary>
            Creates new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider" /> with default
            memory limit. 
            </summary>
            <returns>
            Newly created instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider" /> with default
            memory limit. 
            </returns>
            <remarks>
            The default memory limit is 84 000 bytes. This value is a bit smaller than the Large
            Object Heap threshold value (85 000 bytes).
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider.CreateWithMemoryLimit(System.Int32)">
            <summary>
            Creates new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider" /> with the 
            specified memory limit. 
            </summary>
            <param name="memoryLimit">The memory limit value for the stream provider.</param>
            <returns>
            Newly created instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider" /> with the
            specified memory limit. 
            </returns>
            <remarks>
            The memory limit value is the maximum number of bytes to be kept in memory by each
            provided stream (streams with more bytes use disk for their storage). 
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider.Dispose">
            <summary>
            Implements <see cref="M:System.IDisposable.Dispose" /> method.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider.GetStream(System.Int64)">
            <summary>
            Gets a stream with initial capacity not less than specified.
            </summary>
            <param name="capacity">Minimum initial capacity of the stream.</param>
            <returns>Returns a stream with initial capacity not less than specified
            by the <paramref name="capacity" />.</returns>
            <remarks>
                <para>Caller of the method is responsible for disposing of the returned stream.</para>
                <para>
            The returned stream keep its contents in memory for as long as its length is less than
            the <see cref="P:BitMiracle.Docotic.Pdf.PdfMixedStorageStreamProvider.MemoryLimit">memory limit of this provider</see>. If the stream length
            is about to surpass the memory limit the stream will switch to using disk storage
            instead.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfObjectExtractionOptions">
            <summary>
            The PDF page object extraction options.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfObjectExtractionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfObjectExtractionOptions" /> class.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfObjectExtractionOptions.ExtractTextAsPath">
            <summary>
            Gets or sets a value indicating whether to extract text as vector path.
            </summary>
            <remarks>Default value: <c>false</c>.</remarks>
            <value>
                <c>true</c> to extract <see cref="T:BitMiracle.Docotic.Pdf.PdfPath" /> objects instead of <see cref="T:BitMiracle.Docotic.Pdf.PdfTextData" />;
            <c>false</c> otherwise.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSaveOptions">
            <summary>
            The current save setting (compression, optimizations and the like).
            These settings affect properties of PDF files produced by the library.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.Compression">
            <summary>
            Gets or sets the compression type to use when saving the document.
            </summary>
            <value>The compression type to use when saving the document.</value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfCompression.Flate" />.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.Version">
            <summary>
            Gets or sets the PDF version to use while saving the document.
            </summary>
            <value>The PDF version to use while saving the document.</value>
            <exception cref="T:System.ArgumentException">
            The <c>value</c> is less than the current PDF version of the document.
            </exception>
            <remarks>
                <para>
            Default value: the value of 
            PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Version" /> property.
            </para>
                <para>
            The <see cref="T:System.ArgumentException" /> is thrown if this property is set to PDF
            version less than the current PDF version of the document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.ProducePdfA">
            <summary>
            Gets or sets a value indicating whether to save the document
            as a PDF/A-1b compliant one.
            </summary>
            <value>
                <c>true</c> if to produce a PDF/A-1b compliant document;
            otherwise, <c>false</c>.</value>
            <remarks>
                <para>
            Default value: <c>false</c>.
            </para>
                <para>
            If this property is set to <c>true</c> then all fonts are embedded.
            </para>
                <para>
            If this property is set to <c>true</c> and the value of
            <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.MetadataSyncMode" /> property is
            <see cref="F:BitMiracle.Docotic.Pdf.PdfMetadataSyncMode.DoNotSync" /> then library will revert value
            of <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.MetadataSyncMode" /> property to default value.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.RemoveUnusedObjects">
            <summary>
            Gets or sets a value indicating whether to remove all unused (unreferenced)
            objects from PDF before saving. 
            </summary>
            <value>
                <c>true</c> if library should remove unused objects; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Setting this property to <c>true</c> helps to produce
            smaller output files.
            </para>
                <para>Default value: <c>true</c>.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.OptimizeIndirectObjects">
            <summary>
            Gets or sets a value indicating whether to optimize (inline) indirect objects from PDF 
            before saving. 
            </summary>
            <value>
                <c>true</c> if library should optimize indirect objects; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Setting this property to <c>true</c> helps to produce
            smaller output files.
            </para>
                <para>
            Optimization means that all indirect PDF objects that are not dictionaries and arrays 
            will be converted to direct objects.
            </para>
                <para>Default value: <c>true</c>.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.WriteWithoutFormatting">
            <summary>
            Gets or sets a value indicating whether to write PDF data without
            formatting (without whitespaces needed only for humans).
            </summary>
            <value>
                <c>true</c> if library should write PDF data without formatting;
            otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Setting this property to <c>true</c> will cause library to use
            very minimum of whitespace characters when saving PDF files. It helps to
            produce smaller output files but may be not very convenient if you want
            to debug library output.
            Setting this property to <c>false</c> will cause library to write
            content of PDF file in human-readable form.</para>
                <para>Default value: <c>true</c>.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.UseObjectStreams">
            <summary>
            (PDF 1.5) Gets or sets a value indicating whether to pack objects into
            compressed object streams before producing PDF files.
            </summary>
            <value>
                <c>true</c> if library should use object streams; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Setting this property to <c>true</c> will cause library to pack
            objects into compressed object streams. This helps to produce smaller output
            files but will require Acrobat 6 / Adobe Reader 6 or later to view
            produced PDF files.</para>
                <para>
            If current document was created from an existing document that uses 
            object stream then this property will be automatically set to <c>true</c>.
            </para>
                <para>If current document uses any PDF feature from PDF standard version
            1.5 or later then this property will be automatically set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.WriteEncrypted">
            <summary>
            Gets a value indicating whether produced PDF file will be encrypted.
            </summary>
            <value>
                <c>true</c> if library will write PDF files encrypted; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>
            This property is read-only and useful as indicator only. To make library write
            encrypted files please set <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" /> or 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" />.
            </para>
                <para>
            Value of this property is <c>true</c> if an user or an owner password
            was set for the document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.Linearize">
            <summary>
            Gets or sets a value indicating whether output PDF files should be linearized
            for faster web viewing.
            </summary>
            <value>
                <c>true</c> if library should linearize output PDF files; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>
            Linearization (sometimes called Fast Web View by Adobe) restructures a PDF
            document for page-at-a-time downloading (byte-serving) from web servers.
            </para>
                <para>
            A linearized (or a Fast Web View optimized) PDF file is a file that has been
            organized in a special way to enable efficient incremental access in a
            network environment. The file is valid PDF in all respects, and is
            compatible with all existing viewers and other PDF applications. Enhanced
            viewer applications can recognize that a PDF file has been linearized and
            can take advantage of that organization (as well as added hint information)
            to enhance viewing performance. This is especially important with large
            documents that can take a long time to download from a server.
            </para>
                <para>Please note that linearized document will display faster if you
            set <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.PageLayout" /> property to
            <see cref="F:BitMiracle.Docotic.Pdf.PdfPageLayout.SinglePage" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.PageMode" />
            property to <see cref="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseNone" /> because it will minimize the
            amount of objects a PDF viewer should process before showing first page
            of the document.</para>
                <para>Please note that fillable PDF forms won't usually benefit
            from being linearized.</para>
                <para>Default value: <c>false</c>.</para>
                <para>
            If current document was created from an existing linearized document then
            this property will be automatically set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.MetadataSyncMode">
            <summary>
            Gets or sets the value indicating how values in
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata">XMP Metadata</see> and
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info">Document Info</see> should be synchronized.
            </summary>
            <value>
            The value indicating how values in <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata">XMP
            Metadata</see> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info">Document Info</see> should
            be synchronized.
            </value>
            <remarks>
                <para>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfMetadataSyncMode.PreferMetadata" />.
            </para>
                <para>
            By default, library will synchronize <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata">XMP
            Metadata</see> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info">Document Info</see> using
            XMP metadata values from <see cref="T:BitMiracle.Docotic.Pdf.XmpPdfSchema" /> as source of the
            information. If any of the <see cref="T:BitMiracle.Docotic.Pdf.XmpPdfSchema" /> fields is <c>null</c>
            then library will use corresponding field of <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info" />
            as source of the information.
            </para>
                <para>
            For Author name, for example, library will try
            <see cref="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Author" /> property first, then
            <see cref="P:BitMiracle.Docotic.Pdf.PdfInfo.Author" /> (if <see cref="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Author" /> is
            <c>null</c>). After that all fields with similar purpose that are not
            <c>null</c> (like PdfDocument.Metadata.DublinCore.Creator or
            PdfDocument.Metadata.Core.Author) will be updated.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions">
            <summary>
            The options for a PDF signature appearance.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.IncludeDate">
            <summary>
            Gets or sets a value indicating whether to include the date and time of signing in the
            text of the signature.
            </summary>
            <value>
                <c>true</c> if to include the date and time of signing in the text of the signature;
            otherwise, <c>false</c>.
            </value>
            <remarks>
            Default value: <c>true</c></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.IncludeDistinguishedName">
            <summary>
            Gets or sets a value indicating whether to include the certificate Distinguished Name
            in the text of the signature.
            </summary>
            <value>
                <c>true</c> if to include the certificate Distinguished Name in the text of the
            signature; otherwise, <c>false</c>.
            </value>
            <remarks>
            Default value: <c>false</c></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.NameLabel">
            <summary>
            Gets or sets the label to use before the name inside the text of the signature.
            </summary>
            <value>
            The label to use before the name inside the text of the signature.
            </value>
            <remarks>
                <para>
            The name will be displayed without a label if the value of this property is
            <c>null</c> or empty.
            </para>
                <para>
            Default value: "Digitally signed by"
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.DistinguishedNameLabel">
            <summary>
            Gets or sets the label to use before the distinguished name inside the text of the
            signature.
            </summary>
            <value>
            The label to use before the distinguished name inside the text of the signature.
            </value>
            <remarks>
                <para>
            The distinguished name will be displayed without a label if the value of this property
            is <c>null</c> or empty.
            </para>
                <para>
            Default value: "DN:"
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.ReasonLabel">
            <summary>
            Gets or sets the label to use before the reason inside the text of the signature.
            </summary>
            <value>
            The label to use before the reason inside the text of the signature.
            </value>
            <remarks>
                <para>
            The reason will be displayed without a label if the value of this property is
            <c>null</c> or empty.
            </para>
                <para>
            Default value: "Reason:"
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.LocationLabel">
            <summary>
            Gets or sets the label to use before the location inside the text of the signature.
            </summary>
            <value>
            The label to use before the location inside the text of the signature.
            </value>
            <remarks>
                <para>
            The location will be displayed without a label if the value of this property is
            <c>null</c> or empty.
            </para>
                <para>
            Default value: "Location:"
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.DateLabel">
            <summary>
            Gets or sets the label to use before the date inside the text of the signature.
            </summary>
            <value>
            The label to use before the date inside the text of the signature.
            </value>
            <remarks>
                <para>
            The date will be displayed without a label if the value of this property is
            <c>null</c> or empty.
            </para>
                <para>
            Default value: "Date:"
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureAppearanceOptions.ClearAllLabels">
            <summary>
            Clears all labels.
            </summary>
            <remarks>
            All values will be displayed without labels after call to this method.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSigningOptions">
            <summary>
            The options for PDF document signing.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSigningOptions.#ctor(System.String,System.String)">
            <summary>
            Creates a new signing options instance using specified key store file.
            </summary>
            <param name="path">Path to PFX / PKCS #12 file used for signing.</param>
            <param name="password">The password to read the key store file.</param>
            <remarks>
            PFX files are expected to have .pfx extension. PKCS #12 files are expected to have
            .p12 extension
            </remarks>
            <overloads>Creates a new signing options instance.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSigningOptions.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a new signing options instance using specified stream with key store contents.
            </summary>
            <param name="stream">Stream with PFX / PKCS #12 contents used for signing.</param>
            <param name="password">The password to read the key store stream.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Reason">
            <summary>
            Gets or sets the reason for the signing.
            </summary>
            <value>
            The reason for the signing.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the reason is not specified.
            </para>
                <para>
            If the value is <c>null</c> or empty, it won't be added to the signature and the
            signature visual representation inside the document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Location">
            <summary>
            Gets or sets the CPU host name or physical location of the signing.
            </summary>
            <value>
            The CPU host name or physical location of the signing.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the location is not specified.
            </para>
                <para>
            If the value is <c>null</c> or empty, it won't be added to the signature and the
            signature visual representation inside the document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.ContactInfo">
            <summary>
            Gets or sets the information that enables a recipient to contact the signer to verify
            the signature.
            </summary>
            <value>
            The information that enables a recipient to contact the signer to verify the signature.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the contact information is not specified.
            </para>
                <para>
            If the value is <c>null</c> or empty, it won't be added to the signature and the
            signature visual representation inside the document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.DigestAlgorithm">
            <summary>
            Gets or sets the digest algorithm to use when signing a document.
            </summary>
            <value>
            The digest algorithm to use when signing a document.
            </value>
            <remarks>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfDigestAlgorithm.Sha1" /></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Type">
            <summary>
            Gets or sets the type of the signature to create.
            </summary>
            <value>
            The type of the signature to create.
            </value>
            <remarks>
                <para>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfSignatureType.Approval" /></para>
                <para>
            Some signature types define what kind of changes are allowed for the signed document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Format">
            <summary>
            Gets or sets the signature format to use when signing a document.
            </summary>
            <value>
            The signature format to use when signing a document.
            </value>
            <remarks>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfSignatureFormat.Pkcs7Detached" /></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Field">
            <summary>
            Gets or sets the signature field to sign.
            </summary>
            <value>The signature field to sign.</value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the field is not specified.
            </para>
                <para>If the value of this property is <c>null</c>, then the library will create
            an invisible signature field on the first page of the document right before signing.
            Then the newly created invisible field will be signed.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Appearance">
            <summary>
            Gets the signature appearance options.
            </summary>
            <remarks>
                <para>
            These options are only used if <see cref="P:BitMiracle.Docotic.Pdf.PdfSigningOptions.Field" /> property is not <c>null</c>.
            </para>
                <para>
            Use these options if you want to change the text displayed inside the signature field. 
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions">
            <summary>
            The text extraction options.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions" /> class.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.WithFormatting">
            <summary>
            Gets or sets a value indicating whether to extract text formatted as seen in a PDF viewer.
            </summary>
            <remarks>Default value: <c>false</c>.</remarks>
            <value>
                <c>true</c> if extract text formatted as seen in a PDF viewer; <c>false</c> otherwise.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.SkipInvisibleText">
            <summary>
            Gets or sets a value indicating whether to extract hidden text.
            </summary>
            <value>
                <c>true</c> to do not extract hidden text; <c>false</c> otherwise. Default value: <c>false</c>.</value>
            <remarks>
                <para>This property allows to skip text when:</para>
                <ul>
                    <li>
                    Text is rendered in the mode that produces no visible output (like
                    PdfTextRenderingMode.<see cref="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.NeitherFillNorStroke" />).
                </li>
                    <li>
                    Text is drawn outside of active clip region.
                </li>
                </ul>
                <para>
            Note that there are other ways to hide text in PDF document. For example, text can be overlapped by other
            page objects (e.g. by image, form control or filled rectangle). Or text can be drawn with the same color as
            background (e.g. white text on white background).
            </para>
                <para>
                    <see cref="P:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.SkipInvisibleText" /> property does not allow to skip text in such cases. Extract and handle page
            objects manually to skip text hidden with such techniques. Look at
            "Pages and Navigation -&gt; Extract text, paths and images" sample for more detail.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.Rectangle">
            <summary>
            Gets or sets the rectangle of interest.
            </summary>
            <value>
            The rectangle to extract the text from or <c>null</c> if all the text should be extracted.
            </value>
            <remarks>
                <para>
            Default value: <c>null</c>.
            </para>
                <para>
            If the value is <c>null</c> then all the text inside the page
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.CropBox" /> will be extracted.
            </para>
                <para>
            If the value is not <c>null</c> AND the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.SkipInvisibleText" /> is <c>true</c>
            then only the text inside the specified rectangle will be extracted. Any part of a word
            which is outside of the rectangle will be truncated. Characters that are partially
            inside the rectangle (partially visible) will be extracted.
            </para>
                <para>
            If the value is not <c>null</c> AND the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextExtractionOptions.SkipInvisibleText" /> is <c>false</c>
            then only the text that intersects the specified rectangle will be extracted. Any part
            of a word which is outside of the rectangle will be extracted too.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfBezierSegment">
            <summary>
            Cubic Bezier curve segment.
            </summary>
            <remarks>
                <para>
            Such curves are defined by four points: the two endpoints (the start point P0 and the final point P3 ) and
            two control points P1 and P2. Given the coordinates of the four points, the curve is generated by varying the
            parameter t from 0.0 to 1.0 in the following equation:
            </para>
                <para>
            R(t) = P0 * (1 – t) ^ 3 + P1 * 3 * t * (1 – t) ^ 2 + P2 * 3 * (1 – t) * t ^ 2 + P3 * t ^ 3
            </para>
                <para>
            When t = 0.0, the value of the function R(t) coincides with the current point P0;
            when t = 1.0, R (t)coincides with the final point P3. Intermediate values of t generate intermediate points
            along the curve. The curve does not, in general, pass through the two control points P1 and P2.
            </para>
                <para>
            Cubic Bézier curves have two useful properties:
            </para>
                <ul>
                    <li>
            The curve can be very quickly split into smaller pieces for rapid rendering.
            </li>
                    <li>
            The curve is contained within the convex hull of the four points defining the curve, most easily visualized
            as the polygon obtained by stretching a rubber band around the outside of the four points. This property allows
            rapid testing of whether the curve lies completely outside the visible region, and hence does not have to be rendered.
            </li>
                </ul>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBezierSegment.Start">
            <summary>
            Start point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBezierSegment" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBezierSegment.FirstControl">
            <summary>
            First control point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBezierSegment" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBezierSegment.SecondControl">
            <summary>
            Second control point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBezierSegment" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBezierSegment.End">
            <summary>
            End point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBezierSegment" />.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfClipRegion">
            <summary>
            Class for a clip region that limits the parts of the page affected by painting operators.
            </summary>
            <remarks>
                <para>
            The closed subpaths of this region define the area that can be painted. Marks falling inside this area are
            applied to the page; those falling outside it are not.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfClipRegion.IntersectedPaths">
            <summary>
            Gets paths of this <see cref="T:BitMiracle.Docotic.Pdf.PdfClipRegion" />.
            </summary>
            <remarks>
                <para>
            Clip region consist of a sequence of intersected paths. Use the following algorithm to calculate the final
            clipping area:
            </para>
                <ol>
                    <li>Set the current clipping area to an infinite rectangle { -Infinity, -Infinity, Infinity, Infinity }.</li>
                    <li>Enumerate paths in the <see cref="P:BitMiracle.Docotic.Pdf.PdfClipRegion.IntersectedPaths" /> collection starting from first element. Order is important.</li>
                    <li>
            Intersect the current clipping area with each <see cref="T:BitMiracle.Docotic.Pdf.PdfPath" /> using the rule defined by
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPath.ClipMode" /> property. Set the current clipping area to the result of the intersection.
            </li>
                    <li>
            When all <see cref="P:BitMiracle.Docotic.Pdf.PdfClipRegion.IntersectedPaths" /> are processed, the current clipping area defines which parts lie
            inside the clip region.
            </li>
                </ol>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCloseSubpathSegment">
            <summary>
            Closes the subpath by appending a straight line segment from the trailing endpoint of the previous segment to
            the starting point of the subpath. It does nothing if the subpath is already closed.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCloseSubpathSegment.Start">
            <summary>
            Start point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfCloseSubpathSegment" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCloseSubpathSegment.End">
            <summary>
            End point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfCloseSubpathSegment" />, equals to start point of the subpath.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLineSegment">
            <summary>
            Straight line segment.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineSegment.Start">
            <summary>
            Start point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfLineSegment" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineSegment.End">
            <summary>
            End point of this <see cref="T:BitMiracle.Docotic.Pdf.PdfLineSegment" />.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPath">
            <summary>
            Class for a vector path retrieved from a PDF document page.
            </summary>
            <remarks>
                <para>
            Paths define shapes, trajectories, and regions of all sorts. They are used to draw lines, define the shapes of
            filled areas, and specify boundaries for clipping other graphics. The graphics state includes a current clipping
            path that defines the clipping boundary for the current page. At the beginning of each page, the clipping
            path is initialized to include the entire page.
            </para>
                <para>
            A path is made up of one or more disconnected subpaths, each comprising a sequence of connected segments.
            The topology of the path is unrestricted: it may be concave or convex, may contain multiple subpaths
            representing disjoint areas, and may intersect itself in arbitrary ways.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPath" />.
            </summary>
            <value>
            Returns <see cref="F:BitMiracle.Docotic.Pdf.PdfPageObjectType.Path" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.Subpaths">
            <summary>
            Gets subpaths of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPath" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.PaintMode">
            <summary>
            The drawing mode of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPath" />.
            </summary>
            <value>
            Can be <c>null</c> if path produces no painting operations.
            For example, path is used for clipping only (<see cref="P:BitMiracle.Docotic.Pdf.PdfPath.ClipMode" /> != <c>null</c>)
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.FillMode">
            <summary>
            The rule that determines the region to fill.
            </summary>
            <value>
            Can be <c>null</c> if path is not filled. For example, when path is used for stroking only
            (<see cref="P:BitMiracle.Docotic.Pdf.PdfPath.PaintMode" /> == <see cref="F:BitMiracle.Docotic.Pdf.PdfDrawMode.Stroke" />) or for clipping only (<see cref="P:BitMiracle.Docotic.Pdf.PdfPath.ClipMode" /> != <c>null</c>).
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.ClipMode">
            <summary>
            The rule that determines the region to clip.
            </summary>
            <value>
            Can be <c>null</c> if path is not clipped.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.Brush">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfBrushInfo" /> object of this path. It encapsulates the properties
            related to non-stroking operations.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfBrushInfo" /> object of this path.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.Pen">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPenInfo" /> object of this path. It encapsulates the properties
            related to stroking operations.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPenInfo" /> object of this path.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.IsTransformed">
            <summary>
            Gets a value indicating whether this path is drawn transformed.
            </summary>
            <value>
                <c>true</c> if the path is drawn transformed; otherwise <c>false</c>.
            </value>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfPath.TransformationMatrix" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPath.TransformationMatrix">
            <summary>
            Gets the transformation matrix for this path.
            </summary>
            <value>
            The transformation matrix or identity matrix if path is drawn without transformations.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPathSegment">
            <summary>
            Segment of a vector path. A part of <see cref="T:BitMiracle.Docotic.Pdf.PdfSubpath" />.
            </summary>
            <remarks>
            A path is composed of straight and curved line segments, which may connect to one another or may be disconnected.
            A pair of segments are said to connect only if they are defined consecutively, with the second segment starting
            where the first one ends. Thus, the order in which the segments of a path are defined is significant. Nonconsecutive
            segments that meet or intersect fortuitously are not considered to connect.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPathSegment.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPathSegment" />.
            </summary>
            <value>The type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPathSegment" />.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPointSegment">
            <summary>
            Start point of a subpath.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPointSegment.Value">
            <summary>
            Start point of a subpath.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRectangleSegment">
            <summary>
            Rectangular segment.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangleSegment.Bounds">
            <summary>
            Bounds of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangleSegment" />.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSubpath">
            <summary>
            Subpath of a vector path. A part of <see cref="T:BitMiracle.Docotic.Pdf.PdfPath" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSubpath.Segments">
            <summary>
            Gets a sequence of connected segments of this <see cref="T:BitMiracle.Docotic.Pdf.PdfSubpath" />.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfActionCollection">
            <summary>
            Collection of actions.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfBrush">
            <summary>
            Class that encapsulates properties of a <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> related
            to non-stroking operations.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBrush.Pattern">
            <summary>
            Gets or sets the pattern to be used for filling and all
            other non-stroking painting operations.
            </summary>
            <value>The pattern to be used for filling and all
            other non-stroking painting operations.</value>
            <remarks>Default value: <c>null</c>.<br /><br />
            Setting this property to an instance of a colored
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> causes the <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Color" />
            property to be set to <c>null</c>. Setting this property to an
            instance of an uncolored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> causes
            the <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Color" /> property to be set to the default
            color of the uncolored tiling pattern's underlying color space if
            color space of current brush color do not match the underlying color
            space of the uncolored pattern being set. If color space of current
            brush color and the underlying color space of the uncolored tiling
            pattern being set do match then current brush color won't be changed.
            Setting this property to <c>null</c> causes the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Color" /> property to be set to default RGB color
            if current pattern was an instance of a colored
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />. 
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBrush.Color">
            <summary>
            Gets or sets the color to be used for filling and all
            other non-stroking painting operations.
            </summary>
            <value>The color to be used for filling and all
            other non-stroking painting operations.</value>
            <remarks>Default value: black.<br /><br />
            Setting this property may affect the <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Pattern" />
            property. If <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Pattern" /> is an instance of a
            colored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> then it will be set to
            <c>null</c>. If <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Pattern" /> is an instance of an
            uncolored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> and the color space of a
            color being set do not match the underlying color space of that
            uncolored pattern then <see cref="P:BitMiracle.Docotic.Pdf.PdfBrush.Pattern" /> will be set to
            <c>null</c>. If color space of a color being set and the underlying
            color space of the current uncolored tiling pattern do match then
            current pattern won't be changed.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBrush.Opacity">
            <summary>
            (PDF 1.4) Gets or sets the current opacity value in percent to be
            used for filling and all other non-stroking operations.
            </summary>
            <remarks>Opacity value ranges from 0 (fully transparent) to 100
            (fully opaque).<br />
            Default value: 100% (fully opaque).</remarks>
            <value>The opacity value in percent to be used for filling and all
            other non-stroking operations.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBrush.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfBrushInfo">
            <summary>
            Class that encapsulates properties related to non-stroking operations.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBrushInfo.Color">
            <summary>
            Gets the color to be used for filling and all
            other non-stroking painting operations.
            </summary>
            <value>The color to be used for filling and all
            other non-stroking painting operations.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBrushInfo.Opacity">
            <summary>
            Gets the current opacity value in percent to be used for filling 
            and all other non-stroking operations.
            </summary>
            <remarks>Opacity value ranges from 0 (fully transparent) to 100 (fully opaque).</remarks>
            <value>The opacity value in percent to be used for filling and all other non-stroking operations.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBrushInfo.Pattern">
            <summary>
            Gets the pattern to be used for filling and all other non-stroking painting operations.
            </summary>
            <value>The pattern to be used for filling and all other non-stroking painting operations.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBrushInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCache">
            <summary>
            Cache of PDF objects.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCache.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfCache" /> is enabled.
            </summary>
            <value>
                <c>true</c> if this cache is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCache.Clear">
            <summary>
            Clears this <see cref="T:BitMiracle.Docotic.Pdf.PdfCache" />.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCanvas">
            <summary>
            Class for a canvas (a two-dimensional region on which all painting
            occurs).
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.Resolution">
            <summary>
            Gets or sets the resolution of the canvas.
            </summary>
            <value>The resolution of the canvas.</value>
            <remarks>The resolution of the canvas measures the number of pixels
            per inch of distance along the two linear dimensions. Resolution is
            the same horizontally and vertically.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.Pen">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPen" /> object that encapsulates the properties
            related to stroking operations.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPen" /> object that encapsulates the properties
            related to stroking operations.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.Brush">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfBrush" /> object that encapsulates the properties
            related to non-stroking operations.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfBrush" /> object that encapsulates the properties
            related to non-stroking operations.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.FlatnessTolerance">
            <summary>
            Gets or sets the flatness tolerance.
            </summary>
            <value>The flatness tolerance.</value>
            <remarks>The flatness tolerance controls the maximum permitted
            distance in pixels between the mathematically correct path and an
            approximation constructed from straight line segments.<br />
            Default value: 1.0.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font">
            <summary>
            Gets or sets the current font for text-drawing operation.
            </summary>
            <remarks>Default value: 
            <see cref="F:BitMiracle.Docotic.Pdf.PdfBuiltInFont.Helvetica" /></remarks>
            <value>The font for text-drawing operation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.FontSize">
            <summary>
            Gets or sets the size of the current font in points.
            </summary>
            <remarks>Default value: 8 points.</remarks>
            <value>The size of the current font in points.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextPosition">
            <summary>
            Gets or sets the current text position.
            </summary>
            <remarks>Consecutive text-drawing operations that do not explicitly
            specify start position will use this position as the
            start one.</remarks>
            <value>The text position.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextAngle">
            <summary>
            Gets or sets the text rotation angle in degrees.
            </summary>
            <remarks>Text gets rotated in counter-clockwise direction.<br />
            Default value: 0 degrees (no rotation).</remarks>
            <value>The text rotation angle, in degrees.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.CharacterSpacing">
            <summary>
            Gets or sets the current character spacing.
            </summary>
            <remarks>The character spacing parameter is a number specified in
            unscaled text space units (although it is subject to scaling by the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextHorizontalScaling" /> parameter if the writing mode
            is horizontal). When the glyph for each character in the string is
            rendered, character spacing is added to the horizontal or vertical
            component of the glyph's displacement, depending on the writing
            mode.<br />
            Default value: 0.</remarks>
            <value>The character spacing.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.WordSpacing">
            <summary>
            Gets or sets the current word spacing.
            </summary>
            <remarks>Word spacing works the same way as
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CharacterSpacing" />but applies only to the space
            character. The word spacing parameter is added to the glyph's
            horizontal or vertical displacement (depending on the writing mode).
            For horizontal writing, a positive value for word spacing has the
            effect of increasing the spacing between words.<br />
            Default value: 0.</remarks>
            <value>The word spacing.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextHorizontalScaling">
            <summary>
            Gets or sets the current horizontal scaling of text.
            </summary>
            <remarks>The horizontal scaling parameter adjusts the width of
            glyphs by stretching or compressing them in the horizontal
            direction. Its value is specified as a percentage of the normal
            width of the glyphs, with 100 being the normal width.<br />
            Default value: 100.</remarks>
            <value>The horizontal scaling of text.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextRenderingMode">
            <summary>
            Gets or sets the current text rendering mode.
            </summary>
            <remarks>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfTextRenderingMode.Fill" />.</remarks>
            <value>The text rendering mode.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextRise">
            <summary>
            Gets or sets the current text rise.
            </summary>
            <remarks>Text rise specifies the distance, in unscaled text space
            units, to move the baseline up or down from its default location.
            Positive values of text rise move the baseline up. Adjustments to
            the baseline are useful for drawing superscripts or subscripts. The
            default location of the baseline can be restored by setting the
            text rise to 0. <br />
            Default value: 0.</remarks>
            <value>The text rise.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.BlendMode">
            <summary>
            (PDF 1.4) Gets or sets the current blend mode.
            </summary>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfBlendMode.Normal" /></remarks>
            <value>The blend mode.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition">
            <summary>
            Gets or sets the current position for path operations.
            </summary>
            <value>The current position for path operations.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCanvas.TransformationMatrix">
            <summary>
            Gets the current transformation matrix for this <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" />.
            </summary>
            <value>
            The current transformation matrix.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.Clear">
            <summary>
            Clears the entire canvas and resets all current graphics parameters
            to their defaults.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.SaveState">
            <summary>
            Saves the current graphics state.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.RestoreState">
            <summary>
            Restores the last saved graphics state.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.TranslateTransform(System.Double,System.Double)">
            <summary>
            Changes the origin of the coordinate system by prepending the
            specified translation to the transformation matrix of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" />.
            </summary>
            <param name="x">The x-coordinate of the translation.</param>
            <param name="y">The y-coordinate of the translation.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.ScaleTransform(System.Double,System.Double)">
            <summary>
            Applies the specified scaling operation to the transformation
            matrix of this <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> by prepending it to the
            transformation matrix.
            </summary>
            <param name="scaleX">Scale factor in the x direction.</param>
            <param name="scaleY">Scale factor in the y direction.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.RotateTransform(System.Double)">
            <summary>
            Applies the specified rotation to the transformation matrix of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" />.
            </summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <remarks>Canvas gets rotated in a counter-clockwise
            direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.SkewTransform(System.Double,System.Double)">
            <summary>
            Skews the x axis by an angle alpha and the y axis by an angle beta.
            </summary>
            <param name="alpha">The alpha angle in degrees.</param>
            <param name="beta">The beta angle in degrees.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.ResetTransform">
            <summary>
            Resets the current transformation matrix of this <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> to the identity matrix.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.Transform(BitMiracle.Docotic.Pdf.PdfMatrix)">
            <summary>
            Transforms coordinate system of this <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> by multiplying its current
            transformation matrix by specified <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />.
            </summary>
            <param name="transformation">The matrix that multiplies current transformation matrix
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" />.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendLineTo(BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Appends a straight line segment from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to specified endpoint to the current
            path.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <overloads>Appends a straight line segment from the current point
            to specified endpoint to the current path.</overloads>
            <remarks>The endpoint becomes new current point.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawLineTo" />
            if you want to draw a line immediately.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendLineTo(System.Drawing.PointF)">
            <summary>
            Appends a straight line segment from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to specified endpoint to the current
            path.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <remarks>The endpoint becomes new current point.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawLineTo" />
            if you want to draw a line immediately.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendLineTo(System.Double,System.Double)">
            <summary>
            Appends a straight line segment from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to specified endpoint to the current
            path.
            </summary>
            <param name="x">The x-coordinate of the endpoint.</param>
            <param name="y">The y-coordinate of the endpoint.</param>
            <remarks>The endpoint becomes new current point.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawLineTo" />
            if you want to draw a line immediately.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawLineTo(BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Draws a straight line segment from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to specified endpoint.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <overloads>Draws a straight line segment from the current point
            to specified endpoint.</overloads>
            <remarks>The endpoint becomes new current point.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendLineTo" />
            if you want to append a line segment to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawLineTo(System.Drawing.PointF)">
            <summary>
            Draws a straight line segment from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to specified endpoint.
            </summary>
            <param name="endpoint">The endpoint.</param>
            <remarks>The endpoint becomes new current point.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendLineTo" />
            if you want to append a line segment to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawLineTo(System.Double,System.Double)">
            <summary>
            Draws a straight line segment from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to specified endpoint.
            </summary>
            <param name="x">The x-coordinate of the endpoint.</param>
            <param name="y">The y-coordinate of the endpoint.</param>
            <remarks>The endpoint becomes new current point.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendLineTo" />
            if you want to append a line segment to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Appends a rectangle specified by a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure to the current path as a complete subpath.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to append.</param>
            <overloads>Appends a possibly rotated rectangle specified by
            a rectangle structure to the current path as a complete subpath.</overloads>
            <remarks>Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle" />
            if you want to draw a rectangle immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle(System.Drawing.RectangleF)">
            <summary>
            Appends a rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure to the current path as a complete subpath.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to append.</param>
            <remarks>Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle" />
            if you want to draw a rectangle immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double)">
            <summary>
            Appends a rotated rectangle specified by a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure to the current path as a complete subpath.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to append.</param>
            <param name="angle">The angle of rotation in degrees.</param>
            <remarks>Rectangle gets rotated in a counter-clockwise
            direction.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle" />
            if you want to draw a rectangle immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle(System.Drawing.RectangleF,System.Single)">
            <summary>
            Appends a rotated rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure to the current path as a complete subpath.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to append.</param>
            <param name="angle">The angle of rotation in degrees.</param>
            <remarks>Rectangle gets rotated in a counter-clockwise
            direction.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle" />
            if you want to draw a rectangle immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Draws a rectangle specified by a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to draw.</param>
            <overloads>Draws a possibly rotated rectangle specified by
            a rectangle structure.</overloads>
            <remarks>
            This methods draws a non-filled rectangle.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to draw.</param>
            <remarks>
            This methods draws a non-filled rectangle.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a rectangle specified by a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to draw.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to draw.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double)">
            <summary>
            Draws a rotated rectangle specified by a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to draw.</param>
            <param name="angle">The angle of rotation in degrees.</param>
            <remarks>Rectangle gets rotated in a counter-clockwise
            direction. <br /><br />
            This methods draws a non-filled rectangle.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(System.Drawing.RectangleF,System.Single)">
            <summary>
            Draws a rotated rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to draw.</param>
            <param name="angle">The angle of rotation in degrees.</param>
            <remarks>Rectangle gets rotated in a counter-clockwise
            direction. <br /><br />
            This methods draws a non-filled rectangle.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a rotated rectangle specified by a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to draw.</param>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>Rectangle gets rotated in a counter-clockwise
            direction.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRectangle(System.Drawing.RectangleF,System.Single,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a rotated rectangle specified by a <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to draw.</param>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>Rectangle gets rotated in a counter-clockwise
            direction.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRectangle" />
            if you want to append a rectangle to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCurveTo(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Appends a cubic Bézier curve to the current path.
            </summary>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endpoint">The endpoint.</param>
            <remarks>The curve extends from the <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" />
            to the endpoint, using <paramref name="firstControlPoint" /> and
            <paramref name="secondControlPoint" /> as
            the Bézier control points.<br />The new current point is
            endpoint.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCurveTo" />
            if you want to draw a curve immediately.</remarks>
            <overloads>Appends a cubic Bézier curve to the current path.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCurveTo(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Appends a cubic Bézier curve to the current path.
            </summary>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endpoint">The endpoint.</param>
            <remarks>The curve extends from the <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" />
            to the endpoint, using <paramref name="firstControlPoint" /> and
            <paramref name="secondControlPoint" /> as
            the Bézier control points.<br />The new current point is
            endpoint.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCurveTo" />
            if you want to draw a curve immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCurveTo(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Draws a cubic Bézier curve.
            </summary>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endpoint">The endpoint.</param>
            <remarks>The curve extends from the <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" />
            to the endpoint, using <paramref name="firstControlPoint" /> and
            <paramref name="secondControlPoint" /> as
            the Bézier control points.<br />The new current point is
            endpoint.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCurveTo" />
            if you want to append a curve to the current path.
            </remarks>
            <overloads>Draws a cubic Bézier curve.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCurveTo(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a cubic Bézier curve.
            </summary>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
            <param name="endpoint">The endpoint.</param>
            <remarks>The curve extends from the <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" />
            to the endpoint, using <paramref name="firstControlPoint" /> and
            <paramref name="secondControlPoint" /> as
            the Bézier control points.<br />The new current point is
            endpoint.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCurveTo" />
            if you want to append a curve to the current path.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRoundedRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Appends a rectangle structure with rounded corners specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to the current path as a complete subpath.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to append.</param>
            <param name="cornerSize">Size of the corners.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRoundedRectangle" />
            if you want to draw a rectangle with rounded corners
            immediately.</remarks>
            <overloads>Appends a rectangle structure with rounded corners specified by a
            rectangle structure to the current path as a complete subpath.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRoundedRectangle(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Appends a rectangle structure with rounded corners specified by a
            <see cref="T:System.Drawing.RectangleF" /> to the current path as a complete subpath.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to append.</param>
            <param name="cornerSize">Size of the corners.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRoundedRectangle" />
            if you want to draw a rectangle with rounded corners
            immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRoundedRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Draws a rectangle structure with rounded corners specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to draw.</param>
            <param name="cornerSize">Size of the corners.</param>
            <overloads>Draws a rectangle structure with rounded corners
            specified by a rectangle structure.</overloads>
            <remarks>This methods draws a non-filled rectangle.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRoundedRectangle" />
            if you want to append a rectangle with rounded corners to 
            the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRoundedRectangle(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draws a rectangle structure with rounded corners specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to draw.</param>
            <param name="cornerSize">Size of the corners.</param>
            <remarks>This methods draws a non-filled rectangle.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRoundedRectangle" />
            if you want to append a rectangle with rounded corners to 
            the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRoundedRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a rectangle structure with rounded corners specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="rect">A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the rectangle to draw.</param>
            <param name="cornerSize">Size of the corners.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRoundedRectangle" />
            if you want to append a rectangle with rounded corners to
            the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawRoundedRectangle(System.Drawing.RectangleF,System.Drawing.SizeF,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a rectangle structure with rounded corners specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the rectangle to draw.</param>
            <param name="cornerSize">Size of the corner.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendRoundedRectangle" />
            if you want to append a rectangle with rounded corners to
            the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCircle(BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Appends a circle with specified center coordinates and radius to the
            current path.
            </summary>
            <param name="center">The circle center.</param>
            <param name="radius">The circle radius.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCircle" />
            if you want to draw a circle immediately.</remarks>
            <overloads>Appends a circle with specified center coordinates and radius
            to the current path.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCircle(System.Drawing.PointF,System.Single)">
            <summary>
            Appends a circle with specified center coordinates and radius to the
            current path.
            </summary>
            <param name="center">The circle center.</param>
            <param name="radius">The circle radius.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCircle" />
            if you want to draw a circle immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCircle(BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Draws a circle with specified center coordinates and radius.
            </summary>
            <param name="center">The circle center.</param>
            <param name="radius">The circle radius.</param>
            <overloads>Draws a circle with specified center coordinates and
            radius.</overloads>
            <remarks>This methods draws a non-filled circle.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCircle" />
            if you want to append a circle to the current path.</remarks>
            <overloads>Draws a circle with specified center coordinates and
            radius.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCircle(System.Drawing.PointF,System.Single)">
            <summary>
            Draws a circle with specified center coordinates and radius.
            </summary>
            <param name="center">The circle center.</param>
            <param name="radius">The circle radius.</param>
            <remarks>This methods draws a non-filled circle.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCircle" />
            if you want to append a circle to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCircle(BitMiracle.Docotic.Pdf.PdfPoint,System.Double,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a circle with specified center coordinates and radius.
            </summary>
            <param name="center">The circle center.</param>
            <param name="radius">The circle radius.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCircle" />
            if you want to append a circle to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawCircle(System.Drawing.PointF,System.Single,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a circle with specified center coordinates and radius.
            </summary>
            <param name="center">The circle center.</param>
            <param name="radius">The circle radius.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendCircle" />
            if you want to append a circle to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendEllipse(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Appends an ellipse specified by a bounding <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure to the current path.
            </summary>
            <param name="boundingRectangle">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the ellipse.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawEllipse" />
            if you want to draw an ellipse immediately.</remarks>
            <overloads>Appends an ellipse specified by a bounding rectangle
            structure to the current path.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendEllipse(System.Drawing.RectangleF)">
            <summary>
            Appends an ellipse specified by a bounding <see cref="T:System.Drawing.RectangleF" />
            structure to the current path.
            </summary>
            <param name="boundingRectangle">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the ellipse.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawEllipse" />
            if you want to draw an ellipse immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawEllipse(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Draws an ellipse specified by a bounding <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <param name="boundingRectangle">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the ellipse.</param>
            <overloads>Draws an ellipse specified by a bounding
            rectangle structure.</overloads>
            <remarks>This methods draws a non-filled ellipse.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendEllipse" />
            if you want to append an ellipse to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawEllipse(System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse specified by a bounding <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="boundingRectangle">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the ellipse.</param>
            <remarks>This methods draws a non-filled ellipse.<br /><br />
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendEllipse" />
            if you want to append an ellipse to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawEllipse(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws an ellipse specified by a bounding <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <param name="boundingRectangle">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the ellipse.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendEllipse" />
            if you want to append an ellipse to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawEllipse(System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws an ellipse specified by a bounding <see cref="T:System.Drawing.RectangleF" />
            structure.
            </summary>
            <param name="boundingRectangle">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the ellipse.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            Please use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendEllipse" />
            if you want to append an ellipse to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Appends an arc representing a portion of an ellipse specified by
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial endpoints to
            the current path.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <overloads>Appends an arc representing a portion of an ellipse
            to the current path.</overloads>
            <remarks>
            The arc extends in a counter-clockwise direction.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc" />
            if you want to draw an arc immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Appends an arc representing a portion of an ellipse specified by
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial endpoints to
            the current path.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <remarks>
            The arc extends in a counter-clockwise direction.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc" />
            if you want to draw an arc immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint,System.Boolean)">
            <summary>
            Appends an arc representing a portion of an ellipse specified by
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure, two radial endpoints and a
            direction to the current path.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <param name="clockwise">if set to <c>true</c> then the arc extends
            in a clockwise direction; otherwise, the arc extends in a
            counter-clockwise direction.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc" />
            if you want to draw an arc immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Appends an arc representing a portion of an ellipse specified by
            <see cref="T:System.Drawing.RectangleF" /> structure, two radial endpoints and a
            direction to the current path.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <param name="clockwise">if set to <c>true</c> then the arc extends
            in a clockwise direction; otherwise, the arc extends in a
            counter-clockwise direction.</param>
            <remarks>
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc" />
            if you want to draw an arc immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc(BitMiracle.Docotic.Pdf.PdfPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Appends a straight line segment and an arc representing a portion
            of an ellipse specified by radius and center to the current path.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="radiusX">The radius of the ellipse measured along the
            x-axis.</param>
            <param name="radiusY">The radius of the ellipse measured along the
            y-axis.</param>
            <param name="startAngle">The start angle of the arc in
            degrees.</param>
            <param name="sweepAngle">The sweep angle of the arc in
            degrees.</param>
            <remarks>The line segment is added from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to the beginning of the arc. The arc
            extends along the perimeter of an ellipse with the given radius and
            center. The length of the arc is defined by the given start and
            sweep angles.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc" />
            if you want to draw an arc immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc(System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Appends a straight line segment and an arc representing a portion
            of an ellipse specified by radius and center to the current path.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="radiusX">The radius of the ellipse measured along the
            x-axis.</param>
            <param name="radiusY">The radius of the ellipse measured along the
            y-axis.</param>
            <param name="startAngle">The start angle of the arc in
            degrees.</param>
            <param name="sweepAngle">The sweep angle of the arc in
            degrees.</param>
            <remarks>The line segment is added from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to the beginning of the arc. The arc
            extends along the perimeter of an ellipse with the given radius and
            center. The length of the arc is defined by the given start and
            sweep angles.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc" />
            if you want to draw an arc immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial endpoints.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <overloads>Draws an arc representing a portion of an
            ellipse.</overloads>
            <remarks>
            The arc extends in a counter-clockwise direction.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc" />
            if you want to append an arc to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial endpoints.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <remarks>
            The arc extends in a counter-clockwise direction.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc" />
            if you want to append an arc to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint,System.Boolean)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure, two radial endpoints and a
            direction.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <param name="clockwise">if set to <c>true</c> then the arc extends
            in a clockwise direction; otherwise, the arc extends in a
            counter-clockwise direction.</param>
            <remarks>
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc" />
            if you want to append an arc to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by
            <see cref="T:System.Drawing.RectangleF" /> structure, two radial endpoints and a
            direction.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure
            that defines the boundaries of the arc.</param>
            <param name="first">The first radial endpoint.</param>
            <param name="second">The second radial endpoint.</param>
            <param name="clockwise">if set to <c>true</c> then the arc extends
            in a clockwise direction; otherwise, the arc extends in a
            counter-clockwise direction.</param>
            <remarks>
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc" />
            if you want to append an arc to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc(BitMiracle.Docotic.Pdf.PdfPoint,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a straight line and an arc representing a portion
            of an ellipse specified by radius and center.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="radiusX">The radius of the ellipse measured along the
            x-axis.</param>
            <param name="radiusY">The radius of the ellipse measured along the
            y-axis.</param>
            <param name="startAngle">The start angle of the arc in
            degrees.</param>
            <param name="sweepAngle">The sweep angle of the arc in
            degrees.</param>
            <remarks>The line segment is added from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to the beginning of the arc. The arc
            extends along the perimeter of an ellipse with the given radius and
            center. The length of the arc is defined by the given start and
            sweep angles.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc" />
            if you want to append an arc to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawArc(System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a straight line and an arc representing a portion
            of an ellipse specified by radius and center.
            </summary>
            <param name="center">The center of the ellipse.</param>
            <param name="radiusX">The radius of the ellipse measured along the
            x-axis.</param>
            <param name="radiusY">The radius of the ellipse measured along the
            y-axis.</param>
            <param name="startAngle">The start angle of the arc in
            degrees.</param>
            <param name="sweepAngle">The sweep angle of the arc in
            degrees.</param>
            <remarks>The line segment is added from the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to the beginning of the arc. The arc
            extends along the perimeter of an ellipse with the given radius and
            center. The length of the arc is defined by the given start and
            sweep angles.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendArc" />
            if you want to append an arc to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Appends a pie shape defined by an ellipse specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial lines to the
            current path.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="first">The first radial point.</param>
            <param name="second">The second radial point.</param>
            <overloads>Appends a pie shape to the current path.</overloads>
            <remarks>
            This method appends a pie shape defined by an arc of an ellipse and
            the two radial lines that intersect with the endpoints of the arc to
            the current path.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie" />
            if you want to draw a pie immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Appends a pie shape defined by an ellipse specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines to the
            current path.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="first">The first radial point.</param>
            <param name="second">The second radial point.</param>
            <remarks>
            This method appends a pie shape defined by an arc of an ellipse and
            the two radial lines that intersect with the endpoints of the arc to
            the current path.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie" />
            if you want to draw a pie immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double,System.Double)">
            <summary>
            Appends a pie shape defined by an ellipse specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial lines to the
            current path.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise
            from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise
            from the <paramref name="startAngle" /> parameter to the second
            side of the pie shape.</param>
            <remarks>
            This method appends a pie shape defined by an arc of an ellipse and
            the two radial lines that intersect with the endpoints of the arc to
            the current path.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie" />
            if you want to draw a pie immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Appends a pie shape defined by an ellipse specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines to the
            current path.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise
            from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise
            from the <paramref name="startAngle" /> parameter to the second
            side of the pie shape.</param>
            <remarks>
            This method appends a pie shape defined by an arc of an ellipse and
            the two radial lines that intersect with the endpoints of the arc to
            the current path.<br /><br />
            Note that the call to this method does not place any marks on the
            canvas; only the painting operators (<see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath" />,
            <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath" />, <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath" />,
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath" />) do that.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie" />
            if you want to draw a pie immediately.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="first">The first radial point.</param>
            <param name="second">The second radial point.</param>
            <overloads>Draws a pie shape.</overloads>
            <remarks>
            This method draws a non-filled pie shape defined by an arc of an
            ellipse and the two radial lines that intersect with the endpoints
            of the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="first">The first radial point.</param>
            <param name="second">The second radial point.</param>
            <remarks>
            This method draws a non-filled pie shape defined by an arc of an
            ellipse and the two radial lines that intersect with the endpoints
            of the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="first">The first radial point.</param>
            <param name="second">The second radial point.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            This method draws a pie shape defined by an arc of an ellipse and
            the two radial lines that intersect with the endpoints of
            the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="first">The first radial point.</param>
            <param name="second">The second radial point.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            This method draws a pie shape defined by an arc of an ellipse and
            the two radial lines that intersect with the endpoints of
            the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double,System.Double)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise
            from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise
            from the <paramref name="startAngle" /> parameter to the second
            side of the pie shape.</param>
            <remarks>
            This method draws a non-filled pie shape defined by an arc of an
            ellipse and the two radial lines that intersect with the endpoints
            of the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise
            from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise
            from the <paramref name="startAngle" /> parameter to the second
            side of the pie shape.</param>
            <remarks>
            This method draws a non-filled pie shape defined by an arc of an
            ellipse and the two radial lines that intersect with the endpoints
            of the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double,System.Double,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise
            from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise
            from the <paramref name="startAngle" /> parameter to the second
            side of the pie shape.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            This method draws a pie shape defined by an arc of an
            ellipse and the two radial lines that intersect with the endpoints
            of the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawPie(System.Drawing.RectangleF,System.Single,System.Single,BitMiracle.Docotic.Pdf.PdfDrawMode)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a
            <see cref="T:System.Drawing.RectangleF" /> structure and two radial lines.
            </summary>
            <param name="rect">
                <see cref="T:System.Drawing.RectangleF" /> structure that
            represents the bounding rectangle that defines the ellipse from
            which the pie shape comes.</param>
            <param name="startAngle">Angle measured in degrees clockwise
            from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise
            from the <paramref name="startAngle" /> parameter to the second
            side of the pie shape.</param>
            <param name="mode">The drawing mode.</param>
            <remarks>
            This method draws a pie shape defined by an arc of an
            ellipse and the two radial lines that intersect with the endpoints
            of the arc.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.AppendPie" />
            if you want to append a pie shape to the current path.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.ResetPath">
            <summary>
            Resets the current path.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.SetClip(BitMiracle.Docotic.Pdf.PdfFillMode)">
            <summary>
            Modifies the current clipping path by intersecting it with the
            current path, using the specified rule to determine
            which regions lay inside the clipping path.
            </summary>
            <param name="rule">The rule that determines which regions lay
            inside the clipping path.</param>
            <overloads>Modifies the current clipping path by intersecting it with the
            current path, using the specified rule to determine
            which regions lay inside the clipping path.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.SetClip(System.Drawing.Drawing2D.FillMode)">
            <summary>
            Modifies the current clipping path by intersecting it with the
            current path, using the specified rule to determine
            which regions lay inside the clipping path.
            </summary>
            <param name="rule">The rule that determines which regions lay
            inside the clipping path.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.ClosePath">
            <summary>
            Closes the current subpath by appending a straight line segment
            from the <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.CurrentPosition" /> to the starting point of
            the subpath.
            </summary>
            <remarks>If the current subpath is already closed, this method does
            nothing. This method terminates the current subpath.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.StrokePath">
            <summary>
            Strokes the current path.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.CloseAndStrokePath">
            <summary>
            Closes and strokes the current path.
            </summary>
            <remarks>This method has the same effect as the sequence 
            <c>ClosePath();StrokePath();</c></remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath(BitMiracle.Docotic.Pdf.PdfFillMode)">
            <summary>
            Fills the current path using the specified rule to determine the
            region to fill.
            </summary>
            <param name="rule">The rule that determines the region to
            fill.</param>
            <remarks>Any subpaths that are open are implicitly closed
            before being filled.</remarks>
            <overloads>Fills the current path using the specified rule to determine the
            region to fill.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.FillPath(System.Drawing.Drawing2D.FillMode)">
            <summary>
            Fills the current path using the specified rule to determine the
            region to fill.
            </summary>
            <param name="rule">The rule that determines the region to
            fill.</param>
            <remarks>Any subpaths that are open are implicitly closed
            before being filled.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath(BitMiracle.Docotic.Pdf.PdfFillMode)">
            <summary>
            Fills and then strokes the current path using the specified rule
            to determine the region to fill.
            </summary>
            <param name="rule">The rule that determines the region to
            fill.</param>
            <overloads>Fills and then strokes the current path using the specified rule
            to determine the region to fill.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.FillAndStrokePath(System.Drawing.Drawing2D.FillMode)">
            <summary>
            Fills and then strokes the current path using the specified rule
            to determine the region to fill.
            </summary>
            <param name="rule">The rule that determines the region to
            fill.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.GetTextWidth(System.String)">
            <summary>
            Gets the width of the specified string in pixels when drawn with
            current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.
            </summary>
            <param name="text">The string to measure.</param>
            <returns>The width of the specified string in pixels when drawn with
            current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.GetTextHeight">
            <summary>
            Gets the height of a text in pixels when drawn with
            current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.
            </summary>
            <returns>The height of the specified string in pixels when drawn with
            current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.MeasureText(System.String)">
            <summary>
            Measures the specified string when drawn with current
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.
            </summary>
            <param name="text">The string to measure.</param>
            <returns>A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure that represents the size,
            in pixels, of the string specified by the <paramref name="text" />
            parameter as drawn with the current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.GetText">
            <summary>
            Retrieves all text drawn on the canvas in plain text format.
            </summary>
            <returns>All text drawn on the canvas in plain text format.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.GetTextData">
            <summary>
            Gets all text drawn on the canvas as the collection of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextData" /> objects.
            </summary>
            <returns>All text drawn on the canvas as the collection of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextData" /> objects.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.String)">
            <summary>
            Draws the specified text string starting from the current
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextPosition" />.
            </summary>
            <overloads>Draws the specified text string at the specified
            location with the current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.</overloads>
            <param name="text">The string to draw.</param>
            <remarks>The string represented by the <paramref name="text" />
            parameter always spans only one line. Please use 
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Byte[])">
            <summary>
            Draws the specified text using character codes starting from the current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextPosition" />.
            </summary>
            <overloads>
            Draws the specified character codes at the specified location with the current <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" />.
            </overloads>
            <param name="characterCodes">The character codes to draw.</param>
            <remarks>
                <para>
            Character codes represent raw PDF string related to font's encoding.
            Use <see cref="M:BitMiracle.Docotic.Pdf.PdfTextData.GetCharacterCodes" /> method to get character codes for existing text.
            </para>
                <para>
            The string represented by the <paramref name="characterCodes" /> parameter always spans only one line.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.String,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Draws the specified text string starting from the current
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextPosition" />.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="charWidths">The char widths.</param>
            <remarks>
            After drawing of each character in the string represented by the
            <paramref name="text" /> parameter this method looks up a width in
            a collection represented by the <paramref name="charWidths" />
            parameter and applies extra displacement if needed.<br /><br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use 
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.String,System.Collections.Generic.ICollection{System.Single})">
            <summary>
            Draws the specified text string starting from the current
            <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.TextPosition" />.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="charWidths">The char widths.</param>
            <remarks>
            After drawing of each character in the string represented by the
            <paramref name="text" /> parameter this method looks up a width in
            a collection represented by the <paramref name="charWidths" />
            parameter and applies extra displacement if needed.<br /><br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use 
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Double,System.Double,System.String)">
            <summary>
            Draws the specified text string starting from the specified
            position.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="text">The string to draw.</param>
            <remarks>The string represented by the <paramref name="text" />
            parameter always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <remarks>Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Double,System.Double,System.Double,System.String,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <param name="charWidths">The char widths.</param>
            <remarks>
            After drawing of each character in the string represented by the
            <paramref name="text" /> parameter this method looks up a width in
            a collection represented by the <paramref name="charWidths" />
            parameter and applies extra displacement if needed.<br /><br />
            Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Single,System.Single,System.Single,System.String,System.Collections.Generic.ICollection{System.Single})">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <param name="charWidths">The char widths.</param>
            <remarks>
            After drawing of each character in the string represented by the
            <paramref name="text" /> parameter this method looks up a width in
            a collection represented by the <paramref name="charWidths" />
            parameter and applies extra displacement if needed.<br /><br />
            Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(BitMiracle.Docotic.Pdf.PdfPoint,System.String)">
            <summary>
            Draws the specified text string starting from the specified
            position.
            </summary>
            <param name="position">A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that
            specifies the upper-left corner of the drawn text.</param>
            <param name="text">The string to draw.</param>
            <remarks>The string represented by the <paramref name="text" />
            parameter always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Drawing.PointF,System.String)">
            <summary>
            Draws the specified text string starting from the specified
            position.
            </summary>
            <param name="position">A <see cref="T:System.Drawing.PointF" /> structure that
            specifies the upper-left corner of the drawn text.</param>
            <param name="text">The string to draw.</param>
            <remarks>The string represented by the <paramref name="text" />
            parameter always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(BitMiracle.Docotic.Pdf.PdfPoint,System.Double,System.String)">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="position">A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that
            specifies the upper-left corner of the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <remarks>Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Drawing.PointF,System.Single,System.String)">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="position">A <see cref="T:System.Drawing.PointF" /> structure that
            specifies the upper-left corner of the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <remarks>Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(BitMiracle.Docotic.Pdf.PdfPoint,System.Double,System.String,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="position">A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that
            specifies the upper-left corner of the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <param name="charWidths">The char widths.</param>
            <remarks>
            After drawing of each character in the string represented by the
            <paramref name="text" /> parameter this method looks up a width in
            a collection represented by the <paramref name="charWidths" />
            parameter and applies extra displacement if needed.<br /><br />
            Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Drawing.PointF,System.Single,System.String,System.Collections.Generic.ICollection{System.Single})">
            <summary>
            Draws the specified text string starting from the specified
            position rotated by the specified angle.
            </summary>
            <param name="position">A <see cref="T:System.Drawing.PointF" /> structure that
            specifies the upper-left corner of the drawn text.</param>
            <param name="angle">The angle, in degrees, to rotate text by.</param>
            <param name="text">The string to draw.</param>
            <param name="charWidths">The char widths.</param>
            <remarks>
            After drawing of each character in the string represented by the
            <paramref name="text" /> parameter this method looks up a width in
            a collection represented by the <paramref name="charWidths" />
            parameter and applies extra displacement if needed.<br /><br />
            Text gets rotated in counter-clockwise direction.<br />
            The string represented by the <paramref name="text" /> parameter
            always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign)">
            <summary>
            Draws the specified text string in the specified rectangle.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the 
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the 
            drawn text within the rectangle.</param>
            <remarks>The string represented by the <paramref name="text" />
            parameter always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.String,System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign)">
            <summary>
            Draws the specified text string in the specified rectangle.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the 
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the 
            drawn text within the rectangle.</param>
            <remarks>The string represented by the <paramref name="text" />
            parameter always spans only one line. Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> if you
            want to draw more than one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign)">
            <summary>
            Draws the specified text string in the specified rectangle using
            specified formatting options.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the
            drawn text within the rectangle.</param>
            <returns>The number of characters drawn.</returns>
            <remarks>The text represented by the <paramref name="text" />
            parameter may be drawn in multiple lines. This method clips the
            text so that it does not appear outside the specified rectangle.
            Lines are automatically broken between words if a word would extend
            past the edge of the rectangle specified by the
            <paramref name="rect" /> parameter. A carriage return-line feed
            sequence also breaks the line.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" /> if you
            want to draw only one line of text.</remarks>
            <overloads>Draws the specified text string in the specified
            rectangle using specified formatting options.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText(System.String,System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign)">
            <summary>
            Draws the specified text string in the specified rectangle using
            specified formatting options.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the
            drawn text within the rectangle.</param>
            <returns>The number of characters drawn.</returns>
            <remarks>The text represented by the <paramref name="text" />
            parameter may be drawn in multiple lines. This method clips the
            text so that it does not appear outside the specified rectangle.
            Lines are automatically broken between words if a word would extend
            past the edge of the rectangle specified by the
            <paramref name="rect" /> parameter. A carriage return-line feed
            sequence also breaks the line.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" /> if you
            want to draw only one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign,System.Double)">
            <summary>
            Draws the specified text string in the specified rectangle using
            specified formatting options.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the
            drawn text within the rectangle.</param>
            <param name="lineHeight">Height of the one line of drawn text
            (distance between top lines of two consecutive strings).</param>
            <returns>The number of characters drawn.</returns>
            <remarks>The text represented by the <paramref name="text" />
            parameter may be drawn in multiple lines. This method clips the
            text so that it does not appear outside the specified rectangle.
            Lines are automatically broken between words if a word would extend
            past the edge of the rectangle specified by the
            <paramref name="rect" /> parameter. A carriage return-line feed
            sequence also breaks the line.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" /> if you
            want to draw only one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText(System.String,System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign,System.Single)">
            <summary>
            Draws the specified text string in the specified rectangle using
            specified formatting options.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the
            drawn text within the rectangle.</param>
            <param name="lineHeight">Height of the one line of drawn text
            (distance between top lines of two consecutive strings).</param>
            <returns>The number of characters drawn.</returns>
            <remarks>The text represented by the <paramref name="text" />
            parameter may be drawn in multiple lines. This method clips the
            text so that it does not appear outside the specified rectangle.
            Lines are automatically broken between words if a word would extend
            past the edge of the rectangle specified by the
            <paramref name="rect" /> parameter. A carriage return-line feed
            sequence also breaks the line.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" /> if you
            want to draw only one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign,System.Double,System.Boolean)">
            <summary>
            Draws the specified text string in the specified rectangle using
            specified formatting options.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the
            drawn text within the rectangle.</param>
            <param name="lineHeight">Height of the one line of drawn text
            (distance between top lines of two consecutive strings).</param>
            <param name="drawAtLeastOneLine">if set to <c>true</c> than at least
            one clipped line of text will be drawn.</param>
            <returns>The number of characters drawn.</returns>
            <remarks>The text represented by the <paramref name="text" />
            parameter may be drawn in multiple lines. This method clips the
            text so that it does not appear outside the specified rectangle.
            Lines are automatically broken between words if a word would extend
            past the edge of the rectangle specified by the
            <paramref name="rect" /> parameter. A carriage return-line feed
            sequence also breaks the line.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" /> if you
            want to draw only one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText(System.String,System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfTextAlign,BitMiracle.Docotic.Pdf.PdfVerticalAlign,System.Single,System.Boolean)">
            <summary>
            Draws the specified text string in the specified rectangle using
            specified formatting options.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> structure that
            specifies the location of the drawn text.</param>
            <param name="align">The horizontal alignment of the
            drawn text within the rectangle.</param>
            <param name="verticalAlign">The vertical alignment of the
            drawn text within the rectangle.</param>
            <param name="lineHeight">Height of the one line of drawn text
            (distance between top lines of two consecutive strings).</param>
            <param name="drawAtLeastOneLine">if set to <c>true</c> than at least
            one clipped line of text will be drawn.</param>
            <returns>The number of characters drawn.</returns>
            <remarks>The text represented by the <paramref name="text" />
            parameter may be drawn in multiple lines. This method clips the
            text so that it does not appear outside the specified rectangle.
            Lines are automatically broken between words if a word would extend
            past the edge of the rectangle specified by the
            <paramref name="rect" /> parameter. A carriage return-line feed
            sequence also breaks the line.<br /><br />
            Please use
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" /> if you
            want to draw only one line of text.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Draws the specified image, using its original size, at the
            specified location.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="location">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that
            represents the location of the upper-left corner of the
            drawn image.</param>
            <overloads>Draws the specified image at the specified
            location.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,System.Drawing.PointF)">
            <summary>
            Draws the specified image, using its original size, at the
            specified location.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="location">
                <see cref="T:System.Drawing.PointF" /> structure that
            represents the location of the upper-left corner of the
            drawn image.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Draws the specified image, using its original size, at the
            specified location and with the specified rotation.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="location">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that
            represents the location of the upper-left corner of the
            drawn image.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The image gets rotated in a counter-clockwise
            direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,System.Drawing.PointF,System.Single)">
            <summary>
            Draws the specified image, using its original size, at the
            specified location and with the specified rotation.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="location">
                <see cref="T:System.Drawing.PointF" /> structure that
            represents the location of the upper-left corner of the
            drawn image.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The image gets rotated in a counter-clockwise
            direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.Double)">
            <summary>
            Draws the specified image at the specified location with specified
            size and with the specified rotation.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="location">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that
            represents the location of the upper-left corner of the
            drawn image.</param>
            <param name="size">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure that specifies
            the size of the drawn image.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The image gets rotated in a counter-clockwise
            direction.<br /><br />The image represented by the
            <paramref name="image" /> is scaled to the specified
            size.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Draws the specified image at the specified location with specified
            size and with the specified rotation.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="location">
                <see cref="T:System.Drawing.PointF" /> structure that
            represents the location of the upper-left corner of the
            drawn image.</param>
            <param name="size">
                <see cref="T:System.Drawing.SizeF" /> structure that specifies
            the size of the drawn image.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The image gets rotated in a counter-clockwise
            direction.<br /><br />The image represented by the
            <paramref name="image" /> is scaled to the specified
            size.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,System.Double,System.Double)">
            <summary>
            Draws the specified image, using its original size, at the
            specified location.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the
            drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the
            drawn image.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified image, using its original size, at the
            specified location and with the specified rotation.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the
            drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the
            drawn image.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The image gets rotated in a counter-clockwise
            direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawImage(BitMiracle.Docotic.Pdf.PdfImage,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified image at the specified location with specified
            size and with the specified rotation.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the
            drawn image. </param>
            <param name="y">The y-coordinate of the upper-left corner of the
            drawn image. </param>
            <param name="width">The width of the drawn image.</param>
            <param name="height">The height of the drawn image.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The image gets rotated in a counter-clockwise
            direction.<br /><br />The image represented by the
            <paramref name="image" /> is scaled to the specified
            size.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Draws the specified XObject, using its original size, at the specified location.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="location">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that represents the location
            of the upper-left corner of the drawn object.</param>
            <overloads>Draws the specified object at the specified location.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,System.Drawing.PointF)">
            <summary>
            Draws the specified object, using its original size, at the specified location.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="location">
                <see cref="T:System.Drawing.PointF" /> structure that represents the location of
            the upper-left corner of the drawn object.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Draws the specified object, using its original size, at the specified location and
            with the specified rotation.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="location">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that represents the location
            of the upper-left corner of the drawn object.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The object gets rotated in a counter-clockwise direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,System.Drawing.PointF,System.Single)">
            <summary>
            Draws the specified object, using its original size, at the specified location and
            with the specified rotation.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="location">
                <see cref="T:System.Drawing.PointF" /> structure that represents the location of
            the upper-left corner of the drawn object.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The object gets rotated in a counter-clockwise direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.Double)">
            <summary>
            Draws the specified object at the specified location with specified size and with
            the specified rotation.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="location">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that represents the location
            of the upper-left corner of the drawn object.</param>
            <param name="size">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure that specifies the size of the
            drawn object.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>
                <para>
            The object gets rotated in a counter-clockwise direction.
            </para>
                <para>
            The object represented by the <paramref name="obj" /> is scaled to the specified size.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Draws the specified object at the specified location with specified size and with the
            specified rotation.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="location">
                <see cref="T:System.Drawing.PointF" /> structure that represents the location of
            the upper-left corner of the drawn object.</param>
            <param name="size">
                <see cref="T:System.Drawing.SizeF" /> structure that specifies the size of the
            drawn object.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>
                <para>
            The object gets rotated in a counter-clockwise direction.
            </para>
                <para>
            The object represented by the <paramref name="obj" /> is scaled to the specified size.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,System.Double,System.Double)">
            <summary>
            Draws the specified object, using its original size, at the specified location.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn object.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn object.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified object, using its original size, at the specified location and
            with the specified rotation.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn object.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn object.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>The object gets rotated in a counter-clockwise direction.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject(BitMiracle.Docotic.Pdf.PdfXObject,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified object at the specified location with specified size and with the
            specified rotation.
            </summary>
            <param name="obj">The object to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn object.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn object.</param>
            <param name="width">The width of the drawn object.</param>
            <param name="height">The height of the drawn object.</param>
            <param name="angle">The rotation angle.</param>
            <remarks>
                <para>
            The object gets rotated in a counter-clockwise direction.
            </para>
                <para>
            The object represented by the <paramref name="obj" /> is scaled to the specified size.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.MoveInlineImagesToResources">
            <summary>
            Moves all inline images to resources.
            </summary>
            <remarks>
                <para>
            This method replaces each inline image with a regular one. This does not affect visual
            representation of the canvas.
            </para>
                <para>
            Moving inline images to resources can increase file size because regular images do not
            use abbreviated image property names.
            </para>
                <para>
            You might want to move inline images to resources if you are going to scale, resize,
            recompress the inline images or replace their contents.
            </para>
                <para>
            Moving inline images to resources can decrease length of the collection of the owning
            page images. This is because the library de-duplicates images when moving them to resources.
            </para>
            </remarks>
            <overloads>Moves inline images to resources.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCanvas.MoveInlineImagesToResources(System.Predicate{BitMiracle.Docotic.Pdf.PdfImage})">
            <summary>
            Moves some of the inline images to resources.
            </summary>
            <param name="shouldMove">The delegate that defines the conditions of inline images
            that should be moved to resources.</param>
            <remarks>
                <para>
            This method replaces inline images that match the conditions of the
            <paramref name="shouldMove" /> delegate with regular ones. This does not affect visual
            representation of the canvas.
            </para>
                <para>
            Moving inline images to resources can increase file size because regular images do not
            use abbreviated image property names.
            </para>
                <para>
            You might want to move inline images to resources if you are going to scale, resize,
            recompress the inline images or replace their contents.
            </para>
                <para>
            Moving inline images to resources can decrease length of the collection of the owning
            page images. This is because the library de-duplicates images when moving them to resources.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCollection`1">
            <summary>
            Represents a strongly typed read-only collection of PDF objects that can be accessed by index.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCollection`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:BitMiracle.Docotic.Pdf.PdfCollection`1" />.
            </summary>
            <value>The number of elements actually contained in the <see cref="T:BitMiracle.Docotic.Pdf.PdfCollection`1" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCollection`1.GetAt(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>
                <c>true</c> if item is found in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A System.Collections.IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDashPattern">
            <summary>
            Class for a line dash pattern. The line dash pattern controls the
            pattern of dashes and gaps used to stroke paths.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.#ctor">
            <summary>
            Initializes a new empty instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> class.
            </summary>
            <overloads>Initializes a new instance of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> class.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> class.
            </summary>
            <param name="pattern">The pattern (the array of numbers that 
            specifies the lengths of alternating dashes and gaps).</param>
            <remarks>This constructor creates dash pattern with 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDashPattern.Offset" /> set to zero. The elements in
            the <paramref name="pattern" /> array set the length of each dash
            and gap in the dash pattern. The first element of the
            <paramref name="pattern" /> array specifies the length
            of a dash, the second element specifies the length of a space,
            the third element specifies the length of a dash, and so on.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> class.
            </summary>
            <param name="pattern">The pattern (the array of numbers that 
            specifies the lengths of alternating dashes and gaps).</param>
            <remarks>This constructor creates dash pattern with 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDashPattern.Offset" /> set to zero. The elements in
            the <paramref name="pattern" /> array set the length of each dash
            and gap in the dash pattern. The first element of the
            <paramref name="pattern" /> array specifies the length
            of a dash, the second element specifies the length of a space,
            the third element specifies the length of a dash, and so on.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.#ctor(System.Double[],System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> class.
            </summary>
            <param name="pattern">The pattern (the array of numbers that 
            specifies the lengths of alternating dashes and gaps).</param>
            <param name="offset">The distance from the start of a line to the
            beginning of the dash pattern.</param>
            <remarks>The elements in
            the <paramref name="pattern" /> array set the length of each dash
            and gap in the dash pattern. The first element of the
            <paramref name="pattern" /> array specifies the length
            of a dash, the second element specifies the length of a space,
            the third element specifies the length of a dash, and so on.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.#ctor(System.Single[],System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> class.
            </summary>
            <param name="pattern">The pattern (the array of numbers that 
            specifies the lengths of alternating dashes and gaps).</param>
            <param name="offset">The distance from the start of a line to the
            beginning of the dash pattern.</param>
            <remarks>The elements in
            the <paramref name="pattern" /> array set the length of each dash
            and gap in the dash pattern. The first element of the
            <paramref name="pattern" /> array specifies the length
            of a dash, the second element specifies the length of a space,
            the third element specifies the length of a dash, and so on.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDashPattern.Offset">
            <summary>
            Gets the distance from the start of a line to the beginning of
            the dash pattern.
            </summary>
            <value>
            The distance from the start of a line to the beginning of the dash pattern.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.op_Equality(BitMiracle.Docotic.Pdf.PdfDashPattern,BitMiracle.Docotic.Pdf.PdfDashPattern)">
            <summary>
            Determines whether the two specified <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> objects are identical.
            </summary>
            <param name="first">The first <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> object to compare.</param>
            <param name="second">The second <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> object to compare.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> and <paramref name="second" /> are identical;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.op_Inequality(BitMiracle.Docotic.Pdf.PdfDashPattern,BitMiracle.Docotic.Pdf.PdfDashPattern)">
            <summary>
            Determines whether the two specified <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> objects are not identical.
            </summary>
            <param name="first">The first <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> object to compare.</param>
            <param name="second">The second <see cref="T:BitMiracle.Docotic.Pdf.PdfDashPattern" /> object to compare.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> and <paramref name="second" /> are not
            identical; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.GetPattern">
            <summary>
            Gets the pattern (the array of numbers that specifies the lengths
            of alternating dashes and gaps).
            </summary>
            <returns>
            The pattern (the array of numbers that specifies the lengths
            of alternating dashes and gaps).
            </returns>
            <remarks>The elements in the pattern array set the length of each
            dash and gap in the dash pattern. The first element of the
            pattern array specifies the length of a dash, the second element
            specifies the length of a space, the third element specifies the
            length of a dash, and so on.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with
            this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDashPattern.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDocument">
            <summary>
            Class for PDF document processing. This class can be used to create,
            read, merge or compare files in Portable Document Format.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor">
            <summary>
            Creates a new blank PDF document.
            </summary>
            <overloads>Creates a new blank PDF document or opens an existing one.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Creates a new blank PDF document using specified configuration options.
            </summary>
            <param name="options">The configuration options.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.String)">
            <summary>
            Opens an existing PDF document.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.Byte[])">
            <summary>
            Opens an existing PDF document.
            </summary>
            <param name="buffer">The byte buffer from which the PDF document to be read.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            Opens an existing PDF document.
            </summary>
            <param name="stream">The stream from which the PDF document to be read.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.String,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Opens an existing PDF document using specified configuration options.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
            <param name="options">The configuration options.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.IO.Stream,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Opens an existing PDF document using specified configuration options.
            </summary>
            <param name="stream">The stream from which the PDF document to be read.</param>
            <param name="options">The configuration options.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.String,System.String)">
            <summary>
            Opens an existing password-protected PDF document.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF file data.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.Byte[],System.String)">
            <summary>
            Opens an existing password-protected PDF document.
            </summary>
            <param name="buffer">The byte buffer from which the PDF document to be read.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF data.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.IO.Stream,System.String)">
            <summary>
            Opens an existing password-protected PDF document.
            </summary>
            <param name="stream">The stream from which the PDF document to be read.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF data.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.String,System.String,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Opens an existing password-protected PDF document using specified configuration options.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF data.</param>
            <param name="options">The configuration options.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.#ctor(System.IO.Stream,System.String,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Opens an existing password-protected PDF document using specified configuration options.
            </summary>
            <param name="stream">The stream from which the PDF document to be read.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF data.</param>
            <param name="options">The configuration options.</param>
        </member>
        <member name="E:BitMiracle.Docotic.Pdf.PdfDocument.Error">
            <summary>
            Occurs when the library detects an error in the PDF document structures and/or when
            the library can't process the PDF properly for some reason. It's a good idea to
            send all documents for which this event occurs to Bit Miracle.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Version">
            <summary>
            Gets the version of the PDF specification to which the file conforms.
            </summary>
            <value>The version of the PDF specification to which the file conforms.</value>
            <remarks>By default, PDF documents created by the library correspond to
            <see cref="F:BitMiracle.Docotic.Pdf.PdfVersion.Pdf13" /> version.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Info">
            <summary>
            Gets the interface for the document metadata.
            </summary>
            <value>The interface for the document metadata.</value>
            <remarks>
                <para>This property provides access to the basic PDF document metadata
            properties defined by PDF standard.
            </para>
                <para>
            Please use <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata" /> property to access larger set of metadata
            properties defined by XMP standard. You may also add custom metadata
            properties using <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata" /> property.
            </para>
                <para>
            This interface defines the same properties as the <see cref="T:BitMiracle.Docotic.Pdf.XmpPdfSchema" />
            class.
            </para>
                <para>
            By default, the library will synchronize values setup through this and 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata" /> properties before saving document. Please take a look
            at <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.MetadataSyncMode" /> property for more
            information about how the library will synchronize the values.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Metadata">
            <summary>
            Gets the XMP metadata attached to the document.
            </summary>
            <value>The XMP metadata attached to the document.</value>
            <remarks>
                <para>This property provides access to metadata properties defined by
            XMP standard.
            </para>
                <para>
            Please use <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info" /> property to access basic PDF document
            properties defined by PDF standard.
            </para>
                <para>
            Please note that setting any of the XMP metadata properties will cause
            document to be saved using at least version 1.4 of the PDF standard.
            </para>
                <para>
            By default, the library will synchronize values setup through this and 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info" /> properties before saving document. Please take a look
            at <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.MetadataSyncMode" /> property for more
            information about how the library will synchronize the values.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.IsLinearized">
            <summary>
            Gets a value indicating whether this document is linearized (optimized for
            fast viewing on the web).
            </summary>
            <value>
                <c>true</c> if this document is linearized (optimized for fast viewing
            on the web); otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>This value is read-only and useful as indicator only. Please use 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.Linearize" /> property (available via 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SaveOptions" /> property) if you want to produce
            linearized PDF files with Docotic.Pdf.</para>
                <para>
            Linearization (sometimes called Fast Web View by Adobe) restructures a PDF
            document for page-at-a-time downloading (byte-serving) from web servers.
            </para>
                <para>
            A linearized (or a Fast Web View optimized) PDF file is a file that has been
            organized in a special way to enable efficient incremental access in a
            network environment. The file is valid PDF in all respects, and is
            compatible with all existing viewers and other PDF applications. Enhanced
            viewer applications can recognize that a PDF file has been linearized and
            can take advantage of that organization (as well as added hint information)
            to enhance viewing performance. This is especially important with large
            documents that can take a long time to download from a server.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.AutoCreateUriActions">
            <summary>
            Gets or sets a value indicating whether to check each text string
            drawn with <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" />
            or <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> for
            URIs and create <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" />s for each found URI.
            </summary>
            <value>
                <c>true</c> if to check each drawn text string for URIs and create
            <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" />s for each found URI;
            otherwise, <c>false</c>.
            </value>
            <remarks>Default value: <c>false</c>.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.SaveOptions">
            <summary>
            Gets the save settings (compression, optimizations and the like).
            </summary>
            <remarks>
            These settings affect properties of PDF files produced by the library.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Pages">
            <summary>
            Gets the collection of pages in this document.
            </summary>
            <value>The collection of pages in this document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.PageLabels">
            <summary>
            Gets the collection of page labeling ranges in this document.
            </summary>
            <value>The collection of page labeling ranges in this document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.PageCount">
            <summary>
            Gets the number of pages in this document.
            </summary>
            <value>The number of pages in this document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.OnOpenDocument">
            <summary>
            Gets or sets the action to be performed when the document is opened.
            </summary>
            <value>The action to be performed when the document is opened.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedScripts">
            <summary>
            Gets the collection of shared JavaScript actions in this document.
            </summary>
            <remarks>
            When the document is opened, all actions in this collection get executed.
            This may be used to define JavaScript functions available for use by other
            scripts in the document.
            </remarks>
            <value>The collection of shared JavaScript actions in this document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.OutlineRoot">
            <summary>
            Gets the document outline root.
            </summary>
            <value>The document outline root.</value>
            <remarks>The document outline consists of a tree-structured
            hierarchy of outline items (sometimes called bookmarks), which
            serve as a visual table of contents to display the document's
            structure to the user.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.InitialView">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" /> to open when the
            document is opened.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" /> to open when the
            document is opened.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.ViewerPreferences">
            <summary>
            Gets the interface for the viewer preferences of this document.
            </summary>
            <value>The interface for the viewer preferences of this
            document.</value>
            <remarks>The viewer preferences specify the way the document
            is to be displayed on the screen by a PDF viewer application.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.PageLayout">
            <summary>
            Gets or sets the page layout to be used when the document is opened
            by a PDF viewer application.
            </summary>
            <value>The page layout to be used when the document is opened by
            a PDF viewer application.</value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfPageLayout.Default" /></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.PageMode">
            <summary>
            Gets or sets how the document should be displayed when opened
            by a PDF viewer application.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPageMode" /> value indicating how the
            document should be displayed when opened by a PDF
            viewer application.</value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfPageMode.UseNone" /></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword">
            <summary>
            Gets or sets the owner password for the document.
            </summary>
            <value>The owner password for the document.</value>
            <remarks>Opening the document with the correct owner password
            (assuming it is not the same as the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" />)
            allows full (owner) access to the document. This unlimited access
            includes the ability to change the document's passwords and
            access permissions.<br /><br />
            Setting <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" /> or
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" /> property to a non-empty string causes the
            document to be saved encrypted.<br /><br />
            Setting <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" />
            property to the empty string causes the document to be saved
            unencrypted.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword">
            <summary>
            Gets or sets the user password for the document.
            </summary>
            <value>The user password for the document.</value>
            <remarks>Opening the document with the correct user password
            (or opening the document that does not have a user password) allows
            additional operations to be performed according to the user access
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Permissions" />.<br /><br />
            Setting <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" /> or
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" /> property to a non-empty string causes the
            document to be saved encrypted.<br /><br />
            Setting <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" />
            property to the empty string causes the document to be saved
            unencrypted.<br /><br />
            If the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" /> password is set and the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" /> is not then document will be saved
            with the same value for the user and owner password.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Encryption">
            <summary>
            Gets or sets encryption algorithm for the current document.
            </summary>
            <value>The encryption algorithm for the current document.</value>
            <remarks>
                <para>
            After opening an existing document this property returns the encryption algorithm
            that was used when the document was created.
            </para>
                <para>
            Setting this property selects the encryption algorithm to use when saving the document.
            </para>
                <para>
            Document will be encrypted only if at least one of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" />
            and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" /> properties is set to a non-empty string.
            </para>
                <para>
            To enable password dialog on document opening, the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.UserPassword" /> property
            must be set to a non-empty string. Setting a non-empty string to the 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.OwnerPassword" /> property only will cause document to be encrypted
            but no password will be needed to open the document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Permissions">
            <summary>
            Gets the interface for the document access permissions.
            </summary>
            <value>The document access permissions.</value>
            <remarks>The document access permissions control user access to
            various operations with the encrypted document.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.HasSignaturePermissions">
            <summary>
            Gets a value indicating whether this document has digital signature permissions.
            </summary>
            <value>A value indicating whether this document signature permissions.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments">
            <summary>
            Gets the collection of document-level attachments.
            </summary>
            <value>The collection of document-level attachments.</value>
            <remarks>
                <para>
            Document can contain attachments not added to this collection. Such attachment are
            used in file attachment annotations and can be accessed through
            PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Widgets" /> property.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.Layers">
            <summary>
            Gets the collection of layers (also known as optional content groups) in this document.
            </summary>
            <value>
            The collection layers (also known as optional content groups) in this document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocument.NeedAppearances">
            <summary>
            Gets or sets a value indicating whether the viewing application should construct 
            appearances of all controls and widgets in this document.
            </summary>
            <value>
                <c>true</c>if the viewing application should construct appearances of all
            controls and widgets in this document; <c>false</c> otherwise.</value>
            <remarks>
                <para>Default value: false</para>
                <para>
            Settings this value does nothing if document does not contain widgets and controls.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.DocumentsAreEqual(System.String,System.String,System.String)">
            <summary>
            Compares the data and structure of two PDF documents.
            </summary>
            <param name="firstFile">The first PDF document to compare.</param>
            <param name="secondFile">The second PDF document to compare.</param>
            <param name="password">The password that unlocks PDF file with
            applied password security.</param>
            <returns>
                <c>true</c> if documents are equal; otherwise <c>false</c></returns>
            <remarks>This method is useful for regression tests when you compare
            two versions of the same document.<br /><br />
            Password specified by the <paramref name="password" /> parameter
            is used for both files (it's assumed that both files have the same
            password set or both files have no password set). Please use
            empty string for <paramref name="password" /> parameter
            if files being compared are not protected with password.<br /><br />
            Differences in CreationDate and ModifiedDate properties, document
            metadata and file trailer IDs of document being compared do not
            get taken into account.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.DocumentsAreEqual(System.Byte[],System.Byte[],System.String)">
            <summary>
            Compares the data and structure of two PDF documents.
            </summary>
            <param name="firstDocument">The buffer to read first PDF document to compare from.</param>
            <param name="secondDocument">The buffer to read second PDF document to compare from.</param>
            <param name="password">The password that unlocks PDF document with
            applied password security.</param>
            <returns>
                <c>true</c> if documents are equal; otherwise <c>false</c></returns>
            <remarks>This method is useful for regression tests when you compare
            two versions of the same document.<br /><br />
            Password specified by the <paramref name="password" /> parameter
            is used for both documents (it's assumed that both documents have the same
            password set or both documents have no password set). Please use
            empty string for <paramref name="password" /> parameter
            if documents being compared are not protected with password.<br /><br />
            Differences in CreationDate and ModifiedDate properties, document
            metadata and file trailer IDs of document being compared do not
            get taken into account.
            </remarks>
            <overloads>Compares the data and structure of two PDF documents.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.DocumentsAreEqual(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Compares the data and structure of two PDF documents.
            </summary>
            <param name="firstDocument">The stream to read first PDF document to compare from.</param>
            <param name="secondDocument">The stream to read second PDF document to compare from.</param>
            <param name="password">The password that unlocks PDF document with
            applied password security.</param>
            <returns>
                <c>true</c> if documents are equal; otherwise <c>false</c></returns>
            <remarks>This method is useful for regression tests when you compare
            two versions of the same document.<br /><br />
            Password specified by the <paramref name="password" /> parameter
            is used for both documents (it's assumed that both documents have the same
            password set or both documents have no password set). Please use
            empty string for <paramref name="password" /> parameter
            if documents being compared are not protected with password.<br /><br />
            Differences in CreationDate and ModifiedDate properties, document
            metadata and file trailer IDs of document being compared do not
            get taken into account.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.DocumentsAreEqual(System.IO.Stream,System.IO.Stream,System.String,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Compares the data and structure of two PDF documents using specified configuration options.
            </summary>
            <param name="firstDocument">The stream to read first PDF document to compare from.</param>
            <param name="secondDocument">The stream to read second PDF document to compare from.</param>
            <param name="password">The password that unlocks PDF document with
            applied password security.</param>
            <param name="options">The configuration options.</param>
            <returns>
                <c>true</c> if documents are equal; otherwise <c>false</c></returns>
            <remarks>This method is useful for regression tests when you compare
            two versions of the same document.<br /><br />
            Password specified by the <paramref name="password" /> parameter
            is used for both documents (it's assumed that both documents have the same
            password set or both documents have no password set). Please use
            empty string for <paramref name="password" /> parameter
            if documents being compared are not protected with password.<br /><br />
            Differences in CreationDate and ModifiedDate properties, document
            metadata and file trailer IDs of document being compared do not
            get taken into account.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.IsPasswordProtected(System.String)">
            <summary>
            Determines whether the PDF document is password protected.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
            <returns>
                <c>true</c> if PDF document is password protected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.IsPasswordProtected(System.Byte[])">
            <summary>
            Determines whether the PDF document is password protected.
            </summary>
            <param name="documentBytes">The buffer to read PDF document from.</param>
            <returns>
                <c>true</c> if PDF document is password protected; otherwise, <c>false</c>.
            </returns>
            <overloads>Determines whether the PDF document is password protected.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.IsPasswordProtected(System.IO.Stream)">
            <summary>
            Determines whether the PDF document is password protected.
            </summary>
            <param name="documentStream">The stream to read PDF document from.</param>
            <returns>
                <c>true</c> if PDF document is password protected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.IsPasswordProtected(System.IO.Stream,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Determines whether the PDF document is password protected using specified
            configuration options.
            </summary>
            <param name="documentStream">The stream to read PDF document from.</param>
            <param name="options">The configuration options.</param>
            <returns>
                <c>true</c> if PDF document is password protected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Dispose">
            <summary>
            Frees and releases all resources allocated by this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Open(System.String)">
            <summary>
            Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> with contents
            of existing PDF file with the specified name.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Open(System.String,System.String)">
            <summary>
            Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> with contents
            of existing PDF file with the specified name.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF file.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Open(System.IO.Stream)">
            <summary>
            Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> with contents
            read from specified stream with PDF data.
            </summary>
            <param name="stream">The stream to read PDF data from.</param>
            <overloads>Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />
            with contents of existing PDF file, stream or buffer.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Open(System.IO.Stream,System.String)">
            <summary>
            Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> with contents
            read from specified stream with PDF data.
            </summary>
            <param name="stream">The stream to read PDF data from.</param>
            <param name="password">The user or owner password that unlocks
            the PDF data read from stream.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Open(System.Byte[])">
            <summary>
            Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> with contents
            read from specified buffer with PDF data.
            </summary>
            <param name="buffer">The buffer to read PDF data from.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Open(System.Byte[],System.String)">
            <summary>
            Replaces the contents of this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> with contents
            read from specified buffer with PDF data.
            </summary>
            <param name="buffer">The buffer to read PDF data from.</param>
            <param name="password">The user or owner password that unlocks
            the PDF data read from buffer.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Append(System.String)">
            <summary>
            Appends the contents of existing PDF file with the specified name
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Append(System.String,System.String)">
            <summary>
            Appends the contents of existing PDF file with the specified name
            to this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="fileName">The name of the existing PDF file.</param>
            <param name="password">The user or owner password that unlocks
            existing PDF file.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Append(System.IO.Stream)">
            <summary>
            Appends the contents of specified stream with PDF data to
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="stream">The stream to read PDF data from.</param>
            <overloads>Appends the contents of existing PDF file, stream or
            buffer to this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Append(System.IO.Stream,System.String)">
            <summary>
            Appends the contents of specified stream with PDF data to
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="stream">The stream to read PDF data from.</param>
            <param name="password">The user or owner password that unlocks
            the PDF data read from stream.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Append(System.Byte[])">
            <summary>
            Appends the contents of specified buffer with PDF data to
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="buffer">The buffer to read PDF data from.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Append(System.Byte[],System.String)">
            <summary>
            Appends the contents of specified buffer with PDF data to
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="buffer">The buffer to read PDF data from.</param>
            <param name="password">The user or owner password that unlocks
            the PDF data read from buffer.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Save(System.String)">
            <summary>
            Saves the document to the file with the specified name.
            </summary>
            <param name="fileName">The name of the file to save document to.</param>
            <overloads>Saves the document to a file or a stream.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream.
            </summary>
            <param name="stream">The stream to save document to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.Clear">
            <summary>
            Removes all document content and resets the document to the 
            default state.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetPage(System.Int32)">
            <summary>
            Gets the page with the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> with specified index.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.IndexOf(BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Gets the index of page in the document page collection.
            </summary>
            <param name="page">The page.</param>
            <returns>The index of specified page</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddPage">
            <summary>
            Adds new page to the end of the collection of document pages.
            </summary>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.InsertPage(System.Int32)">
            <summary>
            Inserts new page into the collection of document pages at the
            specified index.
            </summary>
            <param name="index">The zero-based index at which new page
            should be inserted.</param>
            <returns>The newly inserted <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePage(System.Int32)">
            <summary>
            Removes the page at the specified index of the collection of
            document pages.
            </summary>
            <param name="index">The zero-based index of the page to
            remove.</param>
            <overloads>Removes the page from the collection of document pages.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePage(BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Removes the specified page from the collection of document pages.
            </summary>
            <param name="page">The page to remove.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePages(System.Int32[])">
            <summary>
            Removes pages with specified indexes from the collection of
            document pages.
            </summary>
            <param name="indexes">The array of zero-based indexes
            of the pages to remove.</param>
            <overloads>Removes pages from the collection of document
            pages.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePages(BitMiracle.Docotic.Pdf.PdfPage[])">
            <summary>
            Removes specified pages from the collection of document pages.
            </summary>
            <param name="pages">The array of pages to remove.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePages(System.Int32)">
            <summary>
            Removes a range of pages from the collection of document pages.
            </summary>
            <param name="startIndex">The zero-based starting index of
            pages to remove.</param>
            <remarks>The pages are removed from the page at specified starting
            index to the end of the collection of document pages.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePages(System.Int32,System.Int32)">
            <summary>
            Removes a range of pages from the collection of document pages.
            </summary>
            <param name="index">The zero-based starting index of the range
            of pages to remove.</param>
            <param name="count">The number of pages to remove.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages(System.Int32[])">
            <summary>
            Copies pages with specified indexes into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="indexes">The array of zero-based indexes of the pages to copy.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains copied pages.
            </returns>
            <remarks>
                <para>
            This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages" /> if you want to
            extract pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            copied pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
            <overloads>
            Copy pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages(BitMiracle.Docotic.Pdf.PdfPage[])">
            <summary>
            Copies specified pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged.
            </summary>
            <param name="pages">The array of pages to copy.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains copied pages.
            </returns>
            <remarks>
                <para>
            This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages" /> if you want to
            extract pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            copied pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages(System.Int32,System.Int32)">
            <summary>
            Copies a range of pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged.
            </summary>
            <param name="index">The zero-based starting index of the range
            of pages to copy.</param>
            <param name="count">The number of pages to copy.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains copied pages.
            </returns>
            <remarks>
                <para>
            This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages" /> if you want to
            extract pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            copied pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Copies a range of pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> using specified
            configuration options. This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged. 
            </summary>
            <param name="index">The zero-based starting index of the range
            of pages to copy.</param>
            <param name="count">The number of pages to copy.</param>
            <param name="options">The configuration options.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains copied pages.
            </returns>
            <remarks>
                <para>
            This <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> remains unchanged.
            </para>
                <para>
            The new document will use the specified configuration options.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages" /> if you want to
            extract pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            copied pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages(System.Int32[])">
            <summary>
            Extracts pages with specified indexes into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="indexes">The array of zero-based indexes
            of the pages to extract.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains extracted pages.
            </returns>
            <remarks>
                <para>
            Extracted pages will be deleted from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            If <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> contains a single page then the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> will be thrown.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages" /> if you want to just
            copy pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            extracted pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
            <overloads>
            Extract pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages(BitMiracle.Docotic.Pdf.PdfPage[])">
            <summary>
            Extracts specified pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="pages">The array of pages to extract.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains extracted pages.
            </returns>
            <remarks>
                <para>
            Extracted pages will be deleted from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            If <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> contains a single page then the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> will be thrown.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages" /> if you want to just
            copy pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            extracted pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages(System.Int32,System.Int32)">
            <summary>
            Extracts a range of pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="index">The zero-based starting index of the range
            of pages to extract.</param>
            <param name="count">The number of pages to extract.</param>
            <returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains extracted pages.
            </returns>
            <remarks>
                <para>
            Extracted pages will be deleted from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            If <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> contains a single page then the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> will be thrown.
            </para>
                <para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages" /> if you want to just
            copy pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para>
                <para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            extracted pages reference unused resources such as fonts, images, patterns.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ExtractPages(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfConfigurationOptions)">
            <summary>
            Extracts a range of pages into new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> using specified
            configuration options.
            </summary>
            <param name="index">The zero-based starting index of the range
            of pages to extract.</param>
            <param name="count">The number of pages to extract.</param>
            /// <param name="options">The configuration options.</param><returns>
            A new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> that contains extracted pages.
            </returns><remarks><para>
            Extracted pages will be deleted from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para><para>
            The new document will use the specified configuration options.
            </para><para>
            If <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> contains a single page then the <see cref="T:BitMiracle.Docotic.Pdf.PdfException" />
            will be thrown.
            </para><para>
            Use <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.CopyPages" /> if you want to just
            copy pages from this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </para><para>
            Try <see cref="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources" />
            method on the new document. This method can reduce document size in cases when the
            extracted pages reference unused resources such as fonts, images, patterns.
            </para></remarks></member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.MovePage(System.Int32,System.Int32)">
            <summary>
            Changes position of the page within the collection of document pages.
            </summary>
            <param name="srcIndex">Index of the page to move.</param>
            <param name="destIndex">The index to move page to.</param>
            <remarks>
                <para>
            The page being moved is always placed before page with index specified by
            <paramref name="destIndex" /> parameter. After that the collection of document
            pages is compacted by shifting pages towards the beginning of the
            collection.
            </para>
                <para>
            If index specified by <paramref name="destIndex" /> parameter is equal to the
            length of the collection then page will be moved to the end of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.MovePages(System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes positions of all pages in specified range within the collection
            of document pages.
            </summary>
            <param name="srcIndex">Index of the first page in the range.</param>
            <param name="count">The number of consecutive pages in the range.</param>
            <param name="destIndex">The index at which first page in range should be
            placed.</param>
            <remarks>
                <para>
            The pages being moved are always placed before page with index specified by
            <paramref name="destIndex" /> parameter. After that the collection of document
            pages is compacted by shifting pages towards the beginning of the
            collection.
            </para>
                <para>
            If index specified by <paramref name="destIndex" /> parameter is equal to the
            length of the collection then pages will be moved to the end of the collection.
            </para>
            </remarks>
            <overloads>Changes positions of each specified page within the collection
            of document pages.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.MovePages(System.Int32[],System.Int32)">
            <summary>
            Changes positions of all pages specified by their indexes within the
            collection of document pages.
            </summary>
            <param name="indexes">The indexes of the pages to move.</param>
            <param name="destIndex">The index at which first page should be placed.</param>
            <remarks>
                <para>
            The pages being moved are always placed before page with index specified by
            <paramref name="destIndex" /> parameter. After that the collection of document
            pages is compacted by shifting pages towards the beginning of the
            collection.
            </para>
                <para>
            If index specified by <paramref name="destIndex" /> parameter is equal to the
            length of the collection then pages will be moved to the end of the collection.
            </para>
                <para>
            The array of indexes specified by <paramref name="indexes" /> must not contain
            duplicate entries.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SwapPages(System.Int32,System.Int32)">
            <summary>
            Interchanges positions of two pages.
            </summary>
            <param name="firstIndex">The index of the first page.</param>
            <param name="secondIndex">The index of the second page.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveUnusedResources">
            <summary>
            Removes references to resources such as fonts, xobjects, images, patterns.
            </summary>
            <remarks>
                <para>
            This method helps to reduce file size in cases when document contains pages or XObjects
            with unused resources.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetText">
            <summary>
            Retrieves all text drawn on all pages of the document in plain
            text format.
            </summary>
            <returns>All text drawn on all pages of the document in plain
            text format.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetText(BitMiracle.Docotic.Pdf.PdfTextExtractionOptions)">
            <summary>
            Retrieves all text drawn on all pages of the document according to specified options.
            </summary>
            <param name="options">The text extraction options.</param>
            <returns>
            All text drawn on all pages of the document according to specified options.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetTextWithFormatting">
            <summary>
            Retrieves all text drawn on all pages of the document formatted as seen
            in a PDF viewer.
            </summary>
            <returns>All text drawn on all pages of the document formatted as seen 
            in a PDF viewer.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetFonts">
            <summary>
            Returns the enumerator that iterates through the collection of document fonts.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            document fonts.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ReplaceDuplicateFonts">
            <summary>
            Replaces all duplicate fonts with the first duplicate.
            </summary>
            <remarks>
                <para>
            This method finds all groups of font duplicates and replaces all fonts from each
            group of duplicates with the first item of the group.
            </para>
                <para>
            This method gives good results for documents which were incrementally updated or
            created by a merge of several documents with the same fonts.
            </para>
                <para>
            To actually reduce output file size, this method requires removal of unused objects
            afterwards. Because of this, SaveOptions.<see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.RemoveUnusedObjects" />
            property will be set to <c>true</c> automatically when using this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds the new font with specified properties to the end of the
            collection of document fonts.
            </summary>
            <param name="fontFace">The name of the font face.</param>
            <param name="bold">if set to <c>true</c> then added font
            will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font
            will be italic.</param>
            <param name="underline">if set to <c>true</c> then text drawn 
            with added font will be underlined.</param>
            <param name="strikeout">if set to <c>true</c> then text drawn
            with added font will be stroked out.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> or <c>null</c> if there is no font
            with specified face installed.</returns>
            <remarks>If requested font does not have bold or italic
            version then bold or italic version will be synthesized when
            needed.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.String,System.Drawing.FontStyle)">
            <summary>
            Adds the new font with specified properties to the end of the
            collection of document fonts.
            </summary>
            <param name="fontFace">The name of the font face.</param>
            <param name="fontStyle">The <see cref="T:System.Drawing.FontStyle" /> of the new
            font.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> or <c>null</c> if there is no font
            with specified face installed.</returns>
            <remarks>If requested font does not have bold or italic
            version then bold or italic version will be synthesized
            when needed.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.Drawing.Font)">
            <summary>
            Adds the new font with the properties of the specified
            <see cref="T:System.Drawing.Font" /> to the end of the collection of document fonts.
            </summary>
            <param name="font">The existing <see cref="T:System.Drawing.Font" /> from which to
            create the new <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.String)">
            <summary>
            Adds the new font with specified face name to the end of the
            collection of document fonts.
            </summary>
            <param name="fontFace">The name of the font face.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> or <c>null</c> if there is no font
            with specified face installed.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(BitMiracle.Docotic.Pdf.PdfBuiltInFont,System.Boolean,System.Boolean)">
            <summary>
            Adds the new instance of built-in font with specified properties
            to the end of the collection of document fonts.
            </summary>
            <param name="font">The <see cref="T:BitMiracle.Docotic.Pdf.PdfBuiltInFont" /> value that
            specifies the font to add.</param>
            <param name="underline">if set to <c>true</c> then text drawn
            with added font will be underlined.</param>
            <param name="strikeout">if set to <c>true</c> then text drawn
            with added font will be stroked out.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <overloads>Adds the new font to the end of the collection of
            document fonts.</overloads>
            <remarks>
                <para>
            Built-in fonts support only Latin character set and encoding. You won't be able to use
            them with Unicode text.
            </para>
                <para>
            If requested built-in font does not have bold or italic
            version then bold or italic version will be synthesized when
            needed.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(BitMiracle.Docotic.Pdf.PdfBuiltInFont)">
            <summary>
            Adds the new instance of built-in font to the end of the collection
            of document fonts.
            </summary>
            <param name="font">The <see cref="T:BitMiracle.Docotic.Pdf.PdfBuiltInFont" /> value that
            specifies the font to add.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>
                <para>
            Built-in fonts support only Latin character set and encoding. You won't be able to use
            them with Unicode text.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new font with specified properties using provided font bytes and
            adds the new font to the end of the collection of document fonts.
            </summary>
            <param name="fontBytes">The font bytes.</param>
            <param name="bold">if set to <c>true</c> then added font will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font will be italic.</param>
            <param name="underline">if set to <c>true</c> then text drawn
            with added font will be underlined.</param>
            <param name="strikeout">if set to <c>true</c> then text drawn
            with added font will be stroked out.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>If requested font does not have bold or italic version then bold or
            italic version will be synthesized when needed.<br /><br />
            Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Creates a new font with specified properties using provided font bytes and
            adds the new font to the end of the collection of document fonts.
            </summary>
            <param name="fontBytes">The font bytes.</param>
            <param name="bold">if set to <c>true</c> then added font will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font will be italic.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>If requested font does not have bold or italic version then bold or
            italic version will be synthesized when needed.<br /><br />
            Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.Byte[])">
            <summary>
            Creates a new font using provided font bytes and adds the new font to the
            end of the collection of document fonts.
            </summary>
            <param name="fontBytes">The buffer with the font bytes.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new font with specified properties using provided stream with font
            bytes and adds the new font to the end of the collection of document fonts.
            </summary>
            <param name="fontStream">The stream with the font bytes.</param>
            <param name="bold">if set to <c>true</c> then added font will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font will be italic.</param>
            <param name="underline">if set to <c>true</c> then text drawn with added
            font will be underlined.</param>
            <param name="strikeout">if set to <c>true</c> then text drawn with added
            font will be stroked out.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>If requested font does not have bold or italic version then bold or
            italic version will be synthesized when needed.<br /><br />
            Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Creates a new font with specified properties using provided stream with font
            bytes and adds the new font to the end of the collection of document fonts.
            </summary>
            <param name="fontStream">The stream with the font bytes.</param>
            <param name="bold">if set to <c>true</c> then added font will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font will be italic.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>If requested font does not have bold or italic version then bold
            or italic version will be synthesized when needed.<br /><br />
            Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFont(System.IO.Stream)">
            <summary>
            Creates a new font using provided stream with font bytes and adds the new
            font to the end of the collection of document fonts.
            </summary>
            <param name="fontStream">The stream with the font bytes.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFontFromFile(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new font with specified properties using provided font file 
            and adds the new font to the end of the collection of document fonts.
            </summary>
            <param name="fileName">The name of the font file.</param>
            <param name="bold">if set to <c>true</c> then added font will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font will be italic.</param>
            <param name="underline">if set to <c>true</c> then text drawn with added
            font will be underlined.</param>
            <param name="strikeout">if set to <c>true</c> then text drawn with added
            font will be stroked out.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <overloads>Creates a new font with specified properties using provided font
            file and adds the new font to the end of the collection of document fonts.</overloads>
            <remarks>If requested font does not have bold or italic version then bold or
            italic version will be synthesized when needed.<br /><br />
            Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFontFromFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new font with specified properties using provided font file 
            and adds the new font to the end of the collection of document fonts.
            </summary>
            <param name="fileName">The name of the font file.</param>
            <param name="bold">if set to <c>true</c> then added font will be bold.</param>
            <param name="italic">if set to <c>true</c> then added font will be italic.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>If requested font does not have bold or italic version then bold
            or italic version will be synthesized when needed.<br /><br />
            Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddFontFromFile(System.String)">
            <summary>
            Creates a new font using provided font file and adds the new font to the
            end of the collection of document fonts.
            </summary>
            <param name="fileName">The name of the font file.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />.</returns>
            <remarks>Only TrueType and Type1 font files are supported by this method.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetActions">
            <summary>
            Returns the enumerator that iterates through the collection of actions in this document.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            actions in this document.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateGoToPageAction(BitMiracle.Docotic.Pdf.PdfPage,System.Double)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" /> with specified
            properties and adds it to the collection of document actions.
            </summary>
            <param name="page">The page of the document to be displayed as
            the result of the action.</param>
            <param name="topOffset">
            The vertical coordinate of the page that should be positioned at the top edge
            of the window when the page is displayed.
            The offset is relative to the top edge of the page. I.e. offset 0 means
            "display page starting from the top edge".
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" />.
            </returns>
            <overloads>Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" /> with
            specified properties and adds it to the collection of document
            actions.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateGoToPageAction(System.Int32,System.Double)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" /> with specified
            properties and adds it to the collection of document actions.
            </summary>
            <param name="pageIndex">The index of the page to be displayed as
            the result of the action.</param>
            <param name="topOffset">
            The vertical coordinate of the page that should be positioned at the top edge
            of the window when the page is displayed.
            The offset is relative to the top edge of the page. I.e. offset 0 means
            "display page starting from the top edge".
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateRemoteGoToPageAction(System.String,System.Int32)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction" /> with specified
            properties and adds it to the collection of document actions.
            </summary>
            <param name="path">The path to remote PDF document.</param>
            <param name="pageIndex">The index of the page in the remote document to be
            displayed as the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateHyperlinkAction(System.Uri)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" /> with specified
            uniform resource identifier (URI) to resolve and adds it to the
            collection of document actions.
            </summary>
            <param name="uri">The uniform resource identifier (URI)
            to resolve as the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateHyperlinkAction(System.String)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" /> with specified
            uniform resource identifier (URI) to resolve and adds it to the
            collection of document actions.
            </summary>
            <param name="uri">The uniform resource identifier (URI)
            to resolve as the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateJavaScriptAction(System.String)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> with specified
            script contents and adds it to the collection of document actions.
            </summary>
            <param name="scriptContents">The text of the JavaScript script to
            be executed as the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateHideAction(System.Boolean)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfHideAction" /> and adds it to the
            collection of document actions.
            </summary>
            <param name="hide">The value indicating whether to hide
            (if set to <c>true</c>) or show (if set to <c>false</c>) any widget
            associated later with the action as the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfHideAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateResetFormAction">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfResetFormAction" /> and adds it to the
            collection of document actions.
            </summary>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfResetFormAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateImportDataAction(System.String)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfImportDataAction" /> and adds it to the
            collection of document actions.
            </summary>
            <param name="fileName">The name of an FDF file from which to
            import the data as the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfImportDataAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateSubmitFormAction(System.Uri)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" /> with specified 
            properties and adds it to the collection of document actions.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the
            script at the Web server that will process the data submitted as
            the result of the action.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />.
            </returns>
            <overloads>Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" /> with
            specified properties and adds it to the collection of
            document actions.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateSubmitFormAction(System.Uri,System.Boolean)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" /> with specified
            properties and adds it to the collection of document actions.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the
            script at the Web server that will process the data submitted as
            the result of the action.</param>
            <param name="sendEmptyFields">The value indicating whether created
            action should submit controls without a value.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateSubmitFormAction(System.Uri,System.Boolean,BitMiracle.Docotic.Pdf.PdfSubmitFormat)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" /> with specified
            properties and adds it to the collection of document actions.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the
            script at the Web server that will process the data submitted as
            the result of the action.</param>
            <param name="sendEmptyFields">The value indicating whether created
            action should submit controls without a value.</param>
            <param name="submitFormat">The submit format that created action
            should use.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetWidgets">
            <summary>
            Returns the enumerator that iterates through the collection of document widgets
            (annotations and controls).
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            document widgets (annotations and controls).</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveWidget(BitMiracle.Docotic.Pdf.PdfWidget)">
            <summary>
            Removes the specified widget from the document.
            </summary>
            <param name="widget">The widget to remove from the document.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetControl(System.String)">
            <summary>
            Gets the control by name.
            </summary>
            <param name="name">The name of the control to get.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfControl" /> with specified name.</returns>
            <remarks>This method performs search by values of <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.FullName" /> 
            and <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Name" /> properties</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetControls">
            <summary>
            Returns the enumerator that iterates through the collection of document controls.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            document controls.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.FlattenControls">
            <summary>
            Flattens all controls in the document. In effect, replaces controls with their
            appearance. Putting it differently, merges controls down on to their respective pages.
            </summary>
            <remarks>
                <para>
            Flattening locks controls from editing. Flattening can significantly reduce file
            size if <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.RemoveUnusedObjects" /> property is set to <c>true</c>.
            </para>
                <para>
            This method enumerates all controls in the document and flattens every control in 2 steps:
            <ol><li>
            Draws control on its parent page using text and vector graphics operators.
            </li><li>
            Removes control from the PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Controls" />
            collection of its parent page.
            </li></ol></para>
                <para>
            This method can change graphics state of the page. To avoid possible side effects,
            call the method right before saving of the document.
            </para>
                <para>
            Flattening of signature fields without appearance stream is not supported yet.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateFileAttachment(System.String)">
            <summary>
            Creates attachment from the specified file and returns file specification for the
            attachment.
            </summary>
            <param name="filePath">The name of the file to create attachment from.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" /> for the attachment.
            </returns>
            <remarks>
                <para>
            You can add returned file specifications to collection of document-level attachments 
            (see PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments" />)
            or use it in a file attachment annotation (see
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />).
            </para>
            </remarks>
            <overloads>
            Creates attachment from the specified file, stream or bytes and returns file
            specification for the attachment.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateFileAttachment(System.String,System.String)">
            <summary>
            Creates attachment from the specified file and returns file specification for the
            attachment.
            </summary>
            <param name="filePath">The name of the file to create attachment from.</param>
            <param name="description">A description for the attachment. Can be <c>null</c>.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" /> for the attachment.
            </returns>
            <remarks>
                <para>
            You can add returned file specifications to collection of document-level attachments 
            (see PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments" />)
            or use it in a file attachment annotation (see
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />).
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateFileAttachment(System.Byte[],System.String)">
            <summary>
            Creates attachment from provided bytes and returns file specification for the
            attachment.
            </summary>
            <param name="buffer">The bytes to create attachment from.</param>
            <param name="specification">The file specification string.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" /> for the attachment.
            </returns>
            <remarks>
                <para>
            You can add returned file specifications to collection of document-level attachments 
            (see PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments" />)
            or use it in a file attachment annotation (see
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />).
            </para>
                <para>
            The file specification string specified by the <paramref name="specification" />
            parameter can not be <c>null</c>. Usually it is the name of a file specification.
            See PdfFileSpecification.<see cref="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Specification" />
            for more detail.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateFileAttachment(System.Byte[],System.String,System.String)">
            <summary>
            Creates attachment from provided bytes and returns file specification for the
            attachment.
            </summary>
            <param name="buffer">The bytes to create attachment from.</param>
            <param name="specification">The file specification string.</param>
            <param name="description">A description for the attachment. Can be <c>null</c>.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" /> for the attachment.
            </returns>
            <remarks>
                <para>
            You can add returned file specifications to collection of document-level attachments 
            (see PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments" />)
            or use it in a file attachment annotation (see
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />).
            </para>
                <para>
            The file specification string specified by the <paramref name="specification" />
            parameter can not be <c>null</c>. Usually it is the name of a file specification.
            See PdfFileSpecification.<see cref="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Specification" />
            for more detail.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateFileAttachment(System.IO.Stream,System.String)">
            <summary>
            Creates attachment from contents of provided stream and returns file specification for
            the attachment.
            </summary>
            <param name="stream">The stream to create attachment from.</param>
            <param name="specification">The file specification string.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" /> for the attachment.
            </returns>
            <remarks>
                <para>
            You can add returned file specifications to collection of document-level attachments 
            (see PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments" />)
            or use it in a file attachment annotation (see
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />).
            </para>
                <para>
            The file specification string specified by the <paramref name="specification" />
            parameter can not be <c>null</c>. Usually it is the name of a file specification.
            See PdfFileSpecification.<see cref="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Specification" />
            for more detail.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateFileAttachment(System.IO.Stream,System.String,System.String)">
            <summary>
            Creates attachment from contents of provided stream and returns file specification for
            the attachment.
            </summary>
            <param name="stream">The stream to create attachment from.</param>
            <param name="specification">The file specification string.</param>
            <param name="description">A description for the attachment. Can be <c>null</c>.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" /> for the attachment.
            </returns>
            <remarks>
                <para>
            You can add returned file specifications to collection of document-level attachments 
            (see PdfDocument.<see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SharedAttachments" />)
            or use it in a file attachment annotation (see
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />).
            </para>
                <para>
            The file specification string specified by the <paramref name="specification" />
            parameter can not be <c>null</c>. Usually it is the name of a file specification.
            See PdfFileSpecification.<see cref="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Specification" />
            for more detail.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ImportFdf(System.String)">
            <summary>
            Takes the values from the FDF document and imports them into this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="fileName">The path to FDF document.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ImportFdf(System.IO.Stream)">
            <summary>
            Takes the values from the FDF document and import them into this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="stream">The stream to read FDF data from.</param>
            <overloads>Takes the values from the FDF document and imports them into
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ImportFdf(System.Byte[])">
            <summary>
            Takes the values from the FDF document and imports them into this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <param name="buffer">The buffer to read FDF data from.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ExportFdf(System.String)">
            <summary>
            Takes the values from the controls in this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> and
            exports them into FDF document.
            </summary>
            <param name="fileName">The name of the FDF file to save form data to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ExportFdf(System.IO.Stream)">
            <summary>
            Takes the values from the controls in this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> and
            exports them into FDF document.
            </summary>
            <param name="stream">The stream to save form data to.</param>
            <overloads>Takes the values from the controls in this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> and exports them into FDF document.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetImages">
            <summary>
            Returns the enumerator that iterates through the collection of document images including
            inline images and images added to document but not yet drawn on any canvas.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            document images including inline images and images added to document but not yet drawn
            on any canvas.</returns>
            <overloads>
            Returns the enumerator that iterates through the collection of document images.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetImages(System.Boolean)">
            <summary>
            Returns the enumerator that iterates through the collection of document images including
            or excluding the inline images. The enumerator includes images added to document but not
            yet drawn on any canvas.
            </summary>
            <param name="includeInlineImages">The value indicating whether to include inline
            images in the collection of document images.</param>
            <returns>The enumerator that can be used to iterate through the collection of
            page images including or excluding the inline images. The enumerator includes images
            added to document but not yet drawn on any canvas.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.Drawing.Image)">
            <summary>
            Adds new image(s) with the data and properties of specified
            <see cref="T:System.Drawing.Image" /> to the end of the collection of document images.
            </summary>
            <param name="image">The existing <see cref="T:System.Drawing.Image" /> from which
            to create <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />(s).</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) found in
            the existing <see cref="T:System.Drawing.Image" />.</returns>
            <remarks>This method adds a new image for each frame (page) found
            in the existing <see cref="T:System.Drawing.Image" />.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.Drawing.Image,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Creates image(s) with the data and properties of specified
            <see cref="T:System.Drawing.Image" />, applies specified mask color to them and adds resulting
            image(s) to the end of the collection of document images.
            </summary>
            <param name="image">The existing <see cref="T:System.Drawing.Image" /> from which
            to create <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />(s).</param>
            <param name="maskColor">The color that masks transparent
            areas of the image(s).</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) found in the
            existing <see cref="T:System.Drawing.Image" />.</returns>
            <remarks>This method adds a new image for each frame (page) found
            in the existing <see cref="T:System.Drawing.Image" />. Mask color gets applied for
            all added images.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Creates a new image with the data and properties of specified
            <see cref="T:System.Drawing.Image" />, applies mask constructed from specified
            <see cref="T:System.Drawing.Image" /> to it and adds resulting image to the end of the
            collection of document images.
            </summary>
            <param name="image">The existing <see cref="T:System.Drawing.Image" /> from which
            to create a <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</param>
            <param name="mask">The existing <see cref="T:System.Drawing.Image" /> from which
            to create the mask for the <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</param>
            <returns>The created <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</returns>
            <remarks>Mask images with only one frame (page) are supported. 
            This method creates an image for the first frame (page) of the
            source image only.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.Byte[])">
            <summary>
            Adds new image(s) with the data and properties read from the 
            buffer with image bytes to the end of the collection of
            document images.
            </summary>
            <overloads>Adds new image(s) to the end of the collection of
            document images.</overloads>
            <param name="imageBuffer">The buffer with the image bytes from which
            to create <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />(s).</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) read from
            the buffer with image bytes.</returns>
            <remarks>This method adds a new image for each frame (page) read
            from the buffer with image bytes.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.Byte[],BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Creates image(s) with the data and properties read from the
            buffer with image bytes, applies specified mask color to them and adds
            resulting image(s) to the end of the collection of document images.
            </summary>
            <param name="imageBuffer">The buffer with the image bytes from which
            to create <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />(s).</param>
            <param name="maskColor">The color that masks transparent
            areas of the image.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) read from the
            buffer with image bytes.</returns>
            <remarks>This method adds a new image for each frame (page) read
            from the buffer with image bytes. Mask color gets applied for
            all added images.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.Byte[],System.Byte[])">
            <summary>
            Creates a new image with the data and properties read from the buffer with
            image bytes, applies mask constructed from the buffer with mask
            image bytes to it and adds resulting image to the end of the
            collection of document images.
            </summary>
            <param name="imageBuffer">The buffer with the image bytes from which
            to create a <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</param>
            <param name="maskBuffer">The buffer with the mask image bytes from
            which to create the mask for the <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</param>
            <returns>The created <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</returns>
            <remarks>Mask images with only one frame (page) are supported. 
            This method creates an image for the first frame (page) of the
            source image only.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.String)">
            <summary>
            Adds new image(s) with the data and properties read from the
            file with specified name to the end of the collection of document images.
            </summary>
            <param name="fileName">Name of the file from which to create
            <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />(s).</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) read from
            the file with specified name.</returns>
            <remarks>This method adds a new image for each frame (page) read
            from the file with specified name.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.String,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Creates image(s) with the data and properties read from the file with
            specified name, applies specified mask color to them and adds resulting
            image(s) to the end of the collection of document images.
            </summary>
            <param name="fileName">Name of the file from which to create
            <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />(s).</param>
            <param name="maskColor">The color that masks transparent
            areas of the image.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) read from
            the file with specified name.</returns>
            <remarks>This method adds a new image for each frame (page) read
            from the file with specified name. Mask color gets applied for
            all added images.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.String,System.String)">
            <summary>
            Creates a new image with the data and properties read from the file with
            specified name, applies mask read from another file with specified name to it
            and adds resulting image to the end of the collection of document images.
            </summary>
            <param name="fileName">Name of the file from which to create
            a <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</param>
            <param name="maskFileName">Name of the file from which to create
            the mask for the <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</param>
            <returns>The created <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</returns>
            <remarks>Mask images with only one frame (page) are supported. 
            This method creates an image for the first frame (page) of the
            source image only.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.IO.Stream)">
            <summary>
            Adds new image(s) with the data and properties read from the specified
            stream to the end of the collection of document images.
            </summary>
            <param name="stream">The stream with image data.</param>
            <returns>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) read from the stream.
            </returns>
            <remarks>
            This method adds a new image for each frame (page) read from the stream.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.IO.Stream,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Creates image(s) with the data and properties read from the specified stream,
            applies specified mask color to them and adds resulting image(s) to the end
            of the collection of document images.
            </summary>
            <param name="stream">The stream with image data.</param>
            <param name="maskColor">The color that masks transparent
            areas of the image.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the first frame (page) read from
            the stream.</returns>
            <remarks>This method adds a new image for each frame (page) read
            from the stream. Mask color gets applied for all added images.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates a new image with the data and properties read from the specified
            stream, applies mask read from another stream to it and adds resulting image
            to the end of the collection of document images.
            </summary>
            <param name="stream">The stream with image data.</param>
            <param name="maskStream">The stream with mask image data.</param>
            <returns>The created <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</returns>
            <remarks>Mask images with only one frame (page) are supported. 
            This method creates an image for the first frame (page) of the
            source image only.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddImage(BitMiracle.Docotic.Pdf.PdfImageFrame)">
            <summary>
            Creates a new image from specified <see cref="T:BitMiracle.Docotic.Pdf.PdfImageFrame" /> and adds it
            to the end of the collection of document images.
            </summary>
            <param name="frame">The image frame to use.</param>
            <returns>
            The created <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </returns>
            <remarks>
                <para>
            This method will load image frame data, apply all specified transformations
            and create a new <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />. The created <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />
            will be added to the collection of document images.
            </para>
                <para>
            If an image frame specified by the <paramref name="frame" /> parameter was
            already used to create an <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> then this method will throw
            an exception.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.OpenImage(System.Drawing.Image)">
            <summary>
            Opens the image and constructs a collection of its frames (pages).
            </summary>
            <param name="image">The image to open.</param>
            <returns>The collection of image frames (pages) or <c>null</c> if image
            format is unsupported.</returns>
            <remarks>
                <para>This method does not load image data and does not add images
            to the collection of document images.</para>
                <para>This method is useful if you want to add only some of the image
            frames (pages) to document or if you want to recompress image frames
            before adding them to document.</para>
                <para>Please use one of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.AddImage" /> methods to add a frame
            from collection of frames to the collection of document images.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.OpenImage(System.Byte[])">
            <summary>
            Opens the image and constructs a collection of its frames (pages).
            </summary>
            <param name="imageBuffer">The buffer with image bytes.</param>
            <returns>
            The collection of image frames (pages) or <c>null</c> if image
            format is unsupported.
            </returns>
            <overloads>Opens the image and constructs a collection of its frames (pages).</overloads>
            <remarks>
                <para>This method does not load image data and does not add images
            to the collection of document images.</para>
                <para>This method is useful if you want to add only some of the image
            frames (pages) to document or if you want to recompress image frames
            before adding them to document.</para>
                <para>Please use one of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.AddImage" /> methods to add a frame
            from collection of frames to the collection of document images.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.OpenImage(System.String)">
            <summary>
            Opens the image and constructs a collection of its frames (pages).
            </summary>
            <param name="fileName">Name of the image file.</param>
            <returns>
            The collection of image frames (pages) or <c>null</c> if image
            format is unsupported.
            </returns>
            <remarks>
                <para>This method does not load image data and does not add images
            to the collection of document images.</para>
                <para>This method is useful if you want to add only some of the image
            frames (pages) to document or if you want to recompress image frames
            before adding them to document.</para>
                <para>Please use one of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.AddImage" /> methods to add a frame
            from collection of frames to the collection of document images.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.OpenImage(System.IO.Stream)">
            <summary>
            Opens the image and constructs a collection of its frames (pages).
            </summary>
            <param name="stream">The stream with image bytes.</param>
            <returns>
            The collection of image frames (pages) or <c>null</c> if image
            format is unsupported.
            </returns>
            <remarks>
                <para>This method does not load image data and does not add images
            to the collection of document images.</para>
                <para>This method is useful if you want to add only some of the image
            frames (pages) to document or if you want to recompress image frames
            before adding them to document.</para>
                <para>Please use one of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.AddImage" /> methods to add a frame
            from collection of frames to the collection of document images.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetColorProfiles">
            <summary>
            Returns the enumerator that iterates through the collection of color profiles in this document.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            color profiles in this document.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddColorProfile(System.IO.Stream)">
            <summary>
            Adds the new ICC color profile read from specified
            stream to the end of the collection of document color profiles.
            </summary>
            <param name="stream">The stream to read color profile from.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfColorProfile" />.</returns>
            <overloads>Adds the new ICC color profile to the end
            of the collection of document color profiles.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddColorProfile(System.Byte[])">
            <summary>
            Adds the new ICC color profile to the end of the collection of document
            color profiles.
            </summary>
            <param name="profileBytes">The buffer with profile bytes.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfColorProfile" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddColorProfile(System.String)">
            <summary>
            Adds the new ICC color profile read from file with
            specified name to the end of the collection of document color profiles.
            </summary>
            <param name="fileName">The name of the file to read color
            profile from.</param>
            <returns>The newly added <see cref="T:BitMiracle.Docotic.Pdf.PdfColorProfile" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SetPdfAOutputIntent(BitMiracle.Docotic.Pdf.PdfColorProfile)">
            <summary>
            Sets the PDF/A output intent for this document.
            </summary>
            <param name="colorProfile">An ICC color profile from which
            to create PDF/A output intent for this document.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SetPdfXOutputIntent(BitMiracle.Docotic.Pdf.PdfColorProfile)">
            <summary>
            Sets the PDF/X output intent for this document.
            </summary>
            <param name="colorProfile">An ICC color profile from which
            to create PDF/X output intent for this document.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetPdfaConformance">
            <summary>
            Gets PDF/A standard conformance level for this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <returns>The PDF/A standard conformance level for the document.</returns>
            <remarks>
            This method performs basic checks for PDF/A standard compliance. "Basic" means that
            it checks for presence of required metadata and such but doesn't <i>validate</i>
            specified data.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateXObject">
            <summary>
            Creates a new XObject that can be used with one of the 
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject" /> methods.
            </summary>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfXObject" />.
            </returns>
            <overloads>Creates a new XObject that can be used with one of the 
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject" /> methods.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateXObject(BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Creates a new XObject using a page as template. The created XObject can be used with
            one of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawXObject" /> methods.
            </summary>
            <param name="page">The page to use as a template.</param>
            <returns>The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfXObject" />.</returns>
            <remarks>A page pointed to by <paramref name="page" /> can belong to any document (not
            only this one).</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetPatterns">
            <summary>
            Returns the enumerator that iterates through the collection of patterns in this document.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            patterns in this document.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddColoredPattern(System.Double,System.Double)">
            <summary>
            Adds the new colored tiling pattern to the end of the collection
            of document patterns.
            </summary>
            <param name="width">The width of pattern cells in pixels.</param>
            <param name="height">The height of pattern cells in pixels.</param>
            <returns>
            The newly added colored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.AddUncoloredPattern(System.Double,System.Double,BitMiracle.Docotic.Pdf.PdfColorSpace)">
            <summary>
            Adds the new uncolored tiling pattern with specified underlying
            color space to the end of the collection of document patterns.
            </summary>
            <param name="width">The width of pattern cells in pixels.</param>
            <param name="height">The height of pattern cells in pixels.</param>
            <param name="colorSpace">The underlying color space in which
            the actual color of the pattern is to be specified.</param>
            <returns>
            The newly added uncolored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.GetViews">
            <summary>
            Returns the enumerator that iterates through the collection of document views
            added to this document.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            document views added to this document.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateView(System.Int32)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" /> for specified page
            and adds it to the collection of document views.
            </summary>
            <param name="pageIndex">The index of the page to be displayed in
            the view.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" />.
            </returns>
            <overloads>Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" /> for
            specified page and adds it to the collection of document
            views.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateView(BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Creates the new <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" /> for specified page
            and adds it to the collection of document views.
            </summary>
            <param name="page">The page to be displayed in the view.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfDocumentView" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemovePieceInfo">
            <summary>
            Removes all page-piece dictionaries from the document.
            </summary>
            <remarks>
                <para>
            Page-piece dictionaries are used to store private application data in PDF document.
            Adobe Photoshop or Adobe Illustrator often use them.
            </para>
                <para>Removing page-piece dictionaries can significantly reduce file size if
            <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.RemoveUnusedObjects" /> property is set to <c>true</c>.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveSignaturePermissions">
            <summary>
            Removes all digital signature permissions from the PDF document.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveStructureInformation">
            <summary>
            Removes all structure information from the PDF document.
            </summary>
            <remarks>
                <para>Removing structure information can significantly reduce file size if
            <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.RemoveUnusedObjects" /> property is set to <c>true</c>.</para>
                <para>Please note that document without structure information will be less accessible
            for assistive devices. Conversion to other formats can also be hindered.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.RemoveTransparencyGroups">
            <summary>
            Removes all transparency groups from the PDF document.
            </summary>
            <remarks>
                <para>
            Removing of transparency groups are useful to make documents PDF/A compatible.
            Transparency groups are not permitted in PDF/A files.
            </para>
                <para>
            Please note that document might be displayed differently after removal of transparency
            groups.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.ContainsTransparencyGroups">
            <summary>
            Checks if there are any objects with transparency groups in this document.
            </summary>
            <returns>
                <c>true</c> if this document contains at least one object with transparency
            group; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateLayer(System.String)">
            <summary>
            Creates a new <see cref="T:BitMiracle.Docotic.Pdf.PdfLayer" /> with specified name and adds it to the collection
            of documents layers.
            </summary>
            <param name="name">The name for the new layer.</param>
            <returns>The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfLayer" />.</returns>
            <remarks>The new layer is <see cref="P:BitMiracle.Docotic.Pdf.PdfLayer.Visible" /> and has all
            known <see cref="T:BitMiracle.Docotic.Pdf.PdfLayerIntent" /> names specified.</remarks>
            <overloads>Creates a new <see cref="T:BitMiracle.Docotic.Pdf.PdfLayer" /> and adds it to the collection of
            documents layers.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.CreateLayer(System.String,System.Boolean,BitMiracle.Docotic.Pdf.PdfLayerIntent[])">
            <summary>
            Creates a new <see cref="T:BitMiracle.Docotic.Pdf.PdfLayer" /> with specified name and properties and adds it to
            the collection of documents layers.
            </summary>
            <param name="name">The name for the new layer.</param>
            <param name="visible">The visibility state for the new layer.</param>
            <param name="intents">The intents to specify for the new layer.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfLayer" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SaveAsTiff(System.String,BitMiracle.Docotic.Pdf.PdfDrawOptions)">
            <summary>
            Creates images of each page in the document, then creates a multipage TIFF from the
            images and saves the TIFF to the file with specified name.
            </summary>
            <param name="fileName">Name of the file to save the multipage TIFF to.</param>
            <param name="options">The options to use while creating images of the document pages.</param>
            <remarks>
                <para>
            The method ignores value of the PdfDrawOptions.Compression.<see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.Format" />
            property. The PdfDrawFormat.<see cref="F:BitMiracle.Docotic.Pdf.PdfDrawFormat.Tiff"></see> format is always used.
            </para>
                <para>
            Values of PdfDrawOptions.Compression.<see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.TileWidth" />
            and PdfDrawOptions.Compression.<see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.TileHeight" />
            properties are also ignored. 
            </para>
            </remarks>
            <overloads>
            Creates images of each page in the document, then creates a multipage TIFF from the
            images and saves the TIFF to the file with specified name.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SaveAsTiff(System.IO.Stream,BitMiracle.Docotic.Pdf.PdfDrawOptions)">
            <summary>
            Creates images of each page in the document, then creates a multipage TIFF from the
            images and saves the TIFF to the specified stream.
            </summary>
            <param name="stream">The stream to save the multipage TIFF to.</param>
            <param name="options">The options to use while creating images of the document pages.</param>
            <remarks>
                <para>
            The method ignores value of the PdfDrawOptions.Compression.<see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.Format" />
            property. The PdfDrawFormat.<see cref="F:BitMiracle.Docotic.Pdf.PdfDrawFormat.Tiff"></see> format is always used.
            </para>
                <para>
            Values of PdfDrawOptions.Compression.<see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.TileWidth" /> and 
            PdfDrawOptions.Compression.<see cref="P:BitMiracle.Docotic.Pdf.ImageCompressionOptions.TileHeight" /> properties
            are also ignored. 
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SignAndSave(BitMiracle.Docotic.Pdf.PdfSigningOptions,System.String)">
            <summary>
            Digitally signs the document using the specified options. The document is saved to the
            file with the specified name after the signing.
            </summary>
            <param name="options">The options for the document signing.</param>
            <param name="signedFileName">The name of the file to save the signed document to.</param>
            <remarks>
                <para>
            This method takes <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SaveOptions" /> into account during saving.
            </para>
            </remarks>
            <overloads>Digitally signs the document and saves it after the signing.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocument.SignAndSave(BitMiracle.Docotic.Pdf.PdfSigningOptions,System.IO.Stream)">
            <summary>
            Digitally signs the document using the specified options. The document is saved to the
            specified stream after the signing.
            </summary>
            <param name="options">The options for the document signing.</param>
            <param name="signedContentStream">The stream to save the signed document to.</param>
            <remarks>
                <para>
            This method takes <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.SaveOptions" /> into account during saving.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfDocumentView">
            <summary>
            Class for a particular view of a PDF document.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> object that specifies the page to
            be displayed in the view.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> object that specifies the page to
            be displayed in the view.</value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if view is in
            the other document or page is specified by it's index (see
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.PageIndex" /> property).
            </para>
                <para>
            If this view is used in a <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" /> then the target page
            can be specified by either this property or <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.PageIndex" /> property.
            In any case the specified page it located in the current document.
            </para>
                <para>
            If this view is used in a <see cref="T:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction" /> then this property
            is always <c>null</c> because the target page is always located in different 
            document and is always specified by the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.PageIndex" /> property.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.PageIndex">
            <summary>
            Gets the index of the page to be displayed in the view.
            </summary>
            <value>The index of the page to be displayed in the view.</value>
            <remarks>
                <para>
            The value of this property is <c>-1</c> if the page is specified by
            the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> property.
            </para>
                <para>
            If this view is used in a <see cref="T:BitMiracle.Docotic.Pdf.PdfGoToAction" /> then the target page
            can be specified by either this property or <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> property.
            In any case the specified page it located in the current document.
            </para>
                <para>
            If this view is used in a <see cref="T:BitMiracle.Docotic.Pdf.PdfRemoteGoToAction" /> then the
            target page is always specified by this property and the page is always located
            in different document.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Zoom">
            <summary>
            Gets the zoom type of the page to be displayed in the view.
            </summary>
            <value>The zoom type of the page to be displayed in the view.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.ZoomPercent">
            <summary>
            Gets the zoom percent (magnification level) of the page to be
            displayed in the view.
            </summary>
            <value>The zoom percent (magnification level) of the page to be
            displayed in the view.</value>
            <remarks>The zoom percent equal to 0 means that an application
            displaying the document should not change magnification
            level before displaying this view.<br /><br />
            The magnification level should be 0 or in the range [8..3200].</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left">
            <summary>
            Gets the x-coordinate of the upper-left corner of the page to be
            positioned at the upper-left corner of the window when this
            view gets displayed.
            </summary>
            <value>The x-coordinate of the upper-left corner of the page to be
            positioned at the upper-left corner of the window.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top">
            <summary>
            Gets the y-coordinate of the upper-left corner of the page to be positioned
            at the upper-left corner of the window when this view gets displayed.
            </summary>
            <value>
                <para>The y-coordinate of the upper-left corner of the page to be positioned at the
            upper-left corner of the window.</para>
                <para>The coordinate is relative to the bottom edge of the page.
            I.e. offset 0 means "display bottom edge of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> at the top edge
            of the window", which effectively means "display the top edge of the next page at
            the top edge of the window".</para>
                <para>Default value: <c>null</c>, which means "display the top edge of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" />
            at the top edge of the window".</para>
            </value>
            <remarks>
            Use the following formula to calculate offset from the top edge of the page:
            <c>(<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" />.Height - <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />)</c></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Width">
            <summary>
            Gets the width of the page area to fit into window width.
            </summary>
            <value>The width of the page area to fit into window width.</value>
            <remarks>The width equal to 0 means that an application
            displaying the document should not try to change the size of the 
            page in the view using rectangle properties. An application should 
            use <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" /> coordinates, zoom type
            (<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Zoom" />) and magnification level
            (<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.ZoomPercent" />) instead.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Height">
            <summary>
            Gets the height of the page area to fit into window height.
            </summary>
            <value>The height of the page area to fit into window height.</value>
            <remarks>The height equal to 0 means that an application
            displaying the document should not try to change the size of the 
            page in the view using rectangle properties. An application should 
            use <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" /> coordinates, zoom type
            (<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Zoom" />) and magnification level
            (<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.ZoomPercent" />) instead.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Name">
            <summary>
            Gets the name of the view.
            </summary>
            <value>The name of the view.</value>
            <remarks>
            Not all views has a name. For views explicitly specified using page and zoom the
            value of this property is <c>null</c>.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.op_Equality(BitMiracle.Docotic.Pdf.PdfDocumentView,BitMiracle.Docotic.Pdf.PdfDocumentView)">
            <summary>
            Determines whether the two specified objects are equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.op_Inequality(BitMiracle.Docotic.Pdf.PdfDocumentView,BitMiracle.Docotic.Pdf.PdfDocumentView)">
            <summary>
            Determines whether the two specified objects are not equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are not equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
                <c>true</c> if the specified object is equal to current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.GetHashCode">
            <summary>
            Serves as a hash function for a this type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetZoom(System.Double)">
            <summary>
            Sets the magnification level to use when displaying the page
            in the view.
            </summary>
            <param name="zoomPercent">The magnification level in percent.</param>
            <remarks>
                <para>The target page will be displayed starting from the upper side of the page.</para>
                <para>The zoom percent equal to 0 means that an application displaying the document
            should not change magnification level before displaying this view.</para>
                <para>The magnification level should be 0 or in the range [8..3200].</para>
                <para>This method sets the zoom type to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.PercentBased" />
            and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" /> property to <c>null</c>.</para>
            </remarks>
            <overloads>Sets the magnification level to use when displaying the page in the view.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetZoom(BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Sets the magnification level to use when displaying the page in the view.
            </summary>
            <param name="position">
                <para>
                    <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure that specifies the upper-left corner of the page
            to be positioned at the upper-left corner of the window when this view gets displayed.
            </para>
                <para>
            The vertical coordinate is relative to the bottom edge of the page.
            I.e. vertical offset 0 means "display bottom edge of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> at the top edge
            of the window", which effectively means "display the top edge of the next page at
            the top edge of the window".
            </para>
                <para>
            Use the following formula to calculate vertical offset relative to the top edge of the page:
            <c>(<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" />.Height - <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />)</c></para>
            </param>
            <param name="zoomPercent">The magnification level in percent.</param>
            <remarks>
                <para>The target page will be displayed starting from <paramref name="position" />.Top offset
            relative to the bottom edge of the page.</para>
                <para>The zoom percent equal to 0 means that an application
            displaying the document should not change magnification
            level before displaying this view.</para>
                <para>The magnification level should be 0 or in the range [8..3200].</para>
                <para>This method sets the zoom type to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.PercentBased" />.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetZoom(System.Drawing.PointF,System.Single)">
            <summary>
            Sets the magnification level to use when displaying the page in the view.
            </summary>
            <param name="position">
                <para>
                    <see cref="T:System.Drawing.PointF" /> structure that specifies the upper-left corner of the page
            to be positioned at the upper-left corner of the window when this view gets displayed.
            </para>
                <para>
            The vertical coordinate is relative to the bottom edge of the page.
            I.e. vertical offset 0 means "display bottom edge of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> at the top edge
            of the window", which effectively means "display the top edge of the next page at
            the top edge of the window".
            </para>
                <para>
            Use the following formula to calculate vertical offset relative to the top edge of the page:
            <c>(<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" />.Height - <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />)</c></para>
            </param>
            <param name="zoomPercent">The magnification level in percent.</param>
            <remarks>
                <para>The target page will be displayed starting from <paramref name="position" />.Top offset
            relative to the bottom edge of the page.</para>
                <para>The zoom percent equal to 0 means that an application
            displaying the document should not change magnification
            level before displaying this view.</para>
                <para>The magnification level should be 0 or in the range [8..3200].</para>
                <para>This method sets the zoom type to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.PercentBased" />.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitPage">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitPage" />.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitWidth">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitWidth" />.
            </summary>
            <remarks>
            The target page will be displayed starting from the top edge of the page.
            </remarks>
            <overloads>Sets the zoom type to use when displaying the page
            in the view to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitWidth" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitWidth(System.Double)">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitWidth" /> and the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />
            property to the specified value.
            </summary>
            <param name="top">
                <para>The y-coordinate of the upper-left corner of the
            page to be positioned at the upper-left corner of the window when
            this view gets displayed.</para>
                <para>
            The coordinate is relative to the bottom edge of the page.
            I.e. vertical offset 0 means "display bottom edge of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> at the top edge
            of the window", which effectively means "display the top edge of the next page at
            the top edge of the window".
            </para>
                <para>
            Use the following formula to calculate vertical offset relative to the top edge of the page:
            <c>(<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" />.Height - <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />)</c></para>
            </param>
            <remarks>
            The target page will be displayed starting from <paramref name="top" /> offset
            relative to the bottom edge of the page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitHeight">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitHeight" />.
            </summary>
            <overloads>Sets the zoom type to use when displaying the page in
            the view to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitHeight" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitHeight(System.Double)">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitHeight" /> and the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left" />
            property to the specified value.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the
            page to be positioned at the upper-left corner of the window when
            this view gets displayed.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitRect(BitMiracle.Docotic.Pdf.PdfBox)">
            <summary>
            Sets the zoom type to use when displaying the page in the view to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitRect" />
            and the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Width" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Height" />
            properties to the corresponding properties of the specified box.
            </summary>
            <param name="box">
                <para>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure that specifies the new values for
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Width" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Height" /> properties.
            </para>
                <para>
            The vertical coordinates of the box are relative to the bottom edge of the page.
            </para>
                <para>
            Use <see cref="M:BitMiracle.Docotic.Pdf.PdfBox.ToRectangle(System.Double)" /> method to map the box to <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate space.
            </para>
            </param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitBBox">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBox" />.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitBBoxWidth">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxWidth" />.
            </summary>
            <remarks>
            The target page will be displayed starting from the top edge of the page.
            </remarks>
            <overloads>Sets the zoom type to use when displaying the page in
            the view to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxWidth" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitBBoxWidth(System.Double)">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxWidth" /> and the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />
            property to the specified value.
            </summary>
            <param name="top">
                <para>The y-coordinate of the upper-left corner of the
            page to be positioned at the upper-left corner of the window when
            this view gets displayed.</para>
                <para>The coordinate is relative to the bottom edge of the page.
            I.e. offset 0 means "display bottom edge of the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" /> at the top edge
            of the window", which effectively means "display the top edge of the next page at
            the top edge of the window".</para>
                <para>
            Use the following formula to calculate offset from the top edge of the page:
            <c>(<see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Page" />.Height - <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Top" />)</c></para>
            </param>
            <remarks>
            The target page will be displayed starting from <paramref name="top" /> offset
            relative to the bottom edge of the page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitBBoxHeight">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxHeight" />.
            </summary>
            <overloads>Sets the zoom type to use when displaying the page in
            the view to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxHeight" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfDocumentView.SetFitBBoxHeight(System.Double)">
            <summary>
            Sets the zoom type to use when displaying the page in the view
            to <see cref="F:BitMiracle.Docotic.Pdf.PdfZoom.FitBBoxHeight" /> and the <see cref="P:BitMiracle.Docotic.Pdf.PdfDocumentView.Left" />
            property to the specified value.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the
            page to be positioned at the upper-left corner of the window when
            this view gets displayed.</param>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfEmbeddedFile">
            <summary>
            Class for a file embedded in PDF.
            </summary>
            <remarks>
                <para>
            File specifications (see <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" />) ordinarily refer to files 
            external to the PDF file in which they occur. When a PDF file is archived or transmitted, 
            all external files it refers to must accompany it to preserve the file’s integrity.
            </para>
                <para>
            Embedded files address this problem by allowing the contents of referenced files to be 
            embedded directly within the body of the PDF file. This makes the PDF file a self-contained
            unit that can be stored or transmitted as a single entity.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Id">
            <summary>
            Gets the identifier of this embedded file in this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <value>The identifier of this embedded file in this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.</value>
            <remarks>
                <para>
            The identifier has the following properties:
            </para>
                <list type="bullet">
                    <item>
            Different embedded files from the same <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> object will have
            different identifiers.
            </item>
                    <item>
            Same embedded files from multiple <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> objects will have same
            identifiers. Two embedded files are said to be the same when they are based on internal
            PDF structures with the same number.
            </item>
                    <item>
            Embedded files from different documents have same identifiers if those embedded files
            are based on internal PDF structures with the same number.
            </item>
                    <item>
            Any change to a <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> object which does not renumber its internal
            structures does not change the identifier.
            </item>
                    <item>
            When library saves a document it might renumber its internal structures. Therefore, the
            identifier might change after invocation of any of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.Save" />
            methods.</item>
                </list>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Size">
            <summary>Gets the size of the embedded file, in bytes.</summary>
            <value>The size of the embedded file, in bytes.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.MimeType">
            <summary>
            Gets or sets the MIME media type of the embedded file.
            </summary>
            <value>
            The MIME media type of the embedded file or <c>null</c> if
            there is no value set for this property.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.CreationDate">
            <summary>
            Gets or sets the date and time when the embedded file was created.
            </summary>
            <value>
            The date and time when the embedded file was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time (what you get) expressed in UTC (Coordinated Universal Time).
            Provided date and time (what you set) is expected to be in local time zone.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ModifiedDate">
            <summary>
            Gets or sets the date and time when the embedded file was last modified.
            </summary>
            <value>
            The date and time when the embedded file was last modified or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time (what you get) expressed in UTC (Coordinated Universal Time).
            Provided date and time (what you set) is expected to be in local time zone.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.WriteWithoutCompression">
            <summary>
            Gets or sets the value indicating whether this file should be embedded as is, without
            being compressed.
            </summary>
            <value>The value indicating whether this file should be embedded as is, without
            being compressed.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.GetChecksum">
            <summary>
            Gets the MD5 checksum of the embedded file.
            </summary>
            <returns>
            The MD5 checksum of the embedded file or <c>null</c> if checksum is not specified in PDF.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Save(System.IO.Stream)">
            <summary>
            Saves the embedded file to the specified stream.
            </summary>
            <param name="stream">The stream to save embedded file to.</param>
            <overloads>Saves the embedded file to a file or a stream.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Save(System.String)">
            <summary>
            Saves the embedded file to the file with specified name.
            </summary>
            <param name="fileName">The name of the file to save document to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ReplaceWith(System.Byte[])">
            <summary>
            Replaces embedded file contents with the provided bytes.
            </summary>
            <param name="bytes">The array of bytes.</param>
            <remarks>
                <para>This method replaces contents of the embedded file, updates
            <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ModifiedDate" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Size" /> and the checksum (if specified).</para>
                <para>This method respects the <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.WriteWithoutCompression" /> setting.</para>
                <para>This method does not update <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.MimeType" /> property. You should update
            the property yourselves if the new content has different MIME type.</para>
                <para>Replacing contents of an embedded file can cause unexpected results if the new
            contents has different structure or broken in any way.</para>
            </remarks>
            <overloads>Replaces file contents with the new one.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ReplaceWith(System.String)">
            <summary>
            Replaces embedded file contents with contents of the specified file.
            </summary>
            <param name="fileName">The name of the file with the new contents.</param>
            <remarks>
                <para>This method replaces contents of the embedded file, updates
            <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ModifiedDate" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Size" /> and the checksum (if specified).</para>
                <para>This method respects the <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.WriteWithoutCompression" /> setting.</para>
                <para>This method does not update <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.MimeType" /> property. You should update
            the property yourselves if the new content has different MIME type.</para>
                <para>Replacing contents of an embedded file can cause unexpected results if the new
            contents has different structure or broken in any way.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ReplaceWith(System.IO.Stream)">
            <summary>
            Replaces embedded file contents with contents of the specified stream.
            </summary>
            <param name="stream">The stream with the new contents.</param>
            <remarks>
                <para>This method replaces contents of the embedded file, updates
            <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.ModifiedDate" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.Size" /> and the checksum (if specified).</para>
                <para>This method respects the <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.WriteWithoutCompression" /> setting.</para>
                <para>This method does not update <see cref="P:BitMiracle.Docotic.Pdf.PdfEmbeddedFile.MimeType" /> property. You should update
            the property yourselves if the new content has different MIME type.</para>
                <para>Replacing contents of an embedded file can cause unexpected results if the new
            contents has different structure or broken in any way.</para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfErrorEventArgs">
            <summary>
            The class for PDF error event data.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfErrorEventArgs" /> class.
            </summary>
            <param name="message">The error description message.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfErrorEventArgs.Message">
            <summary>
            Gets the error description message.
            </summary>
            <value>
            The error description message.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFileSpecification">
            <summary>
            Class for a file specification.
            </summary>
            <remarks>
                <para>
            A PDF file can refer to the contents of another file by using a file specification.
            </para>
                <para>
            The file designated by a file specification is normally external to the PDF file
            referring to it. But it's also possible to embed external file within the referring PDF
            file, allowing its contents to be stored or transmitted along with the PDF file. 
            See <see cref="T:BitMiracle.Docotic.Pdf.PdfEmbeddedFile" /> class.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Specification">
            <summary>
            Gets the file specification string.
            </summary>
            <remarks>
                <para>
            The string is divided into component substrings separated by the slash character (/).
            </para>
                <para>
            A simple file specification that begins with a slash is an absolute file specification.
            The last component is the file name; the preceding components specify its context.
            </para>
                <para>
            A file specification that does not begin with a slash is a relative file
            specification giving the location of the file relative to that of the PDF file
            containing it.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Description">
            <summary>
            Gets the description of the file specification.
            </summary>
            <value>
            The description of the file specification or <c>null</c> if description is not present.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Contents">
            <summary>
            Gets the embedded file associated with the file specification.
            </summary>
            <value>
            The embedded file associated with the file specification or 
            <c>null</c> if embedded file is not present.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecification.SetCustomName(System.String,System.String)">
            <summary>
            Adds custom key-name pair to this file specification.
            </summary>
            <param name="key">The key part of the pair.</param>
            <param name="name">The value (name) part of the pair.</param>
            <remarks>
                <para>
            This method throws <see cref="T:System.ArgumentException" /> if <paramref name="key" />
            is one of the keys defined in PDF Reference for File Specification Dictionaries.
            </para>
                <para>
            The <paramref name="key" /> must not be <c>null</c>.
            </para>
                <para>
            Providing <c>null</c> for the <paramref name="name" /> removes existing value for
            the specified <paramref name="key" /> (if any).
            </para>
                <para>
            The pair will be stored as <c>/key /name</c> in this file specification dictionary.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecification.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with
            this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecification.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection">
            <summary>
            Collection of file specifications.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.Item(System.String)">
            <summary>
            Gets the file specification by specification string.
            </summary>
            <param name="specification">The file specification string.</param>
            <returns>
            The file specification for the given specification string or <c>null</c>
            if specification is not found.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.Get(System.String)">
            <summary>
            Gets the file specification by specification string.
            </summary>
            <param name="specification">The file specification string.</param>
            <returns>
            The file specification for the given specification string or <c>null</c>
            if specification is not found.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A System.Collections.Generic.IEnumerator&lt;<see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecification" />&gt; 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A System.Collections.IEnumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.Add(BitMiracle.Docotic.Pdf.PdfFileSpecification)">
            <summary>
            Adds the file specification to the <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection" />.
            </summary>
            <param name="fileSpec">
            The file specification to be added to the <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection" />.
            </param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.Remove(System.String)">
            <summary>
            Removes the first occurrence of the file specification with given specification string.
            </summary>
            <param name="specification">
            The specification string of the object to remove.
            </param>
            <returns>
                <c>true</c> if file specification is successfully removed; otherwise, <c>false</c>.
            This method also returns <c>false</c> if file specification was not found.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.Remove(BitMiracle.Docotic.Pdf.PdfFileSpecification)">
            <summary>
            Removes the first occurrence of given file specification.
            </summary>
            <param name="specification">The file specification to remove.</param>
            <returns>
                <c>true</c> if file specification is successfully removed; otherwise, <c>false</c>.
            This method also returns <c>false</c> if file specification was not found.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection.Clear">
            <summary>
            Removes all elements from the <see cref="T:BitMiracle.Docotic.Pdf.PdfFileSpecificationCollection" />.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFont">
            <summary>
            Class for a font that is suitable for use with PDF document.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Name">
            <summary>
            Gets the face name of the font.
            </summary>
            <value>The face name of the font.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Format">
            <summary>
            Gets the format of the font.
            </summary>
            <value>The format of the font.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Bold">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is bold.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is bold;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Italic">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is italic.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is italic;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Underline">
            <summary>
            Gets or sets a value indicating whether this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is underlined.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is underlined;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Strikeout">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />
            specifies a horizontal line through the font.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> has a horizontal
            line through it; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.SynthesizedBold">
            <summary>
            Gets or sets a value indicating whether a bold version of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is synthesized when needed.
            </summary>
            <value>
                <c>true</c> if a bold version of this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />
            is synthesized when needed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.SynthesizedItalic">
            <summary>
            Gets or sets a value indicating whether an italic version of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is synthesized when needed.
            </summary>
            <value>
                <c>true</c> if an italic version of this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" />
            is synthesized when needed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Ascent">
            <summary>
            Gets the font ascent, expressed in the glyph coordinate system.
            </summary>
            <value>The font ascent, expressed in the glyph coordinate system.</value>
            <remarks>
                <para>
            See <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix" /> for more detail about glyph coordinate system.
            </para>
                <para>
            Ascent is the maximum height above the baseline reached by glyphs in this font,
            excluding the height of glyphs for accented characters.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Descent">
            <summary>
            Gets the font descent, expressed in the glyph coordinate system.
            </summary>
            <value>The font descent, expressed in the glyph coordinate system.</value>
            <remarks>
                <para>
            See <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix" /> for more detail about glyph coordinate system.
            </para>
                <para>
            Descent is the maximum depth below the baseline reached by glyphs in this font.
            The value is a negative number.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.TopSideBearing">
            <summary>
            Gets the vertical distance from the baseline to the top of the font bounding box,
            expressed in the glyph coordinate system.
            </summary>
            <value>
                <para>
            The vertical distance from the baseline to the top of the font bounding box. Usually,
            this is a positive value.
            </para>
                <para>
            Font bounding box is the smallest rectangle enclosing the shape that would result if
            all of the glyphs of the font were placed with their origins coincident and then filled.
            </para>
            </value>
            <remarks>
                <para>
            See <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix" /> for more detail about relation between glyph
            and canvas coordinate systems.
            </para>
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix">
            <summary>
            Gets the transformation matrix used to map coordinates from this font's glyph
            coordinate system to canvas coordinate system.
            </summary>
            <value>
            The transformation used to map coordinates from the glyph space to canvas space.
            </value>
            <remarks>
                <para>
            The glyph coordinate system is the space in which an individual character's glyph is
            defined. The glyph origin is the point (0, 0) in the glyph coordinate system. Y axis is
            directed from the bottom to the top.
            </para>
                <para>
            For all font types except Type 3, the units of glyph space are one-thousandth
            of a unit of a canvas space. The <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix" /> is equal to
            <c>{ 0.001, 0, 0, 0.001, 0, 0 }</c> for all fonts except Type 3.
            </para>
                <para>
            For a Type 3 font, the <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.TransformationMatrix" /> can have an arbitrary value.
            </para>
                <para>
            The canvas coordinate system is the coordinate system of a <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" />.
            It is used when text is drawn on a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />, on a <see cref="T:BitMiracle.Docotic.Pdf.PdfXObject" />
            or on a <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.Embedded">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> is
            embedded into the document.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfFont" /> embedded into the
            document; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFont.EncodingName">
            <summary>
            Gets the name of this font's encoding. 
            </summary>
            <value>The name of this font's encoding.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.op_Equality(BitMiracle.Docotic.Pdf.PdfFont,BitMiracle.Docotic.Pdf.PdfFont)">
            <summary>
            Determines whether the two specified objects are equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.op_Inequality(BitMiracle.Docotic.Pdf.PdfFont,BitMiracle.Docotic.Pdf.PdfFont)">
            <summary>
            Determines whether the two specified objects are not equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are not equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
                <c>true</c> if the specified object is equal to current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.GetHashCode">
            <summary>
            Serves as a hash function for a this type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.Unembed">
            <summary>
            Removes font bytes from the PDF file.
            </summary>
            <returns>
                <c>true</c> if font bytes were successfully removed; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            This method might fail to remove font bytes in the following cases:
            <ul><li>
            Font is not embedded. For such fonts the <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.Embedded" />
            property is <c>false</c>.
            </li><li>
            Font is used by one of form controls (<see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" />, <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" />,
            etc.) and therefore can't be unembedded. A PDF reader might be unable to view or change
            text in a control if the control uses an unembedded font.
            </li><li>
            Font is a Type3 font. Type3 fonts cannot be unembedded by its nature.
            </li><li>
            Current document will be saved as a PDF/A document. For such documents
            PdfDocument.SaveOptions.<see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.ProducePdfA" /> property is <c>true</c>.
            PDF/A documents should have all used fonts embedded.
            </li></ul></para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.Embed">
            <summary>
            Tries to embed font bytes into the PDF file.
            </summary>
            <returns>
                <c>true</c> if font bytes were successfully found and embedded; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            This method might fail to embed font bytes in the following cases:
            <ul><li>
            Font is already embedded. For such fonts the <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.Embedded" />
            property is <c>true</c>.
            </li><li>
            Font bytes were not found in the collection of fonts installed in the operating
            system and in the collection of built-in PDF fonts.
            </li><li>
            Font is not allowed to be embedded in documents (according to the license associated
            with the font).
            </li><li>
            Font is a Type3 font. Type3 fonts are always embedded by its nature.
            </li></ul></para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.RemoveUnusedGlyphs">
            <summary>
            Removes unused glyphs from the font.
            </summary>
            <returns>
                <c>true</c> if unused glyphs were successfully removed from the font;
            otherwise, <c>false</c></returns>
            <remarks>
                <para>
            This method might fail to remove unused glyphs in the following cases:
            <ul><li>
            Font is not embedded. For such fonts the <see cref="P:BitMiracle.Docotic.Pdf.PdfFont.Embedded" />
            property is <c>false</c>.
            </li><li>
            Font is used in a <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> or <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> and
            therefore all font glyphs should be preserved. A PDF reader or editor might be unable
            to change text in a control if some glyphs are missed in the font.
            </li><li>
            Font is of an unsupported type. For now, only TrueType fonts, created with
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.AddFont" /> method are supported.
            </li></ul></para>
                <para>
            This method is useful for decreasing size of produced PDF documents. The method
            creates a font subset with used glyphs only and embeds the subset in the current document.
            </para>
                <para>
            A glyph is treated as used if current document contains character drawn with the glyph.
            </para>
                <para>
            This method does not remove unused glyphs from Type1 fonts and from any fonts in
            existing PDF documents.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.ContainsGlyphsForText(System.String)">
            <summary>
            Checks whether this font contains all glyphs required to draw the given text.
            </summary>
            <param name="text">Text to check.</param>
            <returns>
                <c>true</c> if this font contains all glyphs required to draw the <paramref name="text" />. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.FixEncoding">
            <summary>
            Fixes PDF font encoding if possible.
            </summary>
            <returns>
                <c>true</c> if font encoding was updated; otherwise, <c>false</c></returns>
            <remarks>
                <para>
            Some PDF generators produce PDF documents with broken font encodings. Extraction of text
            from such documents is not possible.
            </para>
                <para>
            This method tries to fix font encoding in the PDF document. It reads information about
            encoding in the font bytes and updates PDF encoding correspondingly.
            </para>
                <para>
            This method might fail if font bytes do not contain information about encoding. This
            method does not support certain PDF font types (e.g. <see cref="F:BitMiracle.Docotic.Pdf.PdfFontFormat.Type3" />).
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.Save(System.IO.Stream)">
            <summary>
            Saves the font bytes to the specified stream.
            </summary>
            <param name="stream">The stream to save font bytes to.</param>
            <overloads>Saves the font bytes to a file or a stream.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.Save(System.String)">
            <summary>
            Saves the font bytes to the file with specified name.
            </summary>
            <param name="fileName">Name of the file to save font bytes to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfFont.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfImage">
            <summary>
            Class for an image that is suitable for use with PDF document.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.Id">
            <summary>
            Gets the identifier of this image in this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
            <value>The identifier of the image in this <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.</value>
            <remarks>
                <para></para>
                <para>
            The identifier has the following properties:
            </para>
                <list type="bullet">
                    <item>For all inline images the identifier is equal to <c>null</c>.</item>
                    <item>
            Different non-inline images from the same <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> object have
            different identifiers. None of these identifiers is equal to <c>null</c>.
            </item>
                    <item>
            Same images from multiple <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> objects have same identifiers. Two
            images are said to be the same when they are based on internal PDF structures with
            the same number.
            </item>
                    <item>
            Images from different documents have same identifiers if those images are based on
            internal PDF structures with the same number.
            </item>
                    <item>
            Any change to a <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> object which does not renumber its internal
            structures does not change the identifier.
            </item>
                    <item>
            When library saves a document it might renumber its internal structures. Therefore, the
            identifier might change after invocation of any of the <see cref="Overload:BitMiracle.Docotic.Pdf.PdfDocument.Save" />
            methods.</item>
                </list>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.DpiX">
            <summary>
            Gets the horizontal resolution, in pixels per inch, of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The the horizontal resolution, in pixels per inch, of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
            <remarks>
            The value is equal to <c>0</c> if horizontal resolution is not specified for the image.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.DpiY">
            <summary>
            Gets the vertical resolution, in pixels per inch, of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The the vertical resolution, in pixels per inch, of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
            <remarks>
            The value is equal to <c>0</c> if vertical resolution is not specified for the image.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.Height">
            <summary>
            Gets the height, in pixels, of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The height, in pixels, of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.Width">
            <summary>
            Gets the width, in pixels, of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The width, in pixels, of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.ComponentCount">
            <summary>
            Gets the number of color components in this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The number of color components in this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.BitsPerComponent">
            <summary>
            Gets the number of bits used to describe each color component
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The number of bits used to describe each color component
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.Compression">
            <summary>
            Gets the compression scheme of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>
            The compression scheme of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.Mask">
            <summary>
            Gets or sets the mask image for this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <value>The mask image for this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.</value>
            <remarks>
                <para>
            The returned value can be a stencil mask, or a soft mask, or <c>null</c> if there is
            no mask image associated with the image. If the <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsMask" /> property is <c>true</c>
            for the returned image then the mask is a stencil one. Otherwise, the mask is a
            soft mask.
            </para>
                <para>
            This property can be used to set stencil or soft mask for the image. If the provided
            value is an image with its <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsMask" /> property equal to <c>true</c> then the
            value is treated as a stencil mask. Otherwise, the value is treated as a soft mask.
            </para>
                <para>
            For any provided value, which is not a grayscale image (1 color channel, 8 bits per
            channel, gray color space) and not a stencil mask, the following is performed: the
            image gets converted to RGB, the R (red) component of the converted image is then used
            as a soft mask image.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.HasMask">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> has associated mask color,
            a stencil mask image or a soft mask.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> has associated mask color, a stencil mask
            image or a soft mask. <c>false</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> has no associated mask.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.IsMask">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> is a stencil mask image.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> is a stencil mask image;
            otherwise, <c>false</c>.</value>
            <remarks>
                <para>
            An image mask is a monochrome image in which each sample is specified by a single bit.
            However, instead of being painted in opaque black and white, the image mask is treated
            as a <i>stencil mask</i> that is partly opaque and partly transparent.
            </para>
                <para>
            Sample values in the image do not represent black and white pixels; rather, they
            designate places on the page that should either be marked with the current color or
            masked out (not marked at all). Areas that are masked out retain their former contents.
            The effect is like applying paint in the current color through a cut-out stencil,
            which lets the paint reach the page in some places and masks it out in others.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.UseMaskInverted">
            <summary>
            Gets or sets a value indicating whether the bits of the mask image
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> should be inverted.
            </summary>
            <value>
                <c>true</c> if the bits of the mask image of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> should be inverted;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.InterpolateWhenDrawn">
            <summary>
            Gets or sets a value indicating whether an image interpolation algorithm
            should be applied during rendering of this image.
            </summary>
            <value>
                <c>true</c> if an image interpolation algorithm should be applied
            during rendering of this image.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> is an inline image.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> is an inline image;
            otherwise, <c>false</c>.</value>
            <remarks>
                <para>
            Inline images are completely contained inside the contents of their owner pages. Such 
            images typically has small width and height. One inline images can not be used on
            more than one page.
            </para>
                <para>
            Regular images are stored independently of any page contents. Pages that use a regular
            image contain a reference to the image. Any number of pages can reference the same
            regular image.
            </para>
                <para>
            Inline images can not be recompressed and you can not replace their contents unless
            you move them to resources using <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.MoveInlineImagesToResources" />.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.op_Equality(BitMiracle.Docotic.Pdf.PdfImage,BitMiracle.Docotic.Pdf.PdfImage)">
            <summary>
            Determines whether the two specified objects are equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.op_Inequality(BitMiracle.Docotic.Pdf.PdfImage,BitMiracle.Docotic.Pdf.PdfImage)">
            <summary>
            Determines whether the two specified objects are not equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are not equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
                <c>true</c> if the specified object is equal to current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.GetHashCode">
            <summary>
            Serves as a hash function for a this type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.MakeTransparent(BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Makes the specified color transparent for this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" />.
            </summary>
            <param name="color">The color to make transparent.</param>
            <remarks>
                <para>
            This method must not be called for mask images (i.e. for images with
            <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsMask" /> property equal to <c>true</c>).
            </para>
                <para>
            At this time, the method throws exception of <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> type if
            the color specified by <paramref name="color" /> is not an instance of
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRgbColor" /> class.
            </para>
                <para>
            This method does nothing for images with non-RGB color spaces.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.ConvertToMask">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> into a mask image.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.Save(System.IO.Stream)">
            <summary>
            Saves the image to the specified stream.
            </summary>
            <param name="stream">The stream to save image to.</param>
            <returns>Format of extracted image.</returns>
            <overloads>Saves the image to a file or a stream.</overloads>
            <remarks>
                <para>
            Mask images (see <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsMask" /> property) are always saved according to usual PDF convention:
            </para>
                <list type="bullet">
                    <item>
                        <description>
            White pixels corresponds to masked-out area, the "transparent" pixels. Such masked out area will not be painted 
            on the page.
            </description>
                    </item>
                    <item>
                        <description>
            Black pixels corresponds to unmasked area, the "opaque" pixels. Such unmasked area will be painted on the page
            with the current fill color or corresponding portion of the base image (when this mask image is set as 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.Mask" /> for other image).
            </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.Save(System.String)">
            <summary>
            Saves the image to the file with specified name.
            </summary>
            <param name="fileNameWithoutExtension">Name of the file &lt;without extension&gt; to save image to.</param>
            <returns>Full name of the file with extension where image was saved.</returns>
            <remarks>
                <para>
            Mask images (see <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsMask" /> property) are always saved according to usual PDF convention:
            </para>
                <list type="bullet">
                    <item>
                        <description>
            White pixels corresponds to masked-out area, the "transparent" pixels. Such masked out area will not be painted 
            on the page.
            </description>
                    </item>
                    <item>
                        <description>
            Black pixels corresponds to unmasked area, the "opaque" pixels. Such unmasked area will be painted on the page
            with the current fill color or corresponding portion of the base image (when this mask image is set as 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.Mask" /> for other image).
            </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.Uncompress">
            <summary>
            Uncompresses image data.
            </summary>
            <remarks>
                <para>Calling this method will cause image data to be saved without
            any compression.
            </para>
                <para>
            Saving image data without compression will cause output PDF file to 
            be bigger in size, so this method probably should be used only if required
            for compatibility reasons.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithFlate">
            <summary>
            Recompresses image data using zlib/deflate compression method.
            </summary>
            <remarks>
                <para>Image data is recompressed using maximum (9) compression quality.</para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
            <overloads>Recompresses image data using zlib/deflate compression method.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithFlate(System.Int32)">
            <summary>
            Recompresses image data using zlib/deflate compression method and specified
            compression quality.
            </summary>
            <param name="deflateQuality">The quality to use in Deflate encoder.</param>
            <remarks>
                <para>The Deflate quality value should be between 0 and 9 inclusive.</para>
                <para>The quality value of 9 gives best compression.</para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithGroup3Fax">
            <summary>
            Recompresses image data using Group 3 CCITT facsimile (fax) encoding.
            </summary>
            <remarks>
                <para>Using Group 3 CCITT facsimile (fax) encoding will cause image
            data to be converted to bilevel (black-and-white) format if necessary.
            </para>
                <para>
            The threshold level is set to default value (189) during recompression.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
            <overloads>Recompresses image data using Group 3 CCITT facsimile (fax)
            encoding.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithGroup3Fax(System.Int32)">
            <summary>
            Recompresses image data using Group 3 CCITT facsimile (fax) encoding and
            specified threshold level.
            </summary>
            <param name="thresholdLevel">The threshold level.</param>
            <remarks>
                <para>Using Group 3 CCITT facsimile (fax) encoding will cause image
            data to be converted to bilevel (black-and-white) format if necessary.
            </para>
                <para>The threshold level is used to decide which pixels are white and
            which are black when converting image data to black-and-white format.</para>
                <para>The threshold level value should be between 0 and 255 inclusive. A
            threshold value 0 means that library should use midpoint between most
            light and dark pixels as a threshold value.
            </para>
                <para>
            If the image contains some scanned document or other data with mostly white
            background pixels and mostly black foreground pixels then threshold level
            of 189 or higher is recommended to preserve most of the data.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithGroup4Fax">
            <summary>
            Recompresses image data using Group 4 CCITT facsimile (fax) encoding.
            </summary>
            <remarks>
                <para>Using Group 4 CCITT facsimile (fax) encoding will cause image
            data to be converted to bilevel (black-and-white) format if necessary.
            </para>
                <para>
            The threshold level is set to default value (189) during recompression.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
            <overloads>Recompresses image data using Group 4 CCITT facsimile (fax)
            encoding.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithGroup4Fax(System.Int32)">
            <summary>
            Recompresses image data using Group 4 CCITT facsimile (fax) encoding and
            specified threshold level.
            </summary>
            <param name="thresholdLevel">The threshold level.</param>
            <remarks>
                <para>Using Group 4 CCITT facsimile (fax) encoding will cause image
            data to be converted to bilevel (black-and-white) format if necessary.
            </para>
                <para>The threshold level is used to decide which pixels are white and
            which are black when converting image data to black-and-white format.</para>
                <para>The threshold level value should be between 0 and 255 inclusive. A
            threshold value 0 means that library should use midpoint between most
            light and dark pixels as a threshold value.
            </para>
                <para>
            If the image contains some scanned document or other data with mostly white
            background pixels and mostly black foreground pixels then threshold level
            of 189 or higher is recommended to preserve most of the data.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithJpeg">
            <summary>
            Recompresses image data using JPEG baseline format.
            </summary>
            <remarks>
                <para>
            The JPEG quality is set to 100 during recompression.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
            <overloads>Recompresses image data using JPEG baseline format.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithJpeg(System.Int32)">
            <summary>
            Recompresses image data using JPEG baseline format and specified
            compression quality.
            </summary>
            <param name="jpegQuality">The JPEG quality.</param>
            <remarks>
                <para>
            The JPEG quality value should be between 1 and 100 inclusive.
            </para>
                <para>
            The quality value of 100 preserves most details but produces biggest output.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithJpeg2000">
            <summary>
            Recompresses image data using JPEG 2000 format.
            </summary>
            <remarks>
                <para>
            This method performs lossless recompression.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
            <overloads>Recompresses image data using JPEG 2000 format.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.RecompressWithJpeg2000(System.Int32)">
            <summary>
            Recompresses image data using JPEG 2000 format and specified
            compression ratio.
            </summary>
            <param name="compressionRatio">The compression ratio to use while compressing.</param>
            <remarks>
                <para>
            The compression ratio should be not less than 1.
            </para>
                <para>
            The compression ratio equal to 1 causes lossless compression but produces biggest
            output. The larger compression ratio values cause smaller outputs in expense of image
            detail.
            </para>
                <para>
            The compression ratio of N means "compress N times".
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.ResizeTo(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfImageCompression)">
            <summary>
            Resizes image to specified width and height and compresses it using
            specified compression scheme.
            </summary>
            <param name="width">The new width for the image.</param>
            <param name="height">The new height for the image.</param>
            <param name="compression">The compression scheme to use.
            Only <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg" />, <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate" />
            and <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax" /> schemes are supported now.
            </param>
            <overloads>Resizes image to specified width and height and compresses it
            using specified compression scheme.</overloads>
            <remarks>
                <para>
            This method uses default options for specified compression scheme.
            </para>
                <para>
            Please use <see cref="M:BitMiracle.Docotic.Pdf.PdfImage.ResizeTo(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfImageCompression,System.Int32)" />
            overload if you want to tune up compression scheme.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.ResizeTo(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfImageCompression,System.Int32)">
            <summary>
            Resizes image to specified width and height and compresses it using
            specified compression scheme.
            </summary>
            <param name="width">The new width for the image.</param>
            <param name="height">The new height for the image.</param>
            <param name="compression">The compression scheme to use.
            Only <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg" />, <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate" />
            and <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax" /> schemes are supported now.
            </param>
            <param name="option">The option for compression scheme.</param>
            <remarks>
                <para>
            If <paramref name="compression" /> is <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate" />
            then <paramref name="option" /> parameter should specify compression
            quality (value should be between 0 and 9 inclusive).
            </para>
                <para>
            If <paramref name="compression" /> is <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg" />
            then <paramref name="option" /> parameter should specify a JPEG quality
            (value should be between 1 and 100 inclusive).
            </para>
                <para>
            If <paramref name="compression" /> is <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax" />
            then <paramref name="option" /> parameter is ignored.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.Scale(System.Double,BitMiracle.Docotic.Pdf.PdfImageCompression)">
            <summary>
            Scales image using specified scale factor and compresses it using specified
            compression scheme.
            </summary>
            <param name="factor">The scale factor.</param>
            <param name="compression">The compression scheme to use.
            Only <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg" />, <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate" />
            and <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax" /> schemes are supported now.
            </param>
            <overloads>Scales image using specified scale factor and compresses it using
            specified compression scheme.</overloads>
            <remarks>
                <para>The aspect ratio of the image is preserved by this method.</para>
                <para>
            This method uses default options for specified compression scheme.
            </para>
                <para>
            Please use <see cref="M:BitMiracle.Docotic.Pdf.PdfImage.Scale(System.Double,BitMiracle.Docotic.Pdf.PdfImageCompression,System.Int32)" />
            overload if you want to tune up compression scheme.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.Scale(System.Double,BitMiracle.Docotic.Pdf.PdfImageCompression,System.Int32)">
            <summary>
            Scales image using specified scale factor and compresses it using specified
            compression scheme.
            </summary>
            <param name="factor">The scale factor.</param>
            <param name="compression">The compression scheme to use.
            Only <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg" />, <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate" />
            and <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax" /> schemes are supported now.
            </param>
            <param name="option">The option for compression scheme.</param>
            <remarks>
                <para>
            If <paramref name="compression" /> is <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Flate" />
            then <paramref name="option" /> parameter should specify compression
            quality (value should be between 0 and 9 inclusive).
            </para>
                <para>
            If <paramref name="compression" /> is <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Jpeg" />
            then <paramref name="option" /> parameter should specify a JPEG quality
            (value should be between 1 and 100 inclusive).
            </para>
                <para>
            If <paramref name="compression" /> is <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.Group4Fax" />
            then <paramref name="option" /> parameter is ignored.
            </para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.ReplaceWith(System.IO.Stream)">
            <summary>
            Replaces image with the image in the stream.
            </summary>
            <param name="imageStream">The stream with an image.</param>
            <remarks>
                <para>This method replaces all occurrences of the image within the document. If the 
            original image was used on several pages, then the new image will be used in the same
            places of the same pages.</para>
                <para>The stream should contain a complete image encoded with one of the supported
            image compression schemes. This method won't work with only raster bytes or any other
            partial contents.</para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
                <para>Replacing an image can cause unexpected and/or unpleasant visual results. For
            example, image masking effects can be broken if you replace a mask image or an image
            that has a mask. Usually, it is undesirable to replace an image with a new image that
            has very different size and/or proportions.</para>
            </remarks>
            <overloads>Replaces image with the new one.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.ReplaceWith(System.String)">
            <summary>
            Replaces image with the image in the file.
            </summary>
            <param name="imageFile">The name of the image file.</param>
            <remarks>
                <para>This method replaces all occurrences of the image within the document. If the 
            original image was used on several pages, then the new image will be used in the same
            places of the same pages.</para>
                <para>The file should contain a complete image encoded with one of the supported
            image compression schemes. This method won't work with only raster bytes or any other
            partial contents.</para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
                <para>Replacing an image can cause unexpected and/or unpleasant visual results. For
            example, image masking effects can be broken if you replace a mask image or an image
            that has a mask. Usually, it is undesirable to replace an image with a new image that
            has very different size and/or proportions.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImage.ReplaceWith(System.Byte[])">
            <summary>
            Replaces image with the image bytes.
            </summary>
            <param name="imageBytes">The array of image bytes.</param>
            <remarks>
                <para>This method replaces all occurrences of the image within the document. If the 
            original image was used on several pages, then the new image will be used in the same
            places of the same pages.</para>
                <para>The array should contain a complete image encoded with one of the supported
            image compression schemes. This method won't work with only raster bytes or any other
            partial contents.</para>
                <para>
            This method throws <see cref="T:BitMiracle.Docotic.Pdf.UnsupportedImageException" /> when used on an inline 
            image. You can check <see cref="P:BitMiracle.Docotic.Pdf.PdfImage.IsInline" /> property before invoking this method.
            </para>
                <para>Replacing an image can cause unexpected and/or unpleasant visual results. For
            example, image masking effects can be broken if you replace a mask image or an image
            that has a mask. Usually, it is undesirable to replace an image with a new image that
            has very different size and/or proportions.</para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfImageFrame">
            <summary>
            Class for one frame of an image and its options. The options specify how
            the frame should be processed before adding it to <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImageFrame.RecompressAlways">
            <summary>
            Gets or sets a value indicating whether this frame MUST be recompressed
            before adding to document.
            </summary>
            <value>
                <c>true</c> if this frame MUST be recompressed before adding to document;
              otherwise, <c>false</c>.
            </value>
            <remarks>If this value is <c>true</c> then this frame will be recompressed
            using compression scheme specified by the <see cref="P:BitMiracle.Docotic.Pdf.PdfImageFrame.OutputCompression" />
            property before adding to document. If this value is <c>false</c> then
            library will try to add this frame to document without modifications. Please
            note that frame may be recompressed even when this value is <c>false</c> if
            the frame contains image in one of the formats unsupported by the PDF.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImageFrame.OutputCompression">
            <summary>
            Gets or sets the compression to use for this frame's image data during
            recompression.
            </summary>
            <value>
            The compression to use for this frame's image data during recompression.
            </value>
            <remarks>
                <para>The image data gets recompressed if <see cref="P:BitMiracle.Docotic.Pdf.PdfImageFrame.RecompressAlways" />
            property is <c>true</c> or if the frame contains image data in one of the
            formats unsupported by the PDF.
            </para>
                <para>
            Some compression scheme are lossy (i.e. some data may be lost during
            compression) or require image data to be converted to black-and-white format.
            </para>
                <para>
            The <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.JBig2" /> compression methods is not supported yet.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImageFrame.JpegQuality">
            <summary>
            Gets or sets the JPEG quality.
            </summary>
            <value>
            The quality to use in JPEG encoder.
            </value>
            <remarks>
                <para>The JPEG quality value should be between 1 and 100 inclusive.</para>
                <para>
            The quality value of 100 preserves most details but produces biggest output.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImageFrame.Jpeg2000CompressionRatio">
            <summary>
            Gets or sets the JPEG 2000 compression ratio.
            </summary>
            <value>
            The compression ratio to use in JPEG 2000 encoder.
            </value>
            <remarks>
                <para>The JPEG 2000 compression ratio should not be less than 1.</para>
                <para>
            The compression ratio equal to 1 causes lossless compression but produces biggest
            output. The larger compression ratio values cause smaller outputs in expense of image
            detail.
            </para>
                <para>
            The compression ratio of N means "compress N times".
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImageFrame.DeflateQuality">
            <summary>
            Gets or sets the Deflate quality.
            </summary>
            <value>
            The quality to use in Deflate encoder.
            </value>
            <remarks>
                <para>The Deflate quality value should be between 0 and 9 inclusive.</para>
                <para>The quality value of 9 gives best compression.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfImageFrame.ThresholdLevel">
            <summary>
            Gets or sets the threshold level.
            </summary>
            <value>
            The threshold level.
            </value>
            <remarks>
                <para>The threshold level is used to decide which pixels are white and
            which are black when converting image data to black-and-white format.</para>
                <para>The threshold level value should be between 0 and 255 inclusive. A
            threshold value 0 means that library should use midpoint between most
            light and dark pixels as a threshold value.
            </para>
                <para>
            If the frame contains some scanned document or other data with mostly white
            background pixels and mostly black foreground pixels then threshold level
            of 189 or higher is recommended to preserve most of the data.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfImageFrames">
            <summary>
            Class for collection of image frames and their options. The options specify how
            frames should be processed before adding them to <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" />.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImageFrames.SetRecompressAlways(System.Boolean)">
            <summary>
            Sets the <see cref="P:BitMiracle.Docotic.Pdf.PdfImageFrame.RecompressAlways" /> option for all frames.
            </summary>
            <param name="recompressAlways">The value to set for
            <see cref="P:BitMiracle.Docotic.Pdf.PdfImageFrame.RecompressAlways" /> option.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImageFrames.SetOutputCompression(BitMiracle.Docotic.Pdf.PdfImageCompression)">
            <summary>
            Sets the <see cref="P:BitMiracle.Docotic.Pdf.PdfImageFrame.OutputCompression" /> option for all frames.
            </summary>
            <param name="outputCompression">
            The value to set for <see cref="P:BitMiracle.Docotic.Pdf.PdfImageFrame.OutputCompression" /> option.
            The <see cref="F:BitMiracle.Docotic.Pdf.PdfImageCompression.JBig2" /> compression methods is not supported yet.
            </param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImageFrames.SetJpegQuality(System.Int32)">
            <summary>
            Sets the JPEG quality for all frames.
            </summary>
            <param name="quality">The quality to set.</param>
            <remarks>
                <para>The JPEG quality value should be between 1 and 100 inclusive.</para>
                <para>
            The quality value of 100 preserves most details but produces biggest output.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImageFrames.SetJpeg2000CompressionRatio(System.Int32)">
            <summary>
            Sets the JPEG 2000 compression ratio for all frames.
            </summary>
            <param name="compressionRatio">The compression ratio to set.</param>
            <remarks>
                <para>The JPEG 2000 compression ratio should not be less than 1.</para>
                <para>
            The compression ratio equal to 1 causes lossless compression but produces biggest
            output. The larger compression ratio values cause smaller outputs in expense of image
            detail.
            </para>
                <para>
            The compression ratio of N means "compress N times".
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImageFrames.SetDeflateQuality(System.Int32)">
            <summary>
            Sets the Deflate quality for all frames.
            </summary>
            <param name="quality">The quality to set.</param>
            <remarks>
                <para>The Deflate quality value should be between 0 and 9 inclusive.</para>
                <para>The quality value of 9 gives best compression.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfImageFrames.SetThresholdLevel(System.Int32)">
            <summary>
            Sets the threshold level for all frames.
            </summary>
            <param name="level">The threshold level to set.</param>
            <remarks>
                <para>The threshold level is used to decide which pixels are white and
            which are black when converting image data to black-and-white format.</para>
                <para>The threshold level value should be between 0 and 255 inclusive. A
            threshold value 0 means that library should use midpoint between most
            light and dark pixels as a threshold value.
            </para>
                <para>
            If the frames contain some scanned documents or other data with mostly white
            background pixels and mostly black foreground pixels then threshold level
            of 189 or higher is recommended to preserve most of the data.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfInfo">
            <summary>
            Class for a PDF document metadata.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.Author">
            <summary>
            Gets or sets the name of the person who created the document.
            </summary>
            <value>The name of the person who created the document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.Creator">
            <summary>
            Gets or sets the name of the application that created the document.
            </summary>
            <remarks>If the document was converted to PDF from another format,
            this property may contain the name of the application (for example,
            Adobe FrameMaker®) that created the original document from which
            this document was converted.</remarks>
            <value>The the name of the application that created the
            document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.Keywords">
            <summary>
            Gets or sets the keywords associated with the document.
            </summary>
            <value>The keywords associated with the document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.Producer">
            <summary>
            Gets or sets the name of the application that produced the document.
            </summary>
            <value>The name of the application that produced the document.</value>
            <remarks>If the document was converted to PDF from another format,
            this property may contain the name of the application (for example,
            Acrobat Distiller) that converted it to PDF.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.Subject">
            <summary>
            Gets or sets the subject of the document.
            </summary>
            <value>The subject of the document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
            <value>The title of the document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.CreationDate">
            <summary>
            Gets the date and time the document was created.
            </summary>
            <value>The date and time the document was created or <c>null</c> if there is no value
            set for this property.</value>
            <remarks>
            Returned date and time expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInfo.ModifiedDate">
            <summary>
            Gets the date and time the document was most recently modified.
            </summary>
            <value>The date and time the document was most recently modified or <c>null</c> if
            there is no value set for this property.</value>
            <remarks>
            Returned date and time expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfInfo.Clear(System.Boolean)">
            <summary>
            Removes metadata properties.
            </summary>
            <param name="customOnly">if set to <c>true</c> then only custom properties will be
            removed; otherwise all properties will be removed.</param>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfJavaScriptCollection">
            <summary>
            Collection of JavaScript actions.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLayer">
            <summary>
            Represents a layer in a PDF document. The layer is a section of content in a PDF document
            that can be selectively viewed or hidden by document authors or consumers. Layers are
            also known as optional content groups.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLayer.Name">
            <summary>
            Gets the name of this layer.
            </summary>
            <value>
            The name of this layer.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLayer.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfLayer" /> is visible
            by default.
            </summary>
            <value>
                <c>true</c> if layer is visible by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLayer.GetIntents">
            <summary>
            Gets the array of this layer intents (intended uses of the graphics in the layer).
            </summary>
            <returns>The array of this layer intents (intended uses of the graphics in the
            layer).</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfLayer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfList`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.
            </summary>
            <param name="item">
            The object to be added to the end of the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.
            </param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfList`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.</param>
            <returns>
                <c>true</c> if item is successfully removed; otherwise, <c>false</c>.
            This method also returns <c>false</c> if item was not found in the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:BitMiracle.Docotic.Pdf.PdfList`1" />.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfOutlineItem">
            <summary>
            Class for a PDF outline item (bookmark).
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Parent">
            <summary>
            Gets the parent of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> in the outline
            hierarchy.
            </summary>
            <value>The parent of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> in the
            outline hierarchy.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Page">
            <summary>
            Gets the page that should be displayed when this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated or <c>null</c> if there is no
            such page specified for this outline item.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.PageIndex">
            <summary>
            Gets the index of the page that should be displayed when this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated or -1 if there is no
            such page specified for this outline item.
            </summary>
            <remarks>Please do not store retrieved index because it may become
            invalid when collection of document pages will be changed.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Title">
            <summary>
            Gets or sets the text to be displayed on the screen for
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </summary>
            <value>The text to be displayed on the screen for this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Action">
            <summary>
            Gets or sets the action to be performed when this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.
            </summary>
            <value>The action to be performed when this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Open">
            <summary>
            Gets or sets a value indicating whether this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is open.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is open;
            otherwise, <c>false</c>.</value>
            <remarks>
                <para>
            When a <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is open, its immediate
            children in the hierarchy become visible on the screen; each child
            may in turn be open or closed, selectively revealing or hiding
            further parts of the hierarchy. When a <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />
            item is closed, all of its descendants in the hierarchy
            are hidden.
            </para>
                <para>
            Any <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> without child items is always open. So, setting
            this property to <c>false</c> has no effect for items without child items.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Children">
            <summary>
            Gets the collection of child outline items of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </summary>
            <value>The collection of child outline items of 
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.ChildCount">
            <summary>
            Gets the number of child outline items of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </summary>
            <value>The number of child outline items of
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Color">
            <summary>
            (PDF 1.4) Gets or sets the color to be used for the outline entry's text.
            </summary>
            <value>
            The color to be used for the outline entry's text.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Bold">
            <summary>
            (PDF 1.4) Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />
            should be displayed in bold.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />
            should be displayed in bold; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfOutlineItem.Italic">
            <summary>
            (PDF 1.4) Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />
            should be displayed in italic.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />
            should be displayed in italic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.GetChild(System.Int32)">
            <summary>
            Gets the child outline item with the specified index.
            </summary>
            <param name="index">The zero-based index of the child outline item
            to get.</param>
            <returns>
            The child <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified index.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.AddChild(System.String)">
            <summary>
            Adds new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title to the
            end of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s collection of child items.
            </summary>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <returns>The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</returns>
            <overloads>Adds the new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified
            properties to the end of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s collection
            of child items.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.AddChild(System.String,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Adds new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            action to the end of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s collection
            of child items.
            </summary>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="action">The action to be performed when the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.AddChild(System.String,BitMiracle.Docotic.Pdf.PdfDocumentView)">
            <summary>
            Adds new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            document view to the end of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s
            collection of child items.
            </summary>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="view">The document view to be displayed when the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.AddChild(System.String,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Adds new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            page to the end of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s collection
            of child items.
            </summary>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="page">The page to be displayed when the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.AddChild(System.String,System.Int32)">
            <summary>
            Adds new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            page index to the end of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s
            collection of child items.
            </summary>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="pageIndex">The index of the page to be displayed when
            the new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.InsertChild(System.Int32,System.String)">
            <summary>
            Inserts new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title into
            the collection of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s child items at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which new 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> should be inserted.</param>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <returns>
            The newly inserted <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
            <overloads>Inserts new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified
            properties into the collection of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s
            child items at the specified index.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.InsertChild(System.Int32,System.String,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Inserts new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            action into the collection of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s
            child items at the specified index.
            </summary>
            <param name="index">The zero-based index at which new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> should be inserted.</param>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="action">The action to be performed when the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly inserted <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.InsertChild(System.Int32,System.String,BitMiracle.Docotic.Pdf.PdfDocumentView)">
            <summary>
            Inserts new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            document view into the collection of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s child items at the specified index.
            </summary>
            <param name="index">The zero-based index at which new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> should be inserted.</param>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="view">The document view to be displayed when the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly inserted <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.InsertChild(System.Int32,System.String,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Inserts new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            page into the collection of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s
            child items at the specified index.
            </summary>
            <param name="index">The zero-based index at which new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> should be inserted.</param>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="page">The page to be displayed when the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly inserted <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.InsertChild(System.Int32,System.String,System.Int32)">
            <summary>
            Inserts new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title and
            page index into the collection of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s child items at the specified index.
            </summary>
            <param name="index">The zero-based index at which new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> should be inserted.</param>
            <param name="title">The text to be displayed on the screen for the
            new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</param>
            <param name="pageIndex">The index of the page to be displayed when
            the new <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> is activated.</param>
            <returns>
            The newly inserted <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.IndexOfChild(System.String)">
            <summary>
            Retrieves the zero-based index of the first occurrence of a child
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title.
            </summary>
            <param name="title">The title (the text to be displayed on the
            screen) of the item to find in the collection.</param>
            <returns>The zero-based index of the first occurrence of a child
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified title, if found; 
            otherwise, -1.</returns>
            <overloads>Retrieves the zero-based index of the first occurrence of
            a child <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.IndexOfChild(BitMiracle.Docotic.Pdf.PdfOutlineItem)">
            <summary>
            Retrieves the zero-based index of the first occurrence of the
            specified child <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />.
            </summary>
            <param name="child">The <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> representing
            the child item to locate in the collection of child items.</param>
            <returns>The zero-based index of the first occurrence of the
            specified child <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />, if found; 
            otherwise, -1.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.RemoveAllChildren">
            <summary>
            Removes all items from the collection of this 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s child items.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.RemoveChild(BitMiracle.Docotic.Pdf.PdfOutlineItem)">
            <summary>
            Removes the specified <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> from the
            collection of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s child items.
            </summary>
            <param name="child">The <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> representing
            the child item to remove from the collection of child items.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.RemoveChildAt(System.Int32)">
            <summary>
            Removes the <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" /> with specified index from the
            collection of this <see cref="T:BitMiracle.Docotic.Pdf.PdfOutlineItem" />'s child items.
            </summary>
            <param name="index">The zero-based index of the item to remove from
            the collection of child items.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfOutlineItem.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPage">
            <summary>
            Class for a <see cref="T:BitMiracle.Docotic.Pdf.PdfDocument" /> page.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Canvas">
            <summary>
            Gets the page canvas.
            </summary>
            <value>The page canvas.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Thumbnail">
            <summary>
            Gets or sets the thumbnail image to be used for this page by a
            viewer application instead of auto-generated image of the contents
            of this page in miniature form.
            </summary>
            <value>The thumbnail image to be used for this page by a
            viewer application.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.AutoCreateUriActions">
            <summary>
            Gets or sets a value indicating whether to check each text string
            drawn on this page using 
            <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString" />
            or <see cref="Overload:BitMiracle.Docotic.Pdf.PdfCanvas.DrawText" /> for
            URIs and create <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" />s for each found URI.
            </summary>
            <value>
                <c>true</c> if to check each drawn text string for URIs and create
            <see cref="T:BitMiracle.Docotic.Pdf.PdfUriAction" />s for each found URI;
            otherwise, <c>false</c>.
            </value>
            <remarks>Default value: equal to value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.AutoCreateUriActions" />.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Width">
            <summary>
            Gets or sets the width of the page, expressed in PDF's default user space units.
            </summary>
            <value>The width of the page, expressed in PDF's default user space units.</value>
            <remarks>
                <para>Default value: 595 (the width of the A4 sheet).</para>
                <para>
            NOTE: Changing the value of this property updates value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox" /> property.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Height">
            <summary>
            Gets or sets the height of the page, expressed in PDF's default user space units.
            </summary>
            <value>The height of the page, expressed in PDF's default user space units.</value>
            <remarks>
                <para>Default value: 842 (the height of the A4 sheet).</para>
                <para>
            NOTE: Changing the value of this property updates value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox" /> property.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Size">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperSize" /> value specifying 
            the size of the page.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperSize" /> value specifying 
            the size of the page.</value>
            <remarks>
                <para>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4" />.</para>
            </remarks>
            <para>
            NOTE: Changing the value of this property updates value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox" /> property.
            </para>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox">
            <summary>
            Gets or sets the media box of the page.
            </summary>
            <value>
            The media box of the page expressed in PDF's default user space coordinate system.
            In default user space the positive X axis extends horizontally to the right and
            the positive Y axis extends vertically upward.
            </value>
            <remarks>
                <para>
            Default value: { 0, 0, <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Width" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Height" /> }
            </para>
                <para>
            The media box defines the boundaries of the physical medium on which the
            page is to be printed. It may include any extended area surrounding the
            finished page for bleed, printing marks, or other such purposes. It may also
            include areas close to the edges of the medium that cannot be marked because
            of physical limitations of the output device. Content falling outside this boundary
            can safely be discarded without affecting the meaning of the PDF file.
            </para>
                <para>
            Changing the value of this property resets values of other page boxes 
            (<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.CropBox" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.BleedBox" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.TrimBox" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.ArtBox" />).
            Their values will be reset to this property's value.
            </para>
                <para>
            Additionally, changing the value of this property resets values of
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Width" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Height" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Size" />,
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Orientation" /> properties.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.CropBox">
            <summary>
            Gets or sets the crop box of the page.
            </summary>
            <value>
            The crop box of the page expressed in PDF's default user space coordinate system.
            In default user space the positive X axis extends horizontally to the right and
            the positive Y axis extends vertically upward.
            </value>
            <remarks>
                <para>
            Default value: Equal to <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox" /></para>
                <para>
            The crop box defines the region to which the contents of the page are to be
            clipped (cropped) when displayed or printed.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.BleedBox">
            <summary>
            Gets or sets the bleed box of the page.
            </summary>
            <value>
            The bleed box of the page expressed in PDF's default user space coordinate system.
            In default user space the positive X axis extends horizontally to the right and
            the positive Y axis extends vertically upward.
            </value>
            <remarks>
                <para>
            Default value: Equal to <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.CropBox" /></para>
                <para>
            The bleed box defines the region to which the contents of the page
            should be clipped when output in a production environment. This may include
            any extra bleed area needed to accommodate the physical limitations of cutting,
            folding, and trimming equipment. The actual printed page may include
            printing marks that fall outside the bleed box.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.TrimBox">
            <summary>
            Gets or sets the trim box of the page.
            </summary>
            <value>
            The trim box of the page expressed in PDF's default user space coordinate system.
            In default user space the positive X axis extends horizontally to the right and
            the positive Y axis extends vertically upward.
            </value>
            <remarks>
                <para>
            Default value: Equal to <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.CropBox" /></para>
                <para>
            The trim box defines the intended dimensions of the finished page
            after trimming. It may be smaller than the <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox" />
            to allow for production-related content, such as printing instructions, cut marks, or color bars.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.ArtBox">
            <summary>
            Gets or sets the art box of the page.
            </summary>
            <value>
            The art box of the page expressed in PDF's default user space coordinate system.
            In default user space the positive X axis extends horizontally to the right and
            the positive Y axis extends vertically upward.
            </value>
            <remarks>
                <para>
            Default value: Equal to <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.CropBox" /></para>
                <para>
            The art box defines the extent of the page’s meaningful content 
            (including potential white space) as intended by the page’s creator.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Orientation">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperOrientation" /> value specifying 
            the orientation of the page.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperOrientation" /> value specifying 
            the orientation of the page.</value>
            <remarks>
                <para>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfPaperOrientation.Portrait" />.</para>
                <para>
            NOTE: Changing the value of this property updates value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.MediaBox" /> property.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfRotation" /> value specifying 
            the rotation of the page.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfRotation" /> value specifying 
            the rotation of the page.</value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfRotation.None" />.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Resolution">
            <summary>
            Gets the resolution of the canvas.
            </summary>
            <value>The resolution of the canvas.</value>
            <remarks>The resolution of the canvas measures the number of pixels
            per inch of distance along the two linear dimensions. Resolution is
            the same horizontally and vertically.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.XObjects">
            <summary>
            Gets the collection of form XObjects associated with this page.
            </summary>
            <value>The collection of form XObjects associated with this page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.XObjectCount">
            <summary>
            Gets the number of form XObjects associated with this page.
            </summary>
            <value>The number of form XObjects associated with this page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Widgets">
            <summary>
            Gets the collection of widgets (annotations and controls) associated
            with this page.
            </summary>
            <value>The collection of widgets associated with this page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.WidgetCount">
            <summary>
            Gets the number of widgets (annotations and controls) associated 
            with this page.
            </summary>
            <value>The number of widgets associated with this page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.Controls">
            <summary>
            Gets the collection of controls associated with this page.
            </summary>
            <value>The collection of controls associated with this page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPage.ControlCount">
            <summary>
            Gets the number of controls associated with this page.
            </summary>
            <value>The number of controls associated with this page.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetSortedWidgets">
            <summary>
            Gets the sorted collection of widgets (annotations and controls) associated
            with this page.
            </summary>
            <returns>The sorted collection of widgets associated with this page.</returns>
            <remarks>Widgets in the collection are sorted by their location on the page.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetSortedControls">
            <summary>
            Gets the sorted collection controls associated with this page.
            </summary>
            <returns>The sorted collection of controls associated with this page.</returns>
            <remarks>Controls in the collection are sorted by their location on the page.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetXObject(System.Int32)">
            <summary>
            Gets the XObject with the specified index.
            </summary>
            <param name="index">The zero-based index of the XObject to get.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfXObject" /> with specified index.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetImages">
            <summary>
            Returns the enumerator that iterates through the collection of page images including
            inline images.
            </summary>
            <returns>The enumerator that can be used to iterate through the collection of
            page images including inline images.</returns>
            <overloads>
            Returns the enumerator that iterates through the collection of page images.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetImages(System.Boolean)">
            <summary>
            Returns the enumerator that iterates through the collection of page images including
            or excluding the inline images.
            </summary>
            <param name="includeInlineImages">The value indicating whether to include inline
            images in the collection of page images.</param>
            <returns>The enumerator that can be used to iterate through the collection of
            page images including or excluding the inline images.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetPaintedImages">
            <summary>
            Gets the collection of <see cref="T:BitMiracle.Docotic.Pdf.PdfPaintedImage" /> objects for all images
            painted on the page.
            </summary>
            <returns>The collection of <see cref="T:BitMiracle.Docotic.Pdf.PdfPaintedImage" /> objects for all
            images painted on the page.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetWidget(System.Int32)">
            <summary>
            Gets the widget with the specified index from the collection of 
            controls associated with this page 
            </summary>
            <param name="index">The zero-based index of the widget to get.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" /> with specified index.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetControl(System.Int32)">
            <summary>
            Gets the control with the specified index from the collection
            of controls associated with this page.
            </summary>
            <param name="index">The zero-based index of the control to get.</param>
            <returns>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfControl" /> with specified index.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddActionArea(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Adds the new action area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the action area.</param>
            <param name="size">The size of the action area.</param>
            <param name="action">The action to be performed when the action area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
            <overloads>Adds the new action area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddActionArea(System.Drawing.PointF,System.Drawing.SizeF,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Adds the new action area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the action area.</param>
            <param name="size">The size of the action area.</param>
            <param name="action">The action to be performed when the action area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddActionArea(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Adds the new action area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the action area.</param>
            <param name="action">The action to be performed when the action area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddActionArea(System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Adds the new action area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the action area.</param>
            <param name="action">The action to be performed when the action area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddActionArea(System.Double,System.Double,System.Double,System.Double,BitMiracle.Docotic.Pdf.PdfAction)">
            <summary>
            Adds the new action area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of 
            the action area.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the action area.</param>
            <param name="width">The width of the action area.</param>
            <param name="height">The height of the action area.</param>
            <param name="action">The action to be performed when the action area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.Int32)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
            <overloads>Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.PointF,System.Drawing.SizeF,System.Int32)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.Int32,System.Double)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.PointF,System.Drawing.SizeF,System.Int32,System.Single)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.PointF,System.Drawing.SizeF,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfPage,System.Double)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.PointF,System.Drawing.SizeF,BitMiracle.Docotic.Pdf.PdfPage,System.Single)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the link area.</param>
            <param name="size">The size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfRectangle,System.Int32)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.RectangleF,System.Int32)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfRectangle,System.Int32,System.Double)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.RectangleF,System.Int32,System.Single)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfPage,System.Double)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Drawing.RectangleF,BitMiracle.Docotic.Pdf.PdfPage,System.Single)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of 
            the link area.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the link area.</param>
            <param name="width">The width of the link area.</param>
            <param name="height">The height of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of 
            the link area.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the link area.</param>
            <param name="width">The width of the link area.</param>
            <param name="height">The height of the link area.</param>
            <param name="pageIndex">Index of the page to be displayed when
            the link area is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Double,System.Double,System.Double,System.Double,BitMiracle.Docotic.Pdf.PdfPage)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of 
            the link area.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the link area.</param>
            <param name="width">The width of the link area.</param>
            <param name="height">The height of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddLinkToPage(System.Double,System.Double,System.Double,System.Double,BitMiracle.Docotic.Pdf.PdfPage,System.Double)">
            <summary>
            Adds the new link area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of
            the link area.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the link area.</param>
            <param name="width">The width of the link area.</param>
            <param name="height">The height of the link area.</param>
            <param name="page">The page to be displayed when the link area
            is activated.</param>
            <param name="topOffset">The vertical coordinate of the page that
            should be positioned at the top edge of the window when the link 
            target page is displayed.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddHyperlink(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.Uri)">
            <summary>
            Adds the new hyperlink area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the hyperlink area.</param>
            <param name="size">The size of the hyperlink area.</param>
            <param name="uri">The uniform resource identifier (URI)
            to be resolved when the hyperlink area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
            <overloads>Adds the new hyperlink area to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddHyperlink(System.Drawing.PointF,System.Drawing.SizeF,System.Uri)">
            <summary>
            Adds the new hyperlink area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the hyperlink area.</param>
            <param name="size">The size of the hyperlink area.</param>
            <param name="uri">The uniform resource identifier (URI)
            to be resolved when the hyperlink area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddHyperlink(BitMiracle.Docotic.Pdf.PdfRectangle,System.Uri)">
            <summary>
            Adds the new hyperlink area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the hyperlink area.</param>
            <param name="uri">The uniform resource identifier (URI)
            to be resolved when the hyperlink area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddHyperlink(System.Drawing.RectangleF,System.Uri)">
            <summary>
            Adds the new hyperlink area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the hyperlink area.</param>
            <param name="uri">The uniform resource identifier (URI)
            to be resolved when the hyperlink area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddHyperlink(System.Double,System.Double,System.Double,System.Double,System.Uri)">
            <summary>
            Adds the new hyperlink area to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of
            the hyperlink area.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the hyperlink area.</param>
            <param name="width">The width of the hyperlink area.</param>
            <param name="height">The height of the hyperlink area.</param>
            <param name="uri">The uniform resource identifier (URI)
            to be resolved when the hyperlink area is activated.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextAnnotation(BitMiracle.Docotic.Pdf.PdfPoint,System.String)">
            <summary>
            Adds the new text annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the text annotation.</param>
            <param name="title">The title for the annotation.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> object.
            </returns>
            <overloads>Adds the new text annotation to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextAnnotation(System.Drawing.PointF,System.String)">
            <summary>
            Adds the new text annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the text annotation.</param>
            <param name="title">The title for the annotation.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextAnnotation(BitMiracle.Docotic.Pdf.PdfPoint,System.String,System.String)">
            <summary>
            Adds the new text annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the text annotation.</param>
            <param name="title">The title for the annotation.</param>
            <param name="contents">The contents of the annotation.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextAnnotation(System.Drawing.PointF,System.String,System.String)">
            <summary>
            Adds the new text annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the text annotation.</param>
            <param name="title">The title for the annotation.</param>
            <param name="contents">The contents of the annotation.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextAnnotation(System.Double,System.Double,System.String,System.String)">
            <summary>
            Adds the new text annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of
            the text annotation.</param>
            <param name="y">The y-coordinate of the upper-left corner of
            the text annotation.</param>
            <param name="title">The title for the annotation.</param>
            <param name="contents">The contents of the annotation.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddHighlightAnnotation(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Adds the new highlight annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="contents">The contents of the annotation.</param>
            <param name="bounds">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of the highlighted area.
            </param>
            <param name="color">Color of the highlighted area.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfHighlightAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddJaggedUnderlineAnnotation(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Adds the new jagged-underline annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="contents">The contents of the annotation.</param>
            <param name="bounds">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of the underlined area.
            </param>
            <param name="lineColor">Color of the annotation's line.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfJaggedUnderlineAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddStrikeoutAnnotation(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Adds the new strikeout annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="contents">The contents of the annotation.</param>
            <param name="bounds">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of the strikethrough area.
            </param>
            <param name="lineColor">Color of the annotation's line.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfStrikeoutAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddUnderlineAnnotation(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfColor)">
            <summary>
            Adds the new underline annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="contents">The contents of the annotation.</param>
            <param name="bounds">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of the underlined area.
            </param>
            <param name="lineColor">Color of the annotation's line.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfUnderlineAnnotation" /> object.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)">
            <summary>
            Adds the new file attachment annotation to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="bounds">The bounds of the file attachment annotation.</param>
            <param name="fileSpec">
            The file specification of a file attachment to use in the annotation.
            </param>
            <returns>The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation" /> object.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new button control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the button.</param>
            <param name="size">The size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds the new button control to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new button control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the button.</param>
            <param name="size">The size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new button control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.Drawing.RectangleF)">
            <summary>
            Adds the new button control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new button control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of
            the button.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the button.</param>
            <param name="width">The width of the button.</param>
            <param name="height">The height of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new button control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the button control.</param>
            <param name="position">The position of the upper-left corner of
            the button.</param>
            <param name="size">The size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.String,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new button control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the button control.</param>
            <param name="position">The position of the upper-left corner of
            the button.</param>
            <param name="size">The size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new button control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the button control.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the new button control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the button control.</param>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddButton(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new button control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the button control.</param>
            <param name="left">The x-coordinate of the upper-left corner of
            the button.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the button.</param>
            <param name="width">The width of the button.</param>
            <param name="height">The height of the button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Adds the new check box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="height">The height of the check box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds the new check box control to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.Drawing.PointF,System.Single)">
            <summary>
            Adds the new check box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="height">The height of the check box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.String)">
            <summary>
            Adds the new check box control with auto-generated name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="size">The size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.Drawing.PointF,System.Drawing.SizeF,System.String)">
            <summary>
            Adds the new check box control with auto-generated name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="size">The size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new check box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the check box. Width of rectangle is not used -
            the check box area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.Drawing.RectangleF)">
            <summary>
            Adds the new check box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the check box. Width of rectangle is not used -
            the check box area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(BitMiracle.Docotic.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds the new check box control with auto-generated name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.Drawing.RectangleF,System.String)">
            <summary>
            Adds the new check box control with auto-generated name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.Double,System.Double,System.Double)">
            <summary>
            Adds the new check box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the check box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the check box.</param>
            <param name="height">The height of the check box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Adds the new check box control with auto-generated name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the check box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the check box.</param>
            <param name="width">The width of the check box with caption.</param>
            <param name="height">The height of the check box.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Adds the new check box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="height">The height of the check box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,System.Drawing.PointF,System.Single)">
            <summary>
            Adds the new check box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="height">The height of the check box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.String)">
            <summary>
            Adds the new check box control with specified unique name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="size">The size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,System.Drawing.PointF,System.Drawing.SizeF,System.String)">
            <summary>
            Adds the new check box control with specified unique name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="position">The position of the upper-left corner of the check box.</param>
            <param name="size">The size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new check box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the check box. Width of rectangle is not used -
            the check box area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the new check box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the check box. Width of rectangle is not used -
            the check box area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds the new check box control with specified unique name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,System.Drawing.RectangleF,System.String)">
            <summary>
            Adds the new check box control with specified unique name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the check box with caption.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new check box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="left">The x-coordinate of the upper-left corner of the check box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the check box.</param>
            <param name="height">The height of the check box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddCheckBox(System.String,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Adds the new check box control with specified unique name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the check box control.</param>
            <param name="left">The x-coordinate of the upper-left corner of the check box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the check box.</param>
            <param name="width">The width of the check box with caption.</param>
            <param name="height">The height of the check box.</param>
            <param name="caption">The check box caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new check box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new text box control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the text box.</param>
            <param name="size">The size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds the new text box control to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new text box control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the text box.</param>
            <param name="size">The size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new text box control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.Drawing.RectangleF)">
            <summary>
            Adds the new text box control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new text box control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of
            the text box.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the text box.</param>
            <param name="width">The width of the text box.</param>
            <param name="height">The height of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new text box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the text box control.</param>
            <param name="position">The position of the upper-left corner of
            the text box.</param>
            <param name="size">The size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.String,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new text box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the text box control.</param>
            <param name="position">The position of the upper-left corner of
            the text box.</param>
            <param name="size">The size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new text box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the text box control.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the new text box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the text box control.</param>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddTextBox(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new text box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the text box control.</param>
            <param name="left">The x-coordinate of the upper-left corner of
            the text box.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the text box.</param>
            <param name="width">The width of the text box.</param>
            <param name="height">The height of the text box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new text box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new combo box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the combo box.</param>
            <param name="size">The size of the combo box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds the new combo box control to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new combo box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the combo box.</param>
            <param name="size">The size of the combo box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new combo box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of
            the combo box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.Drawing.RectangleF)">
            <summary>
            Adds the new combo box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">
            The <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and the size of the
            combo box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new combo box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the combo box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the combo box.</param>
            <param name="width">The width of the combo box.</param>
            <param name="height">The height of the combo box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new combo box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the combo box control.</param>
            <param name="position">The position of the upper-left corner of the combo box.</param>
            <param name="size">The size of the combo box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.String,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new combo box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the combo box control.</param>
            <param name="position">The position of the upper-left corner of the combo box.</param>
            <param name="size">The size of the combo box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new combo box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the combo box control.</param>
            <param name="boundingBox">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of
            the combo box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the new combo box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the combo box control.</param>
            <param name="boundingBox">
            The <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and the size of the
            combo box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddComboBox(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new combo box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the combo box control.</param>
            <param name="left">The x-coordinate of the upper-left corner of the combo box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the combo box.</param>
            <param name="width">The width of the combo box.</param>
            <param name="height">The height of the combo box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new combo box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new list box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the list box.</param>
            <param name="size">The size of the list box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds the new list box control to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new list box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the list box.</param>
            <param name="size">The size of the list box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new list box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of
            the list box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.Drawing.RectangleF)">
            <summary>
            Adds the new list box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">
            The <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and the size of the
            list box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new list box control with auto-generated name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the list box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the list box.</param>
            <param name="width">The width of the list box.</param>
            <param name="height">The height of the list box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the new list box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the list box control.</param>
            <param name="position">The position of the upper-left corner of the list box.</param>
            <param name="size">The size of the list box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.String,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Adds the new list box control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the list box control.</param>
            <param name="position">The position of the upper-left corner of the list box.</param>
            <param name="size">The size of the list box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new list box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the list box control.</param>
            <param name="boundingBox">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that specifies the location and the size of
            the list box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the new list box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the list box control.</param>
            <param name="boundingBox">
            The <see cref="T:System.Drawing.RectangleF" /> structure that specifies the location and the size of the
            list box.
            </param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddListBox(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new list box control with specified unique name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the list box control.</param>
            <param name="left">The x-coordinate of the upper-left corner of the list box.</param>
            <param name="top">The y-coordinate of the upper-left corner of the list box.</param>
            <param name="width">The width of the list box.</param>
            <param name="height">The height of the list box.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new list box is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="height">The height of the radio button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds the new radio button control to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.Drawing.PointF,System.Single)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="height">The height of the radio button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.String)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="size">The size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.Drawing.PointF,System.Drawing.SizeF,System.String)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="size">The size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the radio button. Width of rectangle is not used -
            the radio button area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.Drawing.RectangleF)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the radio button. Width of rectangle is not used -
            the radio button area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(BitMiracle.Docotic.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.Drawing.RectangleF,System.String)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.Double,System.Double,System.Double)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the radio button.</param>
            <param name="top">The y-coordinate of the upper-left corner of the radio button.</param>
            <param name="height">The height of the radio button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Adds the new radio button control with auto-generated radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the radio button.</param>
            <param name="top">The y-coordinate of the upper-left corner of the radio button.</param>
            <param name="width">The width of the radio button with caption.</param>
            <param name="height">The height of the radio button.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,BitMiracle.Docotic.Pdf.PdfPoint,System.Double)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="height">The height of the radio button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,System.Drawing.PointF,System.Single)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="height">The height of the radio button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize,System.String)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="size">The size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,System.Drawing.PointF,System.Drawing.SizeF,System.String)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="position">The position of the upper-left corner of the radio button.</param>
            <param name="size">The size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the radio button. Width of rectangle is not used -
            the radio button area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the radio button. Width of rectangle is not used -
            the radio button area will be a square with a side equals to rectangle's height.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,BitMiracle.Docotic.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,System.Drawing.RectangleF,System.String)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="boundingBox">The <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the location and the size of the radio button with caption.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="left">The x-coordinate of the upper-left corner of the radio button.</param>
            <param name="top">The y-coordinate of the upper-left corner of the radio button.</param>
            <param name="height">The height of the radio button.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddRadioButton(System.String,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Adds the new radio button control with specified unique radio button
            group name and caption to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the radio button group to which
            the new radio button control should be added.</param>
            <param name="left">The x-coordinate of the upper-left corner of the radio button.</param>
            <param name="top">The y-coordinate of the upper-left corner of the radio button.</param>
            <param name="width">The width of the radio button with caption.</param>
            <param name="height">The height of the radio button.</param>
            <param name="caption">The radio button caption.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new radio button is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddSignatureField(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds a new unsigned signature field control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="position">The position of the upper-left corner of
            the signature field.</param>
            <param name="size">The size of the signature field.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new signature field is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
            <overloads>Adds a new unsigned signature field control to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddSignatureField(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds a new unsigned signature field control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the signature field.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> object.
            </returns>
            <remarks>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new signature field is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddSignatureField(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new unsigned signature field control with auto-generated name to
            the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of
            the signature field.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the signature field.</param>
            <param name="width">The width of the signature field.</param>
            <param name="height">The height of the signature field.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> object.
            </returns>
            <remarks>
                <para>Provide zero width and/or height to have an invisible signature field.</para>
                <para>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new signature field is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddSignatureField(System.String,BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds a new unsigned signature field control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the signature field control.</param>
            <param name="position">The position of the upper-left corner of
            the signature field.</param>
            <param name="size">The size of the signature field.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> object.
            </returns>
            <remarks>
                <para>Provide zero width and/or height to have an invisible signature field.</para>
                <para>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new signature field is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddSignatureField(System.String,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Adds a new unsigned signature field control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the signature field control.</param>
            <param name="boundingBox">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure
            that specifies the location and the size of the signature field.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> object.
            </returns>
            <remarks>
                <para>Provide zero width and/or height to have an invisible signature field.</para>
                <para>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new signature field is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.AddSignatureField(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new unsigned signature field control with specified unique name
            to the <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <param name="name">The unique name of the signature field control.</param>
            <param name="left">The x-coordinate of the upper-left corner of
            the signature field.</param>
            <param name="top">The y-coordinate of the upper-left corner of
            the signature field.</param>
            <param name="width">The width of the signature field.</param>
            <param name="height">The height of the signature field.</param>
            <returns>
            The newly created <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" /> object.
            </returns>
            <remarks>
                <para>Provide zero width and/or height to have an invisible signature field.</para>
                <para>
            The <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> of the new signature field is set to the rotation
            (PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />) of the owner page.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetText">
            <summary>
            Retrieves all text drawn on the page in plain text format.
            </summary>
            <returns>All text drawn on the page in plain text format.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetText(BitMiracle.Docotic.Pdf.PdfTextExtractionOptions)">
            <summary>
            Retrieves all text drawn on the page according to specified options.
            </summary>
            <param name="options">The text extraction options.</param>
            <returns>
            All text drawn on the page according to specified options.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetTextWithFormatting">
            <summary>
            Retrieves all text drawn on the page formatted as seen in a PDF viewer.
            </summary>
            <returns>All text drawn on the page formatted as seen in a PDF viewer.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetWords">
            <summary>
            Retrieves collection of all words drawn on the page with their bounding rectangles.
            </summary>
            <returns>Collection of all words drawn on the page with their bounding 
            rectangles.</returns>
            <remarks>This method is useful if you want to highlight a word on the page
            or if you want to cover some words with a colored rectangle.</remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetChars">
            <summary>
            Retrieves collection of all characters drawn on the page with their bounding rectangles.
            </summary>
            <returns>Collection of all characters drawn on the page with their bounding rectangles.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetObjects">
            <summary>
            Retrieves collection of all objects drawn on the page.
            </summary>
            <returns>Collection of all objects drawn on the page.</returns>
            <remarks>
                <para>The collection is ordered. Each subsequent object in the collection is
            drawn after the previous one.</para>
                <para>This method is useful if you want to analyze contents of the page.</para>
            </remarks>
            <overloads>Retrieves collection of all objects drawn on the page.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.GetObjects(BitMiracle.Docotic.Pdf.PdfObjectExtractionOptions)">
            <summary>
            Retrieves collection of all objects drawn on the page.
            </summary>
            <param name="options">The object extraction options.</param>
            <returns>Collection of all objects drawn on the page.</returns>
            <remarks>
                <para>The collection is ordered. Each subsequent object in the collection is
            drawn after the previous one.</para>
                <para>This method is useful if you want to analyze contents of the page.</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.Save(System.String,BitMiracle.Docotic.Pdf.PdfDrawOptions)">
            <summary>
            Saves an image of the page to the file with specified name.
            </summary>
            <param name="fileName">Name of the file to save an image of the page to.</param>
            <param name="options">The options to use while creating the image.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.Save(System.IO.Stream,BitMiracle.Docotic.Pdf.PdfDrawOptions)">
            <summary>
            Saves an image of the page to the specified stream.
            </summary>
            <param name="stream">The stream to save an image of the page to.</param>
            <param name="options">The options to use while creating the image.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the page on a <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw the page on.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageLabelingRange">
            <summary>
            Class for a page labeling range. Describes a range of pages and labeling
            characteristics for the pages in the range.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageLabelingRange.FirstPage">
            <summary>
            Gets or sets the zero-based index of the first page in this range.
            </summary>
            <value>
            The zero-based index of the first page in this range.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageLabelingRange.LastPage">
            <summary>
            Gets or sets the zero-based index of the last page in this range.
            </summary>
            <value>
            The zero-based index of the last page in this range.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageLabelingRange.NumberingStyle">
            <summary>
            Gets or sets the numbering style to be used for the numeric portion of 
            page labels.
            </summary>
            <value>
            The numbering style to be used for the numeric portion of page labels.
            </value>
            <remarks>If number style is <see cref="F:BitMiracle.Docotic.Pdf.PdfPageNumberingStyle.Unspecified" />
            then page labels won't contain numeric portion.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageLabelingRange.Prefix">
            <summary>
            Gets or sets the prefix for page labels in this range.
            </summary>
            <value>
            The prefix for page labels in this range.
            </value>
            <remarks>The prefix is optional and may be <c>null</c> or empty string.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageLabelingRange.StartNumber">
            <summary>
            Gets or sets the start number (i.e value of the numeric portion for the
            first page label in the range).
            </summary>
            <value>
            The start number.
            </value>
            <remarks>
                <para>Subsequent pages are numbered sequentially from this value.</para>
                <para>The start number is optional and may be 0 which means that start
            number should not be used (or not specified).</para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabelingRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageLabels">
            <summary>
            Collection of page labeling ranges.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabels.AddRange(System.Int32,BitMiracle.Docotic.Pdf.PdfPageNumberingStyle)">
            <summary>
            Adds the new page labeling range with specific properties to the collection.
            </summary>
            <param name="firstPage">The zero-based index of the first page in range.</param>
            <param name="style">The numbering style to be used for the numeric portion of 
            page labels.</param>
            <remarks>The newly added range not necessarily put at the end of the collection.</remarks>
            <overloads>Adds the new page labeling range with specific properties to the collection.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabels.AddRange(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfPageNumberingStyle)">
            <summary>
            Adds the new page labeling range with specific properties to the collection.
            </summary>
            <param name="firstPage">The zero-based index of the first page in range.</param>
            <param name="lastPage">The zero-based index of the last page in range.</param>
            <param name="style">The numbering style to be used for the numeric portion of
            page labels.</param>
            <remarks>
                <para>
            The index of the last page in range may be greater than actual
            number of pages in the document.
            </para>
                <para>
            The newly added range not necessarily put at the end of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabels.AddRange(System.Int32,BitMiracle.Docotic.Pdf.PdfPageNumberingStyle,System.String)">
            <summary>
            Adds the new page labeling range with specific properties to the collection.
            </summary>
            <param name="firstPage">The zero-based index of the first page in range.</param>
            <param name="style">The numbering style to be used for the numeric portion of
            page labels.</param>
            <param name="prefix">The prefix for page labels in range.</param>
            <remarks>
                <para>
            The prefix may be <c>null</c> or empty string.
            </para>
                <para>
            The newly added range not necessarily put at the end of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabels.AddRange(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfPageNumberingStyle,System.String)">
            <summary>
            Adds the new page labeling range with specific properties to the collection.
            </summary>
            <param name="firstPage">The zero-based index of the first page in range.</param>
            <param name="lastPage">The zero-based index of the last page in range.</param>
            <param name="style">The numbering style to be used for the numeric portion of
            page labels.</param>
            <param name="prefix">The prefix for page labels in range.</param>
            <remarks>
                <para>
            The index of the last page in range may be greater than actual
            number of pages in the document.
            </para>
                <para>
            The prefix may be <c>null</c> or empty string.
            </para>
                <para>
            The newly added range not necessarily put at the end of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabels.AddRange(System.Int32,BitMiracle.Docotic.Pdf.PdfPageNumberingStyle,System.String,System.Int32)">
            <summary>
            Adds the new page labeling range with specific properties to the collection.
            </summary>
            <param name="firstPage">The zero-based index of the first page in range.</param>
            <param name="style">The numbering style to be used for the numeric portion of
            page labels.</param>
            <param name="prefix">The prefix for page labels in range.</param>
            <param name="startNumber">The start number (i.e value of the numeric portion
            for the first page label in the range). Subsequent pages in range are
            numbered sequentially from this value.</param>
            <remarks>
                <para>
            The prefix may be <c>null</c> or empty string.
            </para>
                <para>
            The <paramref name="startNumber" /> may be 0 which means that start
            number should not be used.
            </para>
                <para>
            The newly added range not necessarily put at the end of the collection.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPageLabels.AddRange(System.Int32,System.Int32,BitMiracle.Docotic.Pdf.PdfPageNumberingStyle,System.String,System.Int32)">
            <summary>
            Adds the new page labeling range with specific properties to the collection.
            </summary>
            <param name="firstPage">The zero-based index of the first page in range.</param>
            <param name="lastPage">The zero-based index of the last page in range.</param>
            <param name="style">The numbering style to be used for the numeric portion of
            page labels.</param>
            <param name="prefix">The prefix for page labels in range.</param>
            <param name="startNumber">The start number (i.e value of the numeric portion
            for the first page label in the range). Subsequent pages in range are
            numbered sequentially from this value.</param>
            <remarks>
                <para>
            The index of the last page in range may be greater than actual
            number of pages in the document.
            </para>
                <para>
            The prefix may be <c>null</c> or empty string.
            </para>
                <para>
            The <paramref name="startNumber" /> may be 0 which means that start
            number should not be used.
            </para>
                <para>
            The newly added range not necessarily put at the end of the collection.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPageObject">
            <summary>
            Class for an object painted on a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
            <remarks>
            You can get the collection of all page objects using <see cref="Overload:BitMiracle.Docotic.Pdf.PdfPage.GetObjects" /> method.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageObject.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" />.
            </summary>
            <value>The type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageObject.ClipRegion">
            <summary>
            Gets the clip region for this <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" />.
            </summary>
            <value>
            The clip region of the page before drawing of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPageObject.Layer">
            <summary>
            Gets the layer this <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" /> is drawn on.
            </summary>
            <value>
            The layer this <see cref="T:BitMiracle.Docotic.Pdf.PdfPageObject" /> is drawn on; or <c>null</c> if this
            object is drawn directly on canvas.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPaintedImage">
            <summary>
            Class for an image painted on a <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPaintedImage" />.
            </summary>
            <value>
            Returns <see cref="F:BitMiracle.Docotic.Pdf.PdfPageObjectType.Image" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Page">
            <summary>
            Gets the page this image is painted on.
            </summary>
            <value>The page this image is painted on.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the painted image.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfImage" /> for the painted image.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Position">
            <summary>
            Gets the location on the page where the top left corner of the image is
            painted.
            </summary>
            <value>The location on the page where the top left corner of the image
            is painted.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Size">
            <summary>
            Gets the size of the page area occupied by this image.
            </summary>
            <value>The size of the page area occupied by this image.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Bounds">
            <summary>
            Gets the bounds of this image on the page.
            </summary>
            <value>The bounds of this image on the page.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Brush">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfBrushInfo" /> object of this image. Used to fill mask images.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfBrushInfo" /> object of this image.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.IsTransformed">
            <summary>
            Gets a value indicating whether <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image" /> is painted transformed.
            </summary>
            <value>
                <c>true</c> if the image is painted transformed; otherwise <c>false</c>.
            </value>
            <remarks>
            Often an image is painted on a page scaled, flipped and / or rotated. In any such
            case this property returns <c>true</c>.
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.TransformationMatrix" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.TransformationMatrix">
            <summary>
            Gets the transformation matrix for the <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image" />.
            </summary>
            <value>
            The transformation matrix or identity matrix if image is painted without transformations.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPaintedImage.SaveAsPainted(System.String)">
            <summary>
            Saves the image as painted on a page to the file with specified name.
            </summary>
            <param name="fileName">Name of the file to save image to.</param>
            <remarks>
                <para>
            This method always creates images in PNG format.
            </para>
                <para>
            This method transforms the <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image" /> using <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.TransformationMatrix" />
            so the output image looks exactly like on a page in a PDF viewer.
            </para>
            </remarks>
            <overloads>Saves the image as painted on a page.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPaintedImage.SaveAsPainted(System.String,BitMiracle.Docotic.Pdf.PdfExtractedImageFormat)">
            <summary>
            Saves the image as painted on a page to the file with specified name using specified
            image format.
            </summary>
            <param name="fileName">Name of the file to save image to.</param>
            <param name="imageFormat">The image format to use while saving the image.</param>
            <remarks>
                <para>
            This method transforms the <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image" /> using <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.TransformationMatrix" />
            so the output image looks exactly like on a page in a PDF viewer.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPaintedImage.SaveAsPainted(System.IO.Stream)">
            <summary>
            Saves the image as painted on a page to the specified stream.
            </summary>
            <param name="stream">The stream to save image to.</param>
            <remarks>
                <para>
            This method always creates images in PNG format.
            </para>
                <para>
            This method transforms the <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image" /> using <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.TransformationMatrix" />
            so the output image looks exactly like on a page in a PDF viewer.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPaintedImage.SaveAsPainted(System.IO.Stream,BitMiracle.Docotic.Pdf.PdfExtractedImageFormat)">
            <summary>
            Saves the image as painted on a page to the specified stream using specified
            image format.
            </summary>
            <param name="stream">The stream to save image to.</param>
            <param name="imageFormat">The image format to use while saving the image.</param>
            <remarks>
                <para>
            This method transforms the <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.Image" /> using <see cref="P:BitMiracle.Docotic.Pdf.PdfPaintedImage.TransformationMatrix" />
            so the output image looks exactly like on a page in a PDF viewer.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPattern">
            <summary>
            Base class for all PDF pattern classes.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPen">
            <summary>
            Class that encapsulates properties of a <see cref="T:BitMiracle.Docotic.Pdf.PdfCanvas" /> related
            to stroking operations.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.DashPattern">
            <summary>
            Gets or sets the line dash pattern.
            </summary>
            <value>Line dash pattern.</value>
            <remarks>The line dash pattern controls the pattern of dashes and
            gaps used to stroke paths.<br />
            Default value: a solid line.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.EndCap">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfLineCap" /> value specifying the
            shape of the endpoints for any open path that is stroked.
            </summary>
            <value>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfLineCap" /> value specifying the
            shape of the endpoints for any open path that is stroked.
            </value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfLineCap.ButtEnd" />.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.LineJoin">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfLineJoin" /> value specifying the
            shape of joints between connected segments of a stroked path.
            </summary>
            <value>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfLineJoin" /> value specifying the shape of
            joints between connected segments of a stroked path.
            </value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Miter" />.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.MiterLimit">
            <summary>
            Gets or sets the miter limit of this pen.
            </summary>
            <value>The miter limit.</value>
            <remarks>
                <para>
            When two line segments meet at a sharp angle and mitered joins have been specified as the line join style,
            it is possible for the miter to extend far beyond the thickness of the line stroking the path. The miter limit
            imposes a maximum on the ratio of the miter length to the line width. When the limit is exceeded, the join
            is converted from a <see cref="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Miter" /> to a <see cref="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Bevel" />.
            </para>
                <para>
            Default value: 10.0, for a miter cutoff below approximately 11.5 degrees.
            </para>
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfPen.LineJoin" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.Width">
            <summary>
            Gets or sets the width of this pen.
            </summary>
            <value>The width of this pen.</value>
            <remarks>This parameter specifies the thickness of the
            line used to stroke a path. It is a non-negative number expressed
            in user space units; stroking a path entails painting all points
            whose perpendicular distance from the path in user space is less
            than or equal to half the line width.<br /><br />
            A width of 0 denotes the thinnest line that can be rendered at
            device resolution: 1 device pixel wide. However, some devices cannot
            reproduce 1-pixel lines, and on high-resolution devices, they are
            nearly invisible. Since the results of rendering such zero-width
            lines are device-dependent, their use is not recommended.<br />
            Default value: 1.0</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.Pattern">
            <summary>
            Gets or sets the pattern to be used for stroking.
            </summary>
            <value>The pattern to be used for stroking.</value>
            <remarks>Default value: <c>null</c>.<br /><br />
            Setting this property to an instance of a colored
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> causes the <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Color" />
            property to be set to <c>null</c>. Setting this property to an
            instance of an uncolored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> causes
            the <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Color" /> property to be set to the default color
            of the uncolored tiling pattern's underlying color space if
            color space of current pen color do not match the underlying color
            space of the uncolored pattern being set. If color space of current
            pen color and the underlying color space of the uncolored tiling pattern
            being set do match then current pen color won't be changed.
            Setting this property to <c>null</c> causes the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Color" /> property to be set to default RGB color
            if current pattern was an instance of a colored
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />. </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.Color">
            <summary>
            Gets or sets the color to be used for stroking.
            </summary>
            <value>The current color to be used for stroking.</value>
            <remarks>Default value: black.<br /><br />
            Setting this property may affect the <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Pattern" />
            property. If <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Pattern" /> is an instance of a
            colored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> then it will be set to
            <c>null</c>. If <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Pattern" /> is an instance of an
            uncolored <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" /> and the color space of a
            color being set do not match the underlying color space of that
            uncolored pattern then <see cref="P:BitMiracle.Docotic.Pdf.PdfPen.Pattern" /> will be set to
            <c>null</c>. If color space of a color being set and the underlying
            color space of the current uncolored tiling pattern do match then
            current pattern won't be changed.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPen.Opacity">
            <summary>
            (PDF 1.4) Gets or sets the opacity value in percent to be
            used for stroking operations.
            </summary>
            <remarks>Opacity value ranges from 0 (fully transparent) to 100
            (fully opaque).<br />
            Default value: 100.</remarks>
            <value>The opacity value in percent for stroking operations.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPen.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPenInfo">
            <summary>
            Class that encapsulates properties related to stroking operations.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.Width">
            <summary>
            Gets the width of this pen.
            </summary>
            <value>The width of this pen.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.DashPattern">
            <summary>
            Gets the line dash pattern.
            </summary>
            <value>Line dash pattern.</value>
            <remarks>The line dash pattern controls the pattern of dashes and gaps used to stroke paths.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.EndCap">
            <summary>
            Gets the shape of the endpoints for any open path that is stroked.
            </summary>
            <value>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfLineCap" /> value specifying the shape of the endpoints for any open path that is stroked.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.LineJoin">
            <summary>
            Gets the shape of joints between connected segments of a stroked path.
            </summary>
            <value>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfLineJoin" /> value specifying the shape of joints between connected segments of a stroked path.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.MiterLimit">
            <summary>
            Gets the miter limit of this pen.
            </summary>
            <value>The miter limit.</value>
            <remarks>
            When two line segments meet at a sharp angle and mitered joins have been specified as the line join style,
            it is possible for the miter to extend far beyond the thickness of the line stroking the path. The miter limit
            imposes a maximum on the ratio of the miter length to the line width. When the limit is exceeded, the join
            is converted from a <see cref="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Miter" /> to a <see cref="F:BitMiracle.Docotic.Pdf.PdfLineJoin.Bevel" />.
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfPenInfo.LineJoin" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.Color">
            <summary>
            Gets the color to be used for stroking.
            </summary>
            <value>The current color to be used for stroking.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.Opacity">
            <summary>
            Gets the opacity value in percent to be used for stroking operations.
            </summary>
            <remarks>Opacity value ranges from 0 (fully transparent) to 100
            (fully opaque).</remarks>
            <value>The opacity value in percent for stroking operations.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPenInfo.Pattern">
            <summary>
            Gets the pattern to be used for stroking operations.
            </summary>
            <value>The pattern to be used for stroking operations.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPenInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPermissions">
            <summary>
            Class for a user permissions of PDF document.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.IsOwner">
            <summary>
            Gets a value indicating whether full (owner) access to the document is allowed.
            </summary>
            <value>
                <c>true</c> if full (owner) access to the document is allowed;
            otherwise, <c>false</c>.</value>
            <remarks>
                <para>
            Full (owner) access is allowed when:
            </para>
                <list type="bullet">
                    <item>An encrypted document is opened with its owner password</item>
                    <item>An unencrypted document is opened</item>
                    <item>A document is created from scratch</item>
                </list>
                <para>
            Owner access allows changing of document's passwords and access permissions.
            </para>
                <para>
            Full access is not allowed when an encrypted document is opened with its user password.
            In such a case all allowed operations are specified by this <see cref="T:BitMiracle.Docotic.Pdf.PdfPermissions" />.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.Flags">
            <summary>
            Gets or sets the permissions as bit flags
            </summary>
            <value>The permissions as bit flags.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.AllowEverything">
            <summary>
            Gets or sets a value indicating whether user is allowed to make
            any changes to document.
            </summary>
            <value>
                <c>true</c> if user is allowed to make any changes to document;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.PrintDocument">
            <summary>
            Gets or sets a value indicating whether user is allowed to print document.
            </summary>
            <value>
                <c>true</c> if user is allowed to print document;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.ModifyContents">
            <summary>
            Gets or sets a value indicating whether user is allowed to modify
            the contents of the document.
            </summary>
            <value>
                <c>true</c> if user is allowed to modify the contents of
            the document; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.CopyContents">
            <summary>
            Gets or sets a value indicating whether user is allowed to copy or
            otherwise extract text and graphics from the document.
            </summary>
            <value>
                <c>true</c> if user is allowed to copy or otherwise extract
            text and graphics from the document; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.ModifyAnnotations">
            <summary>
            Gets or sets a value indicating whether user is allowed to add or
            modify text annotations and fill in interactive form fields.
            </summary>
            <value>
                <c>true</c> if user is allowed to add or modify text
            annotations and fill in interactive form fields;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.FillFormFields">
            <summary>
            Gets or sets a value indicating whether user is allowed to fill in
            existing interactive form fields (including signature fields).
            </summary>
            <value>
                <c>true</c> if user is allowed to fill in existing
            interactive form fields (including signature fields);
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.ExtractContents">
            <summary>
            Gets or sets a value indicating whether user is allowed to extract
            text and graphics (in support of accessibility to users with
            disabilities or for other purposes).
            </summary>
            <value>
                <c>true</c> if user is allowed to extract text and graphics
            (in support of accessibility to users with disabilities or for
            other purposes); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.AssembleDocument">
            <summary>
            Gets or sets a value indicating whether user is allowed to assemble
            the document (insert, rotate, or delete pages and create bookmarks
            or thumbnail images).
            </summary>
            <value>
                <c>true</c> if user is allowed to assemble the document
            (insert, rotate, or delete pages and create bookmarks or thumbnail
            images); otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPermissions.PrintFaithfulCopy">
            <summary>
            Gets or sets a value indicating whether user is allowed to print
            the document to a representation from which a faithful digital copy
            of the PDF content could be generated.
            </summary>
            <value>
                <c>true</c> if user is allowed to print the document to a
            representation from which a faithful digital copy of the PDF content
            could be generated; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPermissions.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfShadingPattern">
            <summary>
            Class for a shading PDF pattern.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfShadingPattern.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with
            this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfShadingPattern.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfShadingPattern.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextData">
            <summary>
            Class for a chunk of text data retrieved from a PDF document page.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfTextData" />.
            </summary>
            <value>
            Returns <see cref="F:BitMiracle.Docotic.Pdf.PdfPageObjectType.Text" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Text">
            <summary>
            Gets the text portion of the chunk of text data.
            </summary>
            <value>The portion of the chunk of text data.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Position">
            <summary>
            Gets the position at which the text portion of the text data chunk
            is drawn on a page.
            </summary>
            <value>The position at which the text portion of the text data chunk
            is drawn on a page.</value>
            <remarks>
                <para>
            The position corresponds to left-top point of the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Bounds" /> rectangle.
            </para>
                <para>Below is an example of <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Position" /> value for a transformed text.</para>
                <img src="media\pdftextdata.png" />
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Bounds" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Size">
            <summary>
            Gets the size of the page area occupied by the text of this chunk.
            </summary>
            <value>The size of the page area occupied by the text of this chunk.</value>
            <remarks>
                <para>
            The size corresponds to the width and the height of the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Bounds" /> rectangle.
            </para>
                <para>Below is an example of <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Size" /> value for a transformed text.</para>
                <img src="media\pdftextdata.png" />
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Bounds" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Bounds">
            <summary>
            Gets the bounds of this chunk's text on the page.
            </summary>
            <value>The bounds of this chunk's text on the page.</value>
            <remarks>
                <para>
            The bounds correspond to the smallest rectangle enclosing the text chunk. The bounding
            rectangle has the same orientation as the page. It means that even if the chunk is
            rotated or otherwise transformed (check <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.IsTransformed" /> property) the 
            bounding box will retain it's orientation (but not necessarily size) and will still
            enclose all the text in the chunk.
            </para>
                <para>The size of the bounding rectangle depends on <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />, 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" />, and <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Font" /> properties.
            </para>
                <para>
            Note that the height of the bounding rectangle doesn't depend on the actual characters
            being drawn. The height is calculated using <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" /> and
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" /> properties and also the bounding box of <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Font" />.
            </para>
                <para>
            The bounding box of a font is the smallest rectangle enclosing the shape that would
            result if all of the glyphs of the font were placed with their origins coincident and
            then filled.
            </para>
                <para>Below is an example of <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Bounds" /> value for a transformed text.</para>
                <img src="media\pdftextdata.png" />
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Font">
            <summary>
            Gets the font used to draw this chunk.
            </summary>
            <value>
            The font used to draw this chunk.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize">
            <summary>
            Gets the scale factor of the font used to draw this chunk.
            </summary>
            <value>
            The scale factor of the font used to draw this chunk.
            </value>
            <remarks>
                <para>
            A font defines the glyphs for one standard size. This standard is arranged so that
            the nominal height of tightly spaced lines of text is 1 unit. In the default user
            coordinate system, this means the standard glyph size is 1 point (or 1 ⁄ 72 inch). The
            standard-size font must then be scaled to be usable.
            </para>
                <para>
            This property retrieves the scale factor used to draw the text chunk. Usually, 
            the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" /> property retrieves values like 10, 12, 14. But the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" /> might have an arbitrary value like 1, 1000, -1, -10.
            It's just a scale factor.
            </para>
                <para>
            The final height of the text chunk depends on both <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" /> and 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" /> properties.
            </para>
                <para>For a non-transformed text the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" /> is the identity
            matrix (the TransformationMatrix.<see cref="M:BitMiracle.Docotic.Pdf.PdfMatrix.IsIdentity" /> property is equal
            to <c>true</c>). In such a case the absolute text height is equal to 
            <c>Math.Abs(<see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" /></c>).
            </para>
                <para>For a scaled text the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" /> looks like 
            <c>{ M11; 0; 0; M22; 0; 0 }</c>. In such a case the absolute text height is equal to 
            <c>Math.Abs(<see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />.M22 * <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" />)</c>.
            </para>
                <para>For an arbitrarily transformed text the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />
            looks like <c>{ M11; M12; M21; M22; X; Y }</c>. In such a case the absolute text height is
            equal to
            <c>(Math.Abs(<see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" />) * Math.Sqrt(Math.Pow(<see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />.M21, 2) + Math.Pow(<see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />.M22, 2)))</c>.
            </para>
                <para>
            Let's try to understand the nature of this formula. At first, the matrix
            <c>{ FontSize, 0, 0, FontSize, 0, 0 }</c> is multiplied by the current
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" /> (current matrix being the right multiplier).
            The resulting matrix is <c>{ M11 * FontSize; M12 * FontSize; M21 * FontSize; M22 * FontSize; X; Y }</c>.
            Then we calculate the text height in the new transformed space. We map points <c>(0; 0)</c>
            and <c>(0; 1)</c> from default space to the transformed space. The result is <c>(X; Y)</c>
            and <c>(M21 * FontSize + X; M22 * FontSize + Y)</c>, respectively. And finally we
            calculate the length of this vector, that is exactly the absolute text height in the
            transformed space:
            <c>Math.Sqrt(Math.Pow(M21 * FontSize, 2) + Math.Pow(M22 * FontSize, 2)) = 
            Math.Abs(FontSize) * Math.Sqrt(Math.Pow(M21, 2) + Math.Pow(M22, 2))</c></para>
                <para>Below is an example of rotated text for which the <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.FontSize" />
            is equal to 1.</para>
                <img src="media\pdftextdata.png" />
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.RenderingMode">
            <summary>
            Gets the text rendering mode for this chunk.
            </summary>
            <value>The text rendering mode.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Brush">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfBrushInfo" /> object of this chunk. It encapsulates the properties
            related to non-stroking operations.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfBrushInfo" /> object of this chunk.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.Pen">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPenInfo" /> object of this chunk. It encapsulates the properties
            related to stroking operations.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPenInfo" /> object of this chunk.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.IsTransformed">
            <summary>
            Gets a value indicating whether this chunk is drawn transformed.
            </summary>
            <value>
                <c>true</c> if the chunk is drawn transformed; otherwise <c>false</c>.
            </value>
            <remarks>
            Sometimes text gets drawn on a page rotated, scaled and / or flipped. In any such
            a case this property returns <c>true</c>.
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix">
            <summary>
            Gets the transformation matrix for this chunk.
            </summary>
            <value>
            The transformation matrix or identity matrix if text is drawn without transformations.
            </value>
            <remarks>
                <para>
            Below is an example of <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.TransformationMatrix" /> for a scaled and rotated text.
            </para>
                <img src="media\pdftextdata.png" />
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextData.GetCharacters">
            <summary>
            Gets the collection of all characters in this chunk.
            </summary>
            <returns>Collection of all characters in this chunk with their bounding rectangles.</returns>
            <remarks>
                <para>
            This method is useful when you extract text as is or by words (for example using 
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.GetWords" />).
            In this case you can get information about specific characters within text chunks.
            You may use this information to analyze text and bounds of characters.
            </para>
                <para>
            This method is useless when you extract text by characters (using 
            PdfPage.<see cref="M:BitMiracle.Docotic.Pdf.PdfPage.GetChars" />).
            In this case you will always get the same single character.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextData.GetCharacterCodes">
            <summary>
            Gets character codes for the chunk of text data.
            </summary>
            <returns>
            Character codes for the chunk of text data.
            </returns>
            <remarks>
                <para>
            Character codes represent raw PDF string that is used to draw the text.
            They strictly depend on a font and font's encoding in PDF document.
            An attempt to use character codes with another font can lead to unpredictable result.
            </para>
                <para>
            Use <see cref="M:BitMiracle.Docotic.Pdf.PdfCanvas.DrawString(System.Byte[])" /> method to draw text using character codes.
            Make sure to set <see cref="P:BitMiracle.Docotic.Pdf.PdfCanvas.Font" /> property to <see cref="P:BitMiracle.Docotic.Pdf.PdfTextData.Font" /> property of this text data.
            </para>
                <para>
            Use <see cref="M:BitMiracle.Docotic.Pdf.PdfTextData.GetCharacters" /> method to get character codes for individual glyphs.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTilingPattern">
            <summary>
            Class for a tiling PDF pattern.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.PaintType">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPatternPaintType" /> value specifying how the
            color of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPattern" />'s cells is to be
            specified.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPatternPaintType" /> value specifying how the
            color of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPattern" />'s cells is to be
            specified.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.TilingType">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPatternTiling" /> value specifying
            the adjustments to the spacing of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPattern" />'s
            tiles relative to the device pixel grid.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPatternTiling" /> value specifying the
            adjustments to the spacing of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPattern" />'s
            tiles relative to the device pixel grid.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.Width">
            <summary>
            Gets or sets the width of pattern cells in pixels.
            </summary>
            <value>The width of pattern cells in pixels.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.Height">
            <summary>
            Gets or sets the height of pattern cells in pixels.
            </summary>
            <value>The height of pattern cells in pixels.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.XStep">
            <summary>
            Gets or sets the desired horizontal spacing between pattern cells
            in pixels.
            </summary>
            <value>The desired horizontal spacing between pattern cells
            in pixels.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.YStep">
            <summary>
            Gets or sets the desired vertical spacing between pattern cells
            in pixels.
            </summary>
            <value>The desired vertical spacing between pattern cells
            in pixels.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.Canvas">
            <summary>
            Gets the canvas of the pattern cell.
            </summary>
            <value>The canvas of the pattern cell.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTilingPattern.ColorSpace">
            <summary>
            Gets the underlying color space for this <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />.
            </summary>
            <value>The underlying color space for this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTilingPattern" />.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTilingPattern.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with
            this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTilingPattern.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTilingPattern.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfViewerPreferences">
            <summary>
            Class for PDF viewer application preferences. Viewer application
            preferences specify the way the document is to be displayed on the screen.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfViewerPreferences.HideToolBar">
            <summary>
            Gets or sets a value indicating whether to hide the viewer
            application’s tool bars when the document is active.
            </summary>
            <value>
                <c>true</c> if to hide the viewer application’s tool bars
            when the document is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfViewerPreferences.HideMenuBar">
            <summary>
            Gets or sets a value indicating whether to hide the viewer
            application’s menu bar when the document is active.
            </summary>
            <value>
                <c>true</c> if to hide the viewer application’s menu
            bar when the document is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfViewerPreferences.HideWindowUI">
            <summary>
            Gets or sets a value indicating whether to hide user interface
            elements in the document’s window (such as scroll bars and
            navigation controls), leaving only the document’s contents displayed.
            </summary>
            <value>
                <c>true</c> if to hide user interface elements in the
            document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfViewerPreferences.FitWindow">
            <summary>
            Gets or sets a value indicating whether to resize the document’s
            window to fit the size of the first displayed page.
            </summary>
            <value>
                <c>true</c> if to resize the document’s window to fit
            the size of the first displayed page; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfViewerPreferences.CenterWindow">
            <summary>
            Gets or sets a value indicating whether to position the document’s
            window in the center of the screen.
            </summary>
            <value>
                <c>true</c> if to position the document’s window in the
            center of the screen.; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfViewerPreferences.DisplayTitle">
            <summary>
            Gets or sets a value specifying whether the window’s title bar should display the 
            document title taken from the Title entry of the document information dictionary (see 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfInfo.Title" />).
            </summary>
            <value>
            If <c>false</c>, the title bar should instead display the name of the PDF file containing
            the document.Default value: false.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfViewerPreferences.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfXObject">
            <summary>
            Class for a PDF form XObject.
            </summary>
            <remarks>
                <para>
            Any graphical element that is to be used repeatedly, such as a company logo, a watermark
            or a background can be defined as a form XObject.
            </para>
                <para>
            A form XObject can serve as the template for an entire page.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.Width">
            <summary>
            Gets or sets the width of the XObject in pixels.
            </summary>
            <value>The width of the XObject in pixels.</value>
            <remarks>
            Default value: 595 (the width of the A4 sheet).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.Height">
            <summary>
            Gets or sets the height of the XObject in pixels.
            </summary>
            <value>The height of the XObject in pixels.</value>
            <remarks>
            Default value: 842 (the height of the A4 sheet).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.Size">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperSize" /> value specifying 
            the size of the XObject.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperSize" /> value specifying 
            the size of the XObject.</value>
            <remarks>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfPaperSize.A4" />.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.Orientation">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperOrientation" /> value specifying 
            the orientation of the XObject.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfPaperOrientation" /> value specifying 
            the orientation of the XObject.</value>
            <remarks>
            Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfPaperOrientation.Portrait" />.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.Canvas">
            <summary>
            Gets the canvas of this XObject.
            </summary>
            <value>The canvas of this XObject.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.DrawOnBackground">
            <summary>
            Gets or sets a value indicating whether this XObject should be drawn before
            any other contents of a page.
            </summary>
            <value>
                <c>true</c> if this XObject should be drawn before any other contents of a page;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfXObject.Layer">
            <summary>
            Gets or sets the layer to which this XObject belongs.
            </summary>
            <value>
            The layer to which this XObject belongs or <c>null</c> if this XObject does not belong
            to any layer.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfXObject.op_Equality(BitMiracle.Docotic.Pdf.PdfXObject,BitMiracle.Docotic.Pdf.PdfXObject)">
            <summary>
            Determines whether the two specified objects are equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfXObject.op_Inequality(BitMiracle.Docotic.Pdf.PdfXObject,BitMiracle.Docotic.Pdf.PdfXObject)">
            <summary>
            Determines whether the two specified objects are not equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are not equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfXObject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfXObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
                <c>true</c> if the specified object is equal to current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfXObject.GetHashCode">
            <summary>
            Serves as a hash function for a this type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignature">
            <summary>
            Class for a digital signature in a PDF file.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignature.Name">
            <summary>
            Gets the name of the person or authority signing the document.
            </summary>
            <value>
            The name of the person or authority signing the document.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the name of the person or authority
            is not specified.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignature.SigningTime">
            <summary>
            Gets the date and time of signing.
            </summary>
            <value>
            The date and time of signing or <c>null</c> if signing date and time is not specified.
            </value>
            <remarks>
            Returned date and time expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignature.Location">
            <summary>
            Gets the CPU host name or physical location of the signing.
            </summary>
            <value>
            The CPU host name or physical location of the signing.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the location is not specified.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignature.Reason">
            <summary>
            Gets the reason for the signing, such as (I agree…).
            </summary>
            <value>
            The reason for the signing, such as (I agree…).
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the reason is not specified.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignature.ContactInfo">
            <summary>
            Gets the information provided by the signer to enable a recipient to contact the
            signer to verify the signature.
            </summary>
            <value>
            The information provided by the signer to enable a recipient to contact the
            signer to verify the signature.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if the contact information is not specified.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignature.Contents">
            <summary>
            Gets the signature contents object.
            </summary>
            <value>The signature contents object.</value>
            <remarks>
            The contents object can be used to access signature certificates and to validate or
            verify the signature.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureCertificate">
            <summary>
            Class for a certificate embedded in a signature contents.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.Version">
            <summary>
            Gets the certificate version.
            </summary>
            <value>The certificate version.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.Name">
            <summary>
            Gets the common name of the subject of this certificate.
            </summary>
            <value>
            The common name of the subject (see <see cref="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.Subject" />) of this certificate.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.Algorithm">
            <summary>
            Gets the ASN.1 Object Identifier (OID) of the algorithm used in the certificate.
            </summary>
            <value>
            The ASN.1 Object Identifier (OID) of the algorithm used in the certificate.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.AlgorithmName">
            <summary>
            Gets the friendly name of the algorithm used in the certificate.
            </summary>
            <value>
            The friendly name of the algorithm used in the certificate.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.Subject">
            <summary>
            Gets the distinguished name of the subject of the certificate.
            </summary>
            <value>
            The distinguished name of the subject of the certificate.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.Issuer">
            <summary>
            Gets the distinguished name of the issuer of this certificate. 
            </summary>
            <value>
            The distinguished name of the issuer of this certificate. 
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.SerialNumber">
            <summary>
            Gets the serial number of this certificate.
            </summary>
            <value>
            The serial number of this certificate.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.ValidFrom">
            <summary>
            Gets the time in the local time zone that this certificate is valid from.
            </summary>
            <value>
            The time in the local time zone that this certificate is valid from.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.ValidUpto">
            <summary>
            Gets the time in the local time zone that this certificate is valid up to.
            </summary>
            <value>
            The time in the local time zone that this certificate is valid up to.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.GetBytes">
            <summary>
            Gets the raw data of the certificate
            </summary>
            <returns>
            The raw data of the certificate
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureCertificate.CheckValidity(System.DateTime)">
            <summary>
            Checks if this certificate is valid for the given UTC date and time.
            </summary>
            <param name="utcDate">The UTC date and time to check validity for.</param>
            <returns>
            A value indicating if this certificate is valid for the given UTC date and time.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureContents">
            <summary>
            Class for a signature contents. This class can be used to access signature certificates
            and to validate or verify the signature.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.GetSigningCertificate">
            <summary>
            Gets the certificate that was used to create the signature.
            </summary>
            <returns>
            The certificate that was used to create the signature.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.GetIssuerCertificateFor(BitMiracle.Docotic.Pdf.PdfSignatureCertificate)">
            <summary>
            Gets the certificate that was used to issue the given certificate.
            </summary>
            <param name="certificate">The certificate to get the issuer certificate for.</param>
            <returns>
            The certificate that was used to issue the given certificate or <c>null</c> if there
            is no such certificate.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.VerifyDigest">
            <summary>
            Verifies the digest (hash) value stored in the signature contents.
            </summary>
            <returns>
                <c>true</c> if the digest is valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The digest is invalid if the document was altered after the signature was created.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.CheckHasEmbeddedOcsp">
            <summary>
            Checks if the signature contents has OCSP revocation data embedded.
            </summary>
            <returns>
                <c>true</c> if the signature contents has OCSP revocation data embedded; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.CheckHasEmbeddedCrl">
            <summary>
            Checks if the signature contents has CRL revocation data embedded.
            </summary>
            <returns>
                <c>true</c> if the signature contents has CRL revocation data embedded; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.CheckIfRevoked(BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode)">
            <summary>
            Checks if the signing certificate stored in this signature contents is revoked now.
            </summary>
            <param name="mode">The revocation check mode to use.</param>
            <returns>
                <c>true</c> if the signing certificate stored in this signature contents is revoked
            at the current time; <c>false</c> otherwise.
            </returns>
            <remarks>
            This method requires an internet connection when used with one of the online modes.
            </remarks>
            <overloads>
            Checks if the signing certificate stored in this signature contents is revoked.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureContents.CheckIfRevoked(BitMiracle.Docotic.Pdf.PdfCertificateRevocationCheckMode,System.DateTime)">
            <summary>
            Checks if the signing certificate stored in this signature contents is revoked at
            the specified date and time.
            </summary>
            <param name="mode">The revocation check mode to use.</param>
            <param name="date">The date and time to check revocation at.</param>
            <returns>
                <c>true</c> if the signing certificate stored in this signature contents is
            revoked at the specified date and time; <c>false</c> otherwise.
            </returns>
            <remarks>
            This method requires an internet connection when used with one of the online modes.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureFieldLock">
            <summary>
            Class for a signature field lock. A signature field lock specifies a set of form fields
            that shall be locked when the corresponding signature field is signed.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureFieldLock.Action">
            <summary>
            Gets the action of this field lock.
            </summary>
            <value>
            The action of this field lock.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureFieldLock.Fields">
            <summary>
            Gets the names of the fields specified in this lock.
            </summary>
            <value>
            The names of the fields specified in this lock.
            </value>
            <remarks>
            The value of this property can be <c>null</c> if this lock has no fields specified.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureFieldLock.CreateLockAll">
            <summary>
            Creates a signature field lock for all fields in the document.
            </summary>
            <returns>
            A newly created signature field lock for all fields in the document.
            </returns>
            <remarks>
            When the corresponding signature field with this kind of lock is signed, all fields
            in the document get locked. Any change to any field will invalidate the signature.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureFieldLock.CreateLockFields(System.String[])">
            <summary>
            Creates a signature field lock for the fields with the specified names.
            </summary>
            <param name="fieldNames">The names of the fields to lock.</param>
            <returns>
            A newly created signature field lock for the fields with the specified names.
            </returns>
            <remarks>
            When the corresponding signature field with this kind of lock is signed, all fields
            with the specified names get locked. Any change to any of the fields with the specified
            names will invalidate the signature.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSignatureFieldLock.CreateLockAllExceptFields(System.String[])">
            <summary>
            Creates a signature field lock for all fields in the document except the fields with
            the specified names.
            </summary>
            <param name="fieldNames">The names of the fields to exclude from the lock.</param>
            <returns>
            A newly created signature field lock for all fields in the document except the fields
            with the specified names.
            </returns>
            <remarks>
            When the corresponding signature field with this kind of lock is signed, all fields in
            the document except the fields with the specified names get locked. Any change to any
            of the fields with names not specified in the lock will invalidate the signature.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfBox">
            <summary>
            Represents a rectangle expressed in PDF's default user space coordinate system.
            In default user space the positive X axis extends horizontally to the right and
            the positive Y axis extends vertically upward.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfBox.Empty">
            <summary>
            Represents an instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> struct with its members uninitialized.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> struct.
            </summary>
            <param name="left">The x-coordinate of the lower-left corner of the rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-left corner of the rectangle.</param>
            <param name="right">The x-coordinate of the upper-right corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-right corner of the rectangle.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>The x-coordinate of the left edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>The y-coordinate of the bottom edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Right">
            <summary>
            Gets the x-coordinate of the right edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>The x-coordinate of the right edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>The y-coordinate of the top edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Width">
            <summary>
            Gets the width of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>
            The width of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Height">
            <summary>
            Gets the height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>
            The height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Location">
            <summary>
            Gets the coordinates of the lower-left corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the lower-left corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.Size">
            <summary>
            Gets the size of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" />.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that represents the width and height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfBox.IsEmpty">
            <summary>
            Tests whether the <see cref="P:BitMiracle.Docotic.Pdf.PdfBox.Width" /> or <see cref="P:BitMiracle.Docotic.Pdf.PdfBox.Height" /> property
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> has a value of zero.
            </summary>
            <value>
            This property returns <c>true</c> if the <see cref="P:BitMiracle.Docotic.Pdf.PdfBox.Width" /> or <see cref="P:BitMiracle.Docotic.Pdf.PdfBox.Height" /> property
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> has a value of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.op_Equality(BitMiracle.Docotic.Pdf.PdfBox,BitMiracle.Docotic.Pdf.PdfBox)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structures are equal.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure that is to the
            left of the equality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure that is to the
            right of the equality operator.</param>
            <returns>
            This operator returns <c>true</c> if all properties of the two specified
            <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structures are equal.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.op_Inequality(BitMiracle.Docotic.Pdf.PdfBox,BitMiracle.Docotic.Pdf.PdfBox)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structures are different.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure that is to the
            left of the inequality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure that is to the
            right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any properties of the two <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" />
            structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.FromRectangle(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double)">
            <summary>
            Maps <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure expressed in <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system to
            PDF's default user space.
            </summary>
            <param name="rectangle">
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure expressed in <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system.</param>
            <param name="pageHeight">Height of <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> that is used to map coordinates.</param>
            <returns>
                <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure expressed in PDF's default user space coordinate system.</returns>
            <remarks>
                <para>
            In <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system origin is located at the upper-left corner of the page,
            positive Y axis extends vertically downward.
            </para>
                <para>
            In default user space the positive Y axis extends vertically upward.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.ToRectangle(System.Double)">
            <summary>
            Maps this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure to <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system.
            </summary>
            <param name="pageHeight">Height of <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> that is used to map coordinates.</param>
            <returns>
                <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure expressed in <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system.</returns>
            <remarks>
                <para>
            In <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system origin is located at the upper-left corner of the page,
            positive Y axis extends vertically downward.
            </para>
                <para>
            In default user space the positive Y axis extends vertically upward.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.ToRectangleF(System.Double)">
            <summary>
            Maps this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure to <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system.
            </summary>
            <param name="pageHeight">Height of <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> that is used to map coordinates.</param>
            <returns>
                <see cref="T:System.Drawing.RectangleF" /> structure expressed in <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system.</returns>
            <remarks>
                <para>
            In <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> coordinate system origin is located at the upper-left corner of the page,
            positive Y axis extends vertically downward.
            </para>
                <para>
            In default user space the positive Y axis extends vertically upward.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> with
            the same properties.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="obj" /> is a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> and its properties are
            equal to the corresponding properties of this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </summary>
            <returns>
            The hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.ToString">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> to a human-readable string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that describes this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfBox.ToString(System.IFormatProvider)">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> to a human-readable string.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.String" /> that describes this <see cref="T:BitMiracle.Docotic.Pdf.PdfBox" /> structure.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfMatrix">
            <summary>
            Represents a 3x3 affine transformation matrix used for transformations in 2-D space.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfMatrix.Identity">
            <summary>
            Gets an identity <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />.
            </summary>
            <remarks>
            An identity matrix has a value of 1 in coefficients [1,1],[2,2],[3,3] and a value
            of 0 in the rest of the coefficients. This correlates to setting <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M11" /> and
            <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M22" /> to 1 and <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M12" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M21" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.OffsetX" />,
            and OffsetY to 0.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <param name="m11">
            The value in the first row and first column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />.
            For more information, see the <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M11" /> property.
            </param>
            <param name="m12">
            The value in the first row and second column. For more information, see the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M12" /> property.
            </param>
            <param name="m21">
            The value in the second row and first column. For more information, see the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M21" /> property.
            </param>
            <param name="m22">
            The value in the second row and second column. For more information, see the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.M22" /> property.
            </param>
            <param name="offsetX">
            The value in the third row and first column. For more information, see the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.OffsetX" /> property.
            </param>
            <param name="offsetY">
            The value in the third row and second column. For more information, see the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfMatrix.OffsetY" /> property.
            </param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.M11">
            <summary>
            Gets or sets the value of the first row and first column of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <value>
            The value of the first row and first column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />. The
            default value is 1.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.M12">
            <summary>
            Gets or sets the value of the first row and second column of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <value>
            The value of the first row and second column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />. The
            default value is 0.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.M21">
            <summary>
            Gets or sets the value of the second row and first column of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <value>
            The value of the second row and first column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />. The
            default value is 0.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.M22">
            <summary>
            Gets or sets the value of the second row and second column of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <value>
            The value of the second row and second column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />. The
            default value is 1.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.OffsetX">
            <summary>
            Gets or sets the value of the third row and first column of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <value>
            The value of the third row and first column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />. The
            default value is 0.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.OffsetY">
            <summary>
            Gets or sets the value of the third row and second column of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <value>
            The value of the third row and second column of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />. The
            default value is 0.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.Determinant">
            <summary>
            Gets the determinant of this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfMatrix.IsInvertible">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure is invertible.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> is invertible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.op_Equality(BitMiracle.Docotic.Pdf.PdfMatrix,BitMiracle.Docotic.Pdf.PdfMatrix)">
            <summary>
            Determines whether the two specified <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structures are identical.
            </summary>
            <param name="first">The first <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure to compare.</param>
            <param name="second">The second <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure to compare.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> and <paramref name="second" /> are identical;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.op_Inequality(BitMiracle.Docotic.Pdf.PdfMatrix,BitMiracle.Docotic.Pdf.PdfMatrix)">
            <summary>
            Determines whether the two specified <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structures are not identical.
            </summary>
            <param name="first">The first <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure to compare.</param>
            <param name="second">The second <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure to compare.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> and <paramref name="second" /> are not
            identical; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.Multiply(BitMiracle.Docotic.Pdf.PdfMatrix,BitMiracle.Docotic.Pdf.PdfMatrix)">
            <summary>
            Multiplies a <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure by another <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />
            structure.
            </summary>
            <param name="left">The left matrix to multiply.</param>
            <param name="right">The right matrix to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left" /> by <paramref name="right" />.
            </returns>
            <remarks>
            Matrix multiplication is not commutative. Multiplying <paramref name="left" /> by
            <paramref name="right" /> is not the same as multiplying <paramref name="right" /> by
            <paramref name="left" />.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.op_Multiply(BitMiracle.Docotic.Pdf.PdfMatrix,BitMiracle.Docotic.Pdf.PdfMatrix)">
            <summary>
            Multiplies a <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure by another <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />
            structure.
            </summary>
            <param name="left">The left matrix to multiply.</param>
            <param name="right">The right matrix to multiply.</param>
            <returns>The result of multiplying <i>left</i> by <i>right</i>.</returns>
            <remarks>
            Matrix multiplication is not commutative. Multiplying <paramref name="left" /> by
            <paramref name="right" /> is not the same as multiplying <paramref name="right" /> by
            <paramref name="left" />.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.IsIdentity">
            <summary>
            Gets a value that indicates whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure is an
            identity matrix.
            </summary>
            <returns>
                <c>true</c> if the <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure is an identity matrix;
              otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.Invert">
            <summary>
            Inverts this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure is not invertible.
            </exception>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.ToString">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> to a human readable string with culture-specific
            formatting information.
            </summary>
            <returns>
            A string that represents this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.ToString(System.IFormatProvider)">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> to a human readable string.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>
            A string that represents this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
            <returns>
                <c>true</c> if <paramref name="obj" /> is a <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure that is
              identical to this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfMatrix.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfMatrix" /> structure.
            </summary>
            <returns>
            The hash code for this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPoint">
            <summary>
            Represents an ordered pair of double precision floating-point x- and
            y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfPoint.Empty">
            <summary>
                <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct with zero coordinates.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct from the
            specified <see cref="T:System.Drawing.PointF" />.
            </summary>
            <param name="pt">The <see cref="T:System.Drawing.PointF" /> from which to initialize
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct.</param>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />
            struct.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.#ctor(BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct from the
            specified <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> from which to initialize
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct with the
            specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> struct with the
            specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPoint.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> is empty.
            </summary>
            <value>
                <c>true</c> if both <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.X and <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.Y
            are 0; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPoint.X">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </summary>
            <value>
            The x-coordinate of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPoint.Y">
            <summary>
            Gets or sets the y-coordinate of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </summary>
            <value>
            The y-coordinate of this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Addition(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.Size)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by a given <see cref="T:System.Drawing.Size" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">A <see cref="T:System.Drawing.Size" /> that specifies the pair of numbers
            to add to the coordinates of <paramref name="pt" />.</param>
            <returns>
            The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
            <overloads>Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by a given size.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Addition(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.SizeF)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by a given <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">A <see cref="T:System.Drawing.SizeF" /> that specifies the pair of numbers
            to add to the coordinates of <paramref name="pt" />.</param>
            <returns>
            The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Addition(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by a given <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that specifies the pair of numbers
            to add to the coordinates of <paramref name="pt" />.</param>
            <returns>
            The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Subtraction(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.Size)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a
            given <see cref="T:System.Drawing.Size" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:System.Drawing.Size" /> that specifies the numbers to
            subtract from the coordinates of <paramref name="pt" />.</param>
            <returns>
            The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
            <overloads>Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a
            given size.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Subtraction(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.SizeF)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a
            given <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:System.Drawing.SizeF" /> that specifies the numbers to
            subtract from the coordinates of <paramref name="pt" />.</param>
            <returns>
            The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Subtraction(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a
            given <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that specifies the numbers to
            subtract from the coordinates of <paramref name="pt" />.</param>
            <returns>
            The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Equality(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Compares two <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structures. The result specifies whether
            the values of the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.X and <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.Y
            properties of the two <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structures are equal.
            </summary>
            <param name="left">A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to compare.</param>
            <param name="right">Another <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to compare.</param>
            <returns>
                <c>true</c> if the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.X and <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.Y
            values of the left and right <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structures are equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Inequality(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Determines whether the coordinates of the specified points are not equal.
            </summary>
            <param name="left">A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to compare.</param>
            <param name="right">Another <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to compare.</param>
            <returns>
                <c>true</c> to indicate the <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.X and
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.Y values of left and right are not equal;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Add(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.Size)">
            <summary>
            Translates a given <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the specified <see cref="T:System.Drawing.Size" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:System.Drawing.Size" /> that specifies the numbers to add to
            the coordinates of <paramref name="pt" />.</param>
            <returns>The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.</returns>
            <overloads>Translates a given <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the specified
            size.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Add(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.SizeF)">
            <summary>
            Translates a given <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the specified
            <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:System.Drawing.SizeF" /> that specifies the numbers to add
            to the coordinates of <paramref name="pt" />.</param>
            <returns>The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Add(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Translates a given <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the specified
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that specifies the numbers to
            add to the coordinates of <paramref name="pt" />.</param>
            <returns>The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Subtract(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.Size)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a specified size.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:System.Drawing.Size" /> that specifies the numbers to
            subtract from the coordinates of <paramref name="pt" />.</param>
            <returns>The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.</returns>
            <overloads>Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a
            specified size.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Subtract(BitMiracle.Docotic.Pdf.PdfPoint,System.Drawing.SizeF)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a specified size.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:System.Drawing.SizeF" /> that specifies the numbers to
            subtract from the coordinates of <paramref name="pt" />.</param>
            <returns>The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Subtract(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Translates a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> by the negative of a specified size.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that specifies the numbers to
            subtract from the coordinates of <paramref name="pt" />.</param>
            <returns>The translated <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.op_Explicit(BitMiracle.Docotic.Pdf.PdfPoint)~System.Drawing.PointF">
            <summary>
            Performs an explicit conversion from
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to
            <see cref="T:System.Drawing.PointF" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure to be converted.</param>
            <returns>
            The <see cref="T:System.Drawing.PointF" /> structure to which this operator converts.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.ToPointF">
            <summary>
            Converts a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to a <see cref="T:System.Drawing.PointF" />.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.PointF" /> structure.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> contains the same coordinates
            as the specified <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="obj" /> is a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> and has the same coordinates as
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.ToString">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to a human readable string.
            </summary>
            <returns>
            A string that represents this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfPoint.ToString(System.IFormatProvider)">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to a human readable string.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>
            A string that represents this <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral">
            <summary>
            A quadrilateral represented by four double precision floating-point points.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.#ctor(BitMiracle.Docotic.Pdf.PdfPoint[])">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> struct.
            </summary>
            <param name="corners">Four points representing vertices of valid quadrilateral.</param>
            <remarks>
            Order of points is important:
            <ol><li>
            The same set of corners can define different concave quadrilaterals. Consider this quadrilateral:
            (10, 30), (30, 30), (10, 10) and (11, 12). You can simply reorder corners to define different quadrilateral:
            (10, 30), (10, 10), (11, 12) and (30, 30).
            </li><li>
            Quadrilaterals are used for text markup annotations (descendants of <see cref="T:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation" />).
            First and second corners of a quadrilateral define the orientation of the annotation.
            </li></ol></remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FirstCorner">
            <summary>
            Gets or sets the coordinates of the first corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the first corner of this quadrilateral.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.SecondCorner">
            <summary>
            Gets or sets the coordinates of the second corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the second corner of this quadrilateral.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.ThirdCorner">
            <summary>
            Gets or sets the coordinates of the third corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the third corner of this quadrilateral.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FourthCorner">
            <summary>
            Gets or sets the coordinates of the fourth corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the fourth corner of this quadrilateral.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.op_Implicit(BitMiracle.Docotic.Pdf.PdfRectangle)~BitMiracle.Docotic.Pdf.PdfQuadrilateral">
            <summary>
            Performs an implicit conversion from <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" />.
            </summary>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure to convert.</param>
            <returns>
                <para>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure that is converted from the specified
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </para>
                <para>
            Quadrilateral's first corner corresponds to rectangle's left-top corner. Remaining corners are added clockwise.
            </para>
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.op_Equality(BitMiracle.Docotic.Pdf.PdfQuadrilateral,BitMiracle.Docotic.Pdf.PdfQuadrilateral)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structures equal.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure that is to the
            left of the equality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure that is to the
            right of the equality operator.</param>
            <returns>
            This operator returns <c>true</c> if the two specified
            <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structures have the same vertices in the same order.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.op_Inequality(BitMiracle.Docotic.Pdf.PdfQuadrilateral,BitMiracle.Docotic.Pdf.PdfQuadrilateral)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structures differ.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure that is to the
            left of the inequality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure that is to the
            right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any of the
            <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FirstCorner" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.SecondCorner" />, <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.ThirdCorner" /> or <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FourthCorner" />
            properties of the two <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structures are unequal;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> with
            the corners of this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="obj" /> is a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> and it equals to this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </summary>
            <returns>
            The hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.ToString">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> to a human-readable string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that describes this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.ToString(System.IFormatProvider)">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> to a human-readable string.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.String" /> that describes this <see cref="T:BitMiracle.Docotic.Pdf.PdfQuadrilateral" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfQuadrilateral.IsValid">
            <summary>
            Checks whether this structure represents a valid quadrilateral.
            </summary>
            <returns>
                <c>false</c> if the quadrilateral is invalid. For example, when it contains duplicate corners.
            Or edges that are intersected between corners. Or when 3 corners are placed on the same line.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRectangle">
            <summary>
            Stores a set of four double precision floating-point numbers that represent
            the location and size of a rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfRectangle.Empty">
            <summary>
            Represents an instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> struct with its
            members uninitialized.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> struct with the
            specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the
            rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the
            rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            struct with the specified location and size.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> struct with the
            specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the
            rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the
            rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.#ctor(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> struct with the
            specified location and size.
            </summary>
            <param name="location">A <see cref="T:System.Drawing.PointF" /> that represents the upper-left
            corner of the rectangular region.</param>
            <param name="size">A <see cref="T:System.Drawing.SizeF" /> that represents the width and
            height of the rectangular region.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.#ctor(BitMiracle.Docotic.Pdf.PdfPoint,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> struct with the
            specified location and size.
            </summary>
            <param name="location">A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the
            upper-left corner of the rectangular region.</param>
            <param name="size">A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that represents the width and
            height of the rectangular region.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> that represents the upper-left corner of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Size">
            <summary>
            Gets or sets the size of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.
            </summary>
            <value>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that represents the width and height of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <value>
            The x-coordinate of the upper-left corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <value>
            The y-coordinate of the upper-left corner of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Width">
            <summary>
            Gets or sets the width of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <value>
            The width of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Height">
            <summary>
            Gets or sets the height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <value>
            The height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <value>The x-coordinate of the left edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <value>The y-coordinate of the top edge of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.X and
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Width of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <value>The x-coordinate that is the sum of <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.X and
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Width of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Y and
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.
            </summary>
            <value>The y-coordinate that is the sum of <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Y and
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Height of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangle.IsEmpty">
            <summary>
            Tests whether the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Width or
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Height property of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            has a value of zero.
            </summary>
            <value>
            This property returns <c>true</c> if the <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Width or
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Height property of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            has a value of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.op_Implicit(System.Drawing.Rectangle)~BitMiracle.Docotic.Pdf.PdfRectangle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle" />
            to <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.
            </summary>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> structure to convert.</param>
            <returns>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that is converted from the
            specified <see cref="T:System.Drawing.Rectangle" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.op_Implicit(System.Drawing.RectangleF)~BitMiracle.Docotic.Pdf.PdfRectangle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Rectangle" />
            to <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.
            </summary>
            <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> structure to convert.</param>
            <returns>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that is converted from the
            specified <see cref="T:System.Drawing.RectangleF" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.op_Equality(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structures have equal location
            and size.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that is to the
            left of the equality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that is to the
            right of the equality operator.</param>
            <returns>
            This operator returns <c>true</c> if the two specified
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structures have equal
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.X, <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Y,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Width, and <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Height
            properties.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.op_Inequality(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structures differ in location
            or size.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that is to the
            left of the inequality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that is to the
            right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any of the
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.X, <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Y,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Width, or <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.Height
            properties of the two <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structures are unequal;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure with upper-left corner and
            lower-right corner at the specified locations.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the
            rectangular region.</param>
            <param name="top">The y-coordinate of the upper-left corner of the
            rectangular region.</param>
            <param name="right">The x-coordinate of the lower-right corner of the
            rectangular region.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the
            rectangular region.</param>
            <returns>The new <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> that this method creates.</returns>
            <overloads>Creates a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure with upper-left
            corner and lower-right corner at the specified locations.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure with upper-left corner and
            lower-right corner at the specified locations.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the
            rectangular region.</param>
            <param name="top">The y-coordinate of the upper-left corner of the
            rectangular region.</param>
            <param name="right">The x-coordinate of the lower-right corner of the
            rectangular region.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the
            rectangular region.</param>
            <returns>The new System.Drawing.RectangleF that this method creates.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Inflate(BitMiracle.Docotic.Pdf.PdfRectangle,System.Double,System.Double)">
            <summary>
            Creates and returns an inflated copy of the specified
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure. The copy is inflated by the specified
            amount. The original rectangle remains unmodified.
            </summary>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to be copied. This
            rectangle is not modified.</param>
            <param name="x">The amount to inflate the copy of the rectangle
            horizontally.</param>
            <param name="y">The amount to inflate the copy of the rectangle
            vertically.</param>
            <returns>The inflated <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /></returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Intersect(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Returns a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that represents the
            intersection of two rectangles. If there is no intersection, an empty
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> is returned.
            </summary>
            <param name="a">First rectangle to intersect.</param>
            <param name="b">Second rectangle to intersect.</param>
            <returns>A <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that represents the
            intersection of two rectangles. If there is no intersection, an empty
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> is returned.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Union(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two 
            rectangles that form a union.
            </summary>
            <param name="a">First rectangle to union.</param>
            <param name="b">Second rectangle to union.</param>
            <returns>A third <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure that contains both of
            the two rectangles that form the union.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> with
            the same location and size of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="obj" /> is a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> and its X, Y, Width, and Height properties are
            equal to the corresponding properties of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>
            This method returns <c>true</c> if the point defined by <paramref name="x" />
            and <paramref name="y" /> is contained within this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure; otherwise <c>false</c>.
            </returns>
            <overloads>Determines if the specified point or rectangle is contained
            within this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>
            This method returns <c>true</c> if the point defined by <paramref name="x" />
            and <paramref name="y" /> is contained within this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Contains(BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Determines if the specified point is contained within this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> to test.</param>
            <returns>
            This method returns <c>true</c> if the point represented by the
            <paramref name="pt" /> parameter is contained within this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Contains(System.Drawing.PointF)">
            <summary>
            Determines if the specified point is contained within this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="pt">The <see cref="T:System.Drawing.PointF" /> to test.</param>
            <returns>
            This method returns <c>true</c> if the point represented by the
            <paramref name="pt" /> parameter is contained within this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Contains(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect" />
            is entirely contained within this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="rect">The <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to test.</param>
            <returns>
            This method returns <c>true</c> if the rectangular region represented by
            <paramref name="rect" /> is entirely contained within the rectangular region
            represented by this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Contains(System.Drawing.RectangleF)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect" />
            is entirely contained within this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> to test.</param>
            <returns>
            This method returns <c>true</c> if the rectangular region represented by
            <paramref name="rect" /> is entirely contained within the rectangular region
            represented by this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <returns>
            The hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> by the specified amount.
            </summary>
            <param name="x">The amount to inflate this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure horizontally.</param>
            <param name="y">The amount to inflate this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure vertically.</param>
            <overloads>Inflates this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> by the specified
            amount.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Inflate(System.Double,System.Double)">
            <summary>
            Inflates this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> by the specified amount.
            </summary>
            <param name="x">The amount to inflate this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure horizontally.</param>
            <param name="y">The amount to inflate this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" />
            structure vertically.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Inflate(BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Inflates this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> by the specified amount.
            </summary>
            <param name="size">The amount to inflate this rectangle.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Inflate(System.Drawing.SizeF)">
            <summary>
            Inflates this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> by the specified amount.
            </summary>
            <param name="size">The amount to inflate this rectangle.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Intersect(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Replaces this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure with the intersection of
            itself and the specified <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </summary>
            <param name="rect">The rectangle to intersect.</param>
            <overloads>Replaces this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure with the
            intersection of itself and the specified rectangle.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Intersect(System.Drawing.RectangleF)">
            <summary>
            Replaces this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure with the intersection of
            itself and the specified <see cref="T:System.Drawing.RectangleF" /> structure.
            </summary>
            <param name="rect">The rectangle to intersect.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.IntersectsWith(BitMiracle.Docotic.Pdf.PdfRectangle)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect" />.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns <c>true</c> if there is any intersection.</returns>
            <overloads>Determines if this rectangle intersects with
            <paramref name="rect" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.IntersectsWith(System.Drawing.RectangleF)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect" />.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns <c>true</c> if there is any intersection.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Offset(System.Drawing.PointF)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pos">The amount to offset the location.</param>
            <overloads>Adjusts the location of this rectangle by the specified
            amount.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Offset(BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pos">The amount to offset the location.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">The amount to offset the location horizontally.</param>
            <param name="y">The amount to offset the location vertically.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">The amount to offset the location horizontally.</param>
            <param name="y">The amount to offset the location vertically.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.ToRectangleF">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to a <see cref="T:System.Drawing.RectangleF" />.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.RectangleF" /> structure.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.ToString">
            <summary>
            Converts the Location and Size of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to a
            human-readable string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the position, width, and height
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRectangle.ToString(System.IFormatProvider)">
            <summary>
            Converts the Location and Size of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> to a
            human-readable string.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.String" /> that contains the position, width, and height
            of this <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangle" /> structure.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSize">
            <summary>
            Stores an ordered pair of double precision floating-point numbers, typically
            the width and height of a PDF rectangle.
            </summary>
        </member>
        <member name="F:BitMiracle.Docotic.Pdf.PdfSize.Empty">
            <summary>
                <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct with zero dimensions.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.#ctor(BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct from the
            specified <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <param name="size">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> from which to initialize
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct.</param>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />
            struct.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct from the
            specified <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.SizeF" /> from which to initialize
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct from the
            specified <see cref="T:System.Drawing.PointF" />.
            </summary>
            <param name="pt">The <see cref="T:System.Drawing.PointF" /> from which to initialize
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.#ctor(BitMiracle.Docotic.Pdf.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct from the
            specified <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </summary>
            <param name="pt">The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> from which to initialize
            this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct from the
            specified dimensions.
            </summary>
            <param name="width">The width component of the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.</param>
            <param name="height">The height component of the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.</param>
            <overloads>Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct
            from the specified dimensions.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> struct from the
            specified dimensions.
            </summary>
            <param name="width">The width component of the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.</param>
            <param name="height">The height component of the new
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSize.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> has zero
            width and height.
            </summary>
            <value>
            This property returns <c>true</c> when this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> has both a
            width and height of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSize.Width">
            <summary>
            Gets or sets the horizontal component of this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <value>
            The horizontal component of this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />, typically measured
            in pixels.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSize.Height">
            <summary>
            Gets or sets the vertical component of this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <value>
            The vertical component of this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />, typically measured
            in pixels.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.op_Explicit(BitMiracle.Docotic.Pdf.PdfSize)~System.Drawing.PointF">
            <summary>
            Performs an explicit conversion from
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to
            <see cref="T:System.Drawing.PointF" />.
            </summary>
            <param name="size">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure to be converted.</param>
            <returns>
            The <see cref="T:System.Drawing.PointF" /> structure to which this operator converts.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.op_Explicit(BitMiracle.Docotic.Pdf.PdfSize)~BitMiracle.Docotic.Pdf.PdfPoint">
            <summary>
            Performs an explicit conversion from
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </summary>
            <param name="size">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure to be converted.</param>
            <returns>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure to which this operator converts.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.op_Addition(BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the width and height of one <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure to
            the width and height of another <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure.
            </summary>
            <param name="sz1">The first <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to add.</param>
            <param name="sz2">The second <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to add.</param>
            <returns>
            A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure that is the result of the
            addition operation.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.op_Subtraction(BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Subtracts the width and height of one <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure from
            the width and height of another <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure.
            </summary>
            <param name="sz1">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> on the left side of the
            subtraction operator.</param>
            <param name="sz2">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> on the right side of the
            subtraction operator.</param>
            <returns>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that is the result of the subtraction operation.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.op_Equality(BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structures are equal.
            </summary>
            <param name="sz1">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure on the left side of
            the equality operator.</param>
            <param name="sz2">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure on the right of the
            equality operator.</param>
            <returns>
            This operator returns <c>true</c> if <paramref name="sz1" /> and
            <paramref name="sz2" /> have equal width and height; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.op_Inequality(BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structures are different.
            </summary>
            <param name="sz1">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure on the left of the
            inequality operator.</param>
            <param name="sz2">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure on the right of the
            inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if <paramref name="sz1" /> and
            <paramref name="sz2" /> differ either in width or height; <c>false</c> if
            <paramref name="sz1" /> and <paramref name="sz2" /> are equal.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.Add(BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Adds the width and height of one <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure to the
            width and height of another <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure.
            </summary>
            <param name="sz1">The first <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to add.</param>
            <param name="sz2">The second <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to add.</param>
            <returns>A <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure that is the result of the
            addition operation.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.Subtract(BitMiracle.Docotic.Pdf.PdfSize,BitMiracle.Docotic.Pdf.PdfSize)">
            <summary>
            Subtracts the width and height of one <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure from 
            the width and height of another <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure.
            </summary>
            <param name="sz1">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure on the left side of
            the subtraction operator.</param>
            <param name="sz2">The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure on the right side of
            the subtraction operator.</param>
            <returns>The <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> that is a result of the subtraction
            operation.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> with 
            the same dimensions as this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="obj" /> is a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> and has the same width and height as this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />
            structure.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.ToPointF">
            <summary>
            Converts a <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to a <see cref="T:System.Drawing.PointF" />.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.PointF" /> structure.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.ToPdfPoint">
            <summary>
            Converts a <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" />.
            </summary>
            <returns>Returns a <see cref="T:BitMiracle.Docotic.Pdf.PdfPoint" /> structure.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.ToSizeF">
            <summary>
            Converts a <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to a <see cref="T:System.Drawing.SizeF" />.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.SizeF" /> structure.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.ToSize">
            <summary>
            Converts a <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to a <see cref="T:System.Drawing.Size" />.
            </summary>
            <returns>Returns a <see cref="T:System.Drawing.Size" /> structure.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.ToString">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to a human readable string.
            </summary>
            <returns>
            A string that represents this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfSize.ToString(System.IFormatProvider)">
            <summary>
            Converts this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" /> to a human readable string.
            </summary>
            <param name="provider">The culture-specific formatting information.</param>
            <returns>
            A string that represents this <see cref="T:BitMiracle.Docotic.Pdf.PdfSize" />.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.Pdf3dAnnotation">
            <summary>
            Class for a 3D annotation.
            </summary>
            <remarks>
            3D annotations are the means by which 3D artwork is represented in a PDF document.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfActionArea">
            <summary>
            Class for an action area annotation.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfActionArea.Action">
            <summary>
            Gets or sets the action to be performed when the link annotation
            is activated.
            </summary>
            <value>The action to be performed when the link annotation is
            activated.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfActionArea.BorderDashPattern">
            <summary>
            Gets or sets the annotation border dash pattern.
            </summary>
            <value>The annotation border dash pattern.</value>
            <remarks>
                <para>
            The dash pattern is a normal dash pattern (an array of on/off stroke lengths used
            cyclically) except that zero is always used as the offset (phase) and the number of
            array entries is limited to 10.
            </para>
                <para>In effect, all dash patterns returned by this property have
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDashPattern.Offset" /> equal to zero. And the offset value is ignored for
            any dash pattern you set to this property </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfActionArea.BorderColor">
            <summary>
            Gets or sets the color of the link annotation border.
            </summary>
            <value>The color of the link annotation border.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfButton">
            <summary>
            Class for push button control.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.Text">
            <summary>
            Gets or sets the text caption displayed in the <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> control.
            </summary>
            <value>The text caption displayed in the <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> control. The default value is an empty string.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.Font">
            <summary>
            Gets or sets the font used to display text in the control.
            </summary>
            <value>The font used to display text in the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.FontSize">
            <summary>
            Gets or sets the size of the font (in points) used to display
            text in the control.
            </summary>
            <value>The size of the font (in points) used to display text
            in the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.FontColor">
            <summary>
            Gets or sets the color of the font used to display text in the
            control.
            </summary>
            <value>The color of the font used to display text in the
            control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.Image">
            <summary>
            Gets or sets the image that is displayed on a <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> control.
            </summary>
            <value>The image displayed on the <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" /> control. The default value is null.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.Layout">
            <summary>
            Gets or sets the position of text and image relative to each other.
            </summary>
            <value>One of the values of <see cref="T:BitMiracle.Docotic.Pdf.PdfButtonLayout" />. The default is TextOnly.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfButton.ImageScaleMode">
            <summary>
            Gets or sets the image scale mode.
            </summary>
            <value>One of the values of <see cref="T:BitMiracle.Docotic.Pdf.PdfImageScaleMode" />. The default is AlwaysScale.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfButton.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCaretAnnotation">
            <summary>
            Class for a caret annotation.
            </summary>
            <remarks>
            A caret annotation is a visual symbol that indicates the presence of text edits.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCaretAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCaretAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The color of the caret.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCaretAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCaretAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCaretAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfCheckBox">
            <summary>
            Class for a check box control.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCheckBox.ExportValue">
            <summary>
            Gets or sets the export value of the check box.
            </summary>
            <value>The export of the check box.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfCheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" /> is checked or not.
            </summary>
            <value>
                <c>true</c> if the check box is checked;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfCheckBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfComboBox">
            <summary>
            Class for a combo box control. Combo box consists of a drop-down list
            optionally accompanied by an editable text box in which the user can 
            type a value other than the predefined choices.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.HasEditField">
            <summary>
            Gets or sets a value indicating whether this combo box includes an
            editable text box as well as a drop-down list.
            </summary>
            <value>
                <c>true</c> if this combo box includes an editable text box as
            well as a drop-down list; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
            <value>The text associated with the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.Font">
            <summary>
            Gets or sets the font used to display text in the control.
            </summary>
            <value>The font used to display text in the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.FontSize">
            <summary>
            Gets or sets the size of the font (in points) used to display
            text in the control.
            </summary>
            <value>The size of the font (in points) used to display text
            in the control.</value>
            <remarks>
                <para>
            The value of this property can be 0. Such a value means that the font size is to be
            automatically adjusted in PDF viewer so that the text fills the control as much
            as possible.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.FontColor">
            <summary>
            Gets or sets the color of the font used to display text in the
            control.
            </summary>
            <value>The color of the font used to display text in the
            control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the combo box border.
            </summary>
            <value>
                <c>true</c> if to show the combo box border; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfComboBox.Items">
            <summary>
            Gets the collection of items in the combo box.
            </summary>
            <value>The collection of items in the combo box.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.AddItems(BitMiracle.Docotic.Pdf.PdfListItem[])">
            <summary>
            Adds the specified items to the combo box.
            </summary>
            <param name="items">The items to add.</param>
            <overloads>Adds the specified items to the combo box.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.AddItems(System.Collections.Generic.IEnumerable{BitMiracle.Docotic.Pdf.PdfListItem})">
            <summary>
            Adds the specified items to the combo box.
            </summary>
            <param name="items">The collection of items to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.AddItems(System.String[])">
            <summary>
            Adds the specified items to the combo box.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.AddItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified items to the combo box.
            </summary>
            <param name="items">The collection of items to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.AddItem(BitMiracle.Docotic.Pdf.PdfListItem)">
            <summary>
            Adds the specified item to the combo box.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.AddItem(System.String)">
            <summary>
            Adds the specified item to the combo box.
            </summary>
            <param name="text">The text to be displayed as the name of the item to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.ClearItems">
            <summary>
            Removes all items from the combo box.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfComboBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfControl">
            <summary>
            Class for an interactive control on the screen that the user can
            manipulate with the mouse. This class is a base class for
            <see cref="T:BitMiracle.Docotic.Pdf.PdfCheckBox" />, <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" />, 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" />, <see cref="T:BitMiracle.Docotic.Pdf.PdfButton" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> and <see cref="T:BitMiracle.Docotic.Pdf.PdfSignatureField" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.BoundingBox">
            <summary>
            Gets or sets the bounding box (rectangle that defines the location
            of the control on the page).
            </summary>
            <value>
            The bounding box, corresponding to <see cref="F:BitMiracle.Docotic.Pdf.PdfRotation.None" /> of the owner page.
            </value>
            <remarks>
            The bounding box always corresponds to non-rotated page. If <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" /> 
            property is not equal to <see cref="F:BitMiracle.Docotic.Pdf.PdfRotation.None" />, the control bounds will be 
            recalculated internally. The value of <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.BoundingBox" /> property is not changed
            after <see cref="M:BitMiracle.Docotic.Pdf.PdfControl.Rotate(BitMiracle.Docotic.Pdf.PdfRotation)" /> calls.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfRotation" /> value specifying the rotation of the control
            counterclockwise relative to the page.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfRotation" /> value specifying the rotation of the control.</value>
            <seealso cref="M:BitMiracle.Docotic.Pdf.PdfControl.Rotate(BitMiracle.Docotic.Pdf.PdfRotation)" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.BorderColor">
            <summary>
            Gets or sets the color of the control border.
            </summary>
            <value>The color of the control border.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.BackgroundColor">
            <summary>
            Gets or sets the color of the control background.
            </summary>
            <value>The color of the control background.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.Hint">
            <summary>
            Gets or sets the text displayed when the mouse hovers over the
            control.
            </summary>
            <value>The text displayed when the mouse hovers over the
            control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.Name">
            <summary>
            Gets or sets the control name.
            </summary>
            <remarks>
                <para>
            In general, all controls that are children of another control must have
            unique names. But there is an exceptions from this rule : all controls in a
            group of <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" />s usually have the same name.
            </para>
                <para>
            Control names can not contain a period.
            </para>
                <para>
            Please use <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.FullName" /> property to get a fully qualified name of
            the control.
            </para>
            </remarks>
            <value>The control name.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.FullName">
            <summary>
            Gets the fully qualified name of the control.
            </summary>
            <remarks>
                <para>
            The fully qualified control name is not explicitly defined but is constructed
            from the partial control names (accessible via <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Name" /> property)
            of the control and all of its ancestors.
            </para>
                <para>
            For a control with no parent, the partial and fully qualified names are
            the same. For a control that is the child of another control, the fully
            qualified name is formed by appending the child control's partial name to
            the parent's fully qualified name, separated by a period (.)
            </para>
            </remarks>
            <value>The fully qualified name of the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.MappingName">
            <summary>
            Gets or sets the mapping name.
            </summary>
            <remarks>
                <para>
            The mapping name is used when exporting form data from the document. For example,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" /> transmits <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.MappingName" /> (if set) instead of <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.Name" />.
            </para>
            </remarks>
            <value>The mapping name of the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.ValueIsRequired">
            <summary>
            Gets or sets a value indicating whether this control must have a
            value at the time it is exported by a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSubmitFormAction" />.
            </summary>
            <value>
                <c>true</c> if this control must have a
            value at the time it is exported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnActivation">
            <summary>
            Gets or sets the action to be performed when the control is activated.
            </summary>
            <value>The action to be performed when the control is activated</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnMouseUp">
            <summary>
            Gets or sets the action to be performed when the mouse button is
            released inside the control's active area.
            </summary>
            <value>The action to be performed when the mouse button is
            released inside the control's active area.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnMouseDown">
            <summary>
            Gets or sets the action to be performed when the mouse button is
            pressed inside the control's active area.
            </summary>
            <value>The action to be performed when the mouse button is
            pressed inside the control's active area.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnMouseEnter">
            <summary>
            Gets or sets the action to be performed when the cursor enters the
            control's active area.
            </summary>
            <value>The action to be performed when the cursor enters the
            control's active area.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnMouseExit">
            <summary>
            Gets or sets the action to be performed when the cursor exits the
            controls' active area.
            </summary>
            <value>The action to be performed when the cursor exits the
            controls' active area.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnSetFocus">
            <summary>
            Gets or sets the action to be performed when the control receives
            the input focus.
            </summary>
            <value>The action to be performed when the control receives
            the input focus.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnLostFocus">
            <summary>
            Gets or sets the action to be performed when the control loses
            the input focus.
            </summary>
            <value>The action to be performed when the control loses
            the input focus.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnOtherControlChanged">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed to recalculate the value of this control when that of
            another control changes.
            </summary>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed to recalculate the value of this control when that of
            another control changes.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnKeyPress">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed when the user types a keystroke into 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> or <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> or modifies
            the selection in a scrollable list box.
            </summary>
            <remarks>This action can check the keystroke for validity and
            reject or modify it.</remarks>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed when the user types a keystroke.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnBeforeFormatting">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed before the control is formatted to display its current
            value.
            </summary>
            <remarks>This action can modify the control's value before
            formatting.</remarks>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed before the control is formatted to display its current
            value.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfControl.OnChange">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed when the control's value is changed.
            </summary>
            <remarks>This action can check the new value for validity.</remarks>
            <value>The <see cref="T:BitMiracle.Docotic.Pdf.PdfJavaScriptAction" /> action to be
            performed when the control's value is changed.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfControl.Rotate(BitMiracle.Docotic.Pdf.PdfRotation)">
            <summary>
            Rotates control around top-left control's corner, counter-clockwise, relative to the page. 
            Useful when <see cref="T:BitMiracle.Docotic.Pdf.PdfPage" /> is rotated.
            </summary>
            <param name="rotation">
            The rotation angle relative to the page rotation. Usually it should be equal to
            <see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />.
            </param>
            <remarks>
                <para>
            Please note that rotation angle doesn't depend on the current rotation angle of the
            control. All rotation is made relative to the page only. Examples:
            </para>
                <para>
            2 sequential calls:
            <c>
            Rotate(PdfRotation.Rotate90);
            Rotate(PdfRotation.Rotate90);
            </c>
            will rotate control on 90 degrees, not 180. I.e. second call doesn't affect rotation, 
            because rotation angle is the same
            </para>
                <para>
            2 sequential calls:
            <c>
            Rotate(PdfRotation.Rotate90);
            Rotate(PdfRotation.Rotate270);
            </c>
            will rotate control on 270 degrees. The result of first rotation will be overwritten.
            </para>
            </remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfControl.Rotation" />
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfPage.Rotation" />
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfControl.Flatten">
            <summary>
            Flattens this control to its parent page. In effect, replaces the control with its
            appearance.
            </summary>
            <remarks>
                <para>
            Flattening locks control from editing. Flattening can significantly reduce file
            size if <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.RemoveUnusedObjects" /> property is set to <c>true</c>.
            </para>
                <para>
            This method flattens the control in 2 steps:
            <ol><li>
            Draws control on its parent page using text and vector graphics operators.
            </li><li>
            Removes control from the document and from the PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Controls" />
            collection of its parent page.
            </li></ol></para>
                <para>
            NOTES:
            <ul><li>Do not use this control after successful flattening. The flattened control is
            detached from its document.</li><li>
            This method modifies PdfPage.<see cref="P:BitMiracle.Docotic.Pdf.PdfPage.Controls" /> collection so do not use
            <see cref="M:BitMiracle.Docotic.Pdf.PdfControl.Flatten" /> method within <c>foreach (var control in page.Controls)</c> loop.
            </li><li>This method can change graphics state of the page. To avoid possible side effects,
            call the method right before saving of the document.</li></ul></para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                <para>
            Control does not have a parent page (<see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Owner" /> is <c>null</c>) or
            control is hidden (<see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Hidden" /> is <c>true</c>)
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            Control has a signature type (<see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Type" /> equals to
            <see cref="F:BitMiracle.Docotic.Pdf.PdfWidgetType.Signature" />)
            </exception>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfControl.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation">
            <summary>
            Class for an ellipse annotation.
            </summary>
            <remarks>
            Ellipse annotation displays an ellipse on the page. When opened, 
            it displays a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The stroke color of the ellipse.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the 
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation">
            <summary>
            Class for a file attachment annotation.
            </summary>
            <remarks>
                <para>
            A file attachment annotation contains a reference to a file, which
            typically is embedded in the PDF file.
            </para>
                <para>
            For example, a table of data might use a file attachment annotation to link 
            to a spreadsheet file based on that data; activating the annotation extracts 
            the embedded file and gives the user an opportunity to view it or store it in
            the file system.
            </para>
            </remarks>
            <seealso cref="M:BitMiracle.Docotic.Pdf.PdfPage.AddFileAnnotation(BitMiracle.Docotic.Pdf.PdfRectangle,BitMiracle.Docotic.Pdf.PdfFileSpecification)" />
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.File">
            <summary>
            Gets the file specification associated with this annotation.
            </summary>
            <value>The file specification associated with this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.Title">
            <summary>
            Gets or sets the title of the attached file.
            </summary>
            <value>The title of the attached file.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.Description">
            <summary>
            Gets or sets the description of the attached file.
            </summary>
            <value>The description of of the attached file.</value>
            <remarks>
            For viewer applications this property takes precedence over 
            PdfFileSpecification.<see cref="P:BitMiracle.Docotic.Pdf.PdfFileSpecification.Description" />
            property.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.Icon">
            <summary>
            Gets or sets the icon to be used in displaying the annotation.
            </summary>
            <value>The icon to be used in displaying the annotation.</value>
            <remarks>Default value: <see cref="F:BitMiracle.Docotic.Pdf.PdfFileAnnotationIcon.Pushpin" />.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation.Color">
            <summary>
            Gets or sets the color of this <see cref="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation" />.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The background of the annotation's icon when closed.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this <see cref="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation" />.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation">
            <summary>
            Class for a free text annotation.
            </summary>
            <remarks>
            A free text annotation displays text directly on the page. Unlike an ordinary
            text annotation (<see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" />), a free text annotation
            has no open or closed state; instead of being displayed in a pop-up window, the
            text is always visible.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation.BackgroundColor">
            <summary>
            Gets the color of the annotation background.
            </summary>
            <value>The color of the annotation background.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation.Text">
            <summary>
            Gets the text content of this annotation.
            </summary>
            <value>The text content of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation.Author">
            <summary>
            Gets or sets the identifier of the person who added the annotation.
            </summary>
            <value>
            The identifier of the person who added the annotation.
            </value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfHighlightAnnotation">
            <summary>
            Class for a highlight annotation.
            </summary>
            <remarks>
            Highlight annotations appear as highlights in the text of a document. When
            opened, they display a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfInkAnnotation">
            <summary>
            Class for an ink annotation.
            </summary>
            <remarks>
            An ink annotation represents a freehand “scribble” composed of one or
            more disjoint paths. When opened, it displays a pop-up window containing the
            text of the associated note.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInkAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInkAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The color of the lines.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInkAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInkAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfInkAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfJaggedUnderlineAnnotation">
            <summary>
            Class for a jagged-underline annotation.
            </summary>
            <remarks>
            Jagged-underline annotations appear as jagged underlines in the text of a
            document. When opened, they display a pop-up window containing the text of
            the associated note.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfLineAnnotation">
            <summary>
            Class for a line annotation.
            </summary>
            <remarks>
            A line annotation displays a single straight line on the page. When opened, 
            it displays a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The color of the line.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfLineAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the 
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfListBox">
            <summary>
            Class for a scrollable list box control.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.MultiSelection">
            <summary>
            Gets or sets a value indicating whether this list box can have more than one
            of its items selected.
            </summary>
            <value>
                <c>true</c> if this list box allows you to select multiple items.
            <c>false</c> if this list box does not allow you to select more than one item.
            </value>
            <remarks>
                <para>
            This property is always <c>true</c> if <see cref="P:BitMiracle.Docotic.Pdf.PdfListBox.SelectedItems" /> collection
            contains multiple items. Setting this property to <c>false</c> throws
            <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> if <see cref="P:BitMiracle.Docotic.Pdf.PdfListBox.SelectedItems" /> collection contains
            multiple items.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.Font">
            <summary>
            Gets or sets the font used to display text in the control.
            </summary>
            <value>The font used to display text in the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.FontSize">
            <summary>
            Gets or sets the size of the font (in points) used to display text in the control.
            </summary>
            <value>The size of the font (in points) used to display text in the control.</value>
            <remarks>
                <para>
            The value of this property can be 0. Such a value means that the font size is to be
            automatically adjusted in PDF viewer so that the text fills the control as much
            as possible.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.FontColor">
            <summary>
            Gets or sets the color of the font used to display text in the control.
            </summary>
            <value>The color of the font used to display text in the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the list box border.
            </summary>
            <value>
                <c>true</c> if to show the list box border; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.Items">
            <summary>
            Gets the collection of items in the list box.
            </summary>
            <value>The collection of items in the list box.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListBox.SelectedItems">
            <summary>
            Gets the collection of selected items in the list box.
            </summary>
            <value>The collection of selected items in the list box.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.AddItems(BitMiracle.Docotic.Pdf.PdfListItem[])">
            <summary>
            Adds the specified items to the list box.
            </summary>
            <param name="items">The items to add.</param>
            <overloads>Adds the specified items to the list box.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.AddItems(System.Collections.Generic.IEnumerable{BitMiracle.Docotic.Pdf.PdfListItem})">
            <summary>
            Adds the specified items to the list box.
            </summary>
            <param name="items">The collection of items to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.AddItem(BitMiracle.Docotic.Pdf.PdfListItem)">
            <summary>
            Adds the specified item to the list box.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.AddItem(System.String)">
            <summary>
            Creates new list item with specified text and adds it to the list box.
            </summary>
            <param name="text">The text of the item to add.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.ClearItems">
            <summary>
            Removes all items from the list box.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.SelectItems(BitMiracle.Docotic.Pdf.PdfListItem[])">
            <summary>
            Marks specified items as selected.
            </summary>
            <param name="items">Collection of items to select.</param>
            <remarks>
                <para>
            This method removes selection from any items not in <paramref name="items" />.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfListItem">
            <summary>
            Represents an item in a <see cref="T:BitMiracle.Docotic.Pdf.PdfComboBox" /> or <see cref="T:BitMiracle.Docotic.Pdf.PdfListBox" /> controls.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class with the
            specified text.
            </summary>
            <param name="text">The text to be displayed as the name of the item.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class with the
            specified text and export value.
            </summary>
            <param name="text">The text to be displayed as the name of the item.</param>
            <param name="exportValue">The export value.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListItem.Text">
            <summary>
            Gets the text to be displayed as the name of the item.
            </summary>
            <value>The text to be displayed as the name of the item.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfListItem.ExportValue">
            <summary>
            Gets the export value of the item.
            </summary>
            <value>The export value of the item.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.op_Equality(BitMiracle.Docotic.Pdf.PdfListItem,BitMiracle.Docotic.Pdf.PdfListItem)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> classes have equal text and export values.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class that is to the left of the
            equality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class that is to the right of the
            equality operator.</param>
            <returns>
            This operator returns <c>true</c> if the two specified <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" />
            classes have equal text and export values.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.op_Inequality(BitMiracle.Docotic.Pdf.PdfListItem,BitMiracle.Docotic.Pdf.PdfListItem)">
            <summary>
            Tests whether two <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class differ in text or export value.
            </summary>
            <param name="left">The <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> structure that is to the left of the
            inequality operator.</param>
            <param name="right">The <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> structure that is to the right of
            the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if contents of the two <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" />
            classes is not equal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj" /> is a <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> with
            the same text and export value of this <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="obj" /> is a
            <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> and its <see cref="P:BitMiracle.Docotic.Pdf.PdfListItem.Text" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfListItem.ExportValue" />
            properties are equal to the corresponding properties of this <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class.
            </summary>
            <returns>
            The hash code for this <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" />.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfListItem.ToString">
            <summary>
            Converts the item to a human-readable string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that contains the human-readable representation of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfListItem" /> class.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfMovieAnnotation">
            <summary>
            Class for a movie annotation.
            </summary>
            <remarks>
            A movie annotation contains animated graphics and sound to be presented
            on the computer screen and through the speakers. When the annotation is
            activated, the movie is played.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation">
            <summary>
            Class for a polygon annotation.
            </summary>
            <remarks>
            Polygon annotations display closed polygons on the page. Such polygons 
            may have any number of vertices connected by straight lines.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The stroke color of the polygon.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation">
            <summary>
            Class for a polyline annotation.
            </summary>
            <remarks>
            Polyline annotations are similar to polygons (<see cref="T:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation" />), 
            except that the first and last vertex are not implicitly connected.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The color of the polyline.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPopupAnnotation">
            <summary>
            Class for a pop-up annotation.
            </summary>
            <remarks>
            A pop-up annotation displays text in a pop-up window for entry and
            editing. It typically does not appear alone but is associated with a markup
            annotation, its parent annotation, and is used for editing the parent’s text.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfPopupAnnotation.Parent">
            <summary>
            Gets the parent annotation for this pop-up annotation.
            </summary>
            <value>The parent annotation for this pop-up annotation.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfPrinterMarkAnnotation">
            <summary>
            Class for a printer's mark annotation.
            </summary>
            <remarks>
            A printer’s mark annotation represents a graphic symbol, such as a
            registration target, color bar, or cut mark, added to a page to assist production
            personnel in identifying components of a multiple-plate job and maintaining
            consistent output during production.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRadioButton">
            <summary>
            Class for a radio button control.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRadioButton.ExportValue">
            <summary>
            Gets or sets the export value of the radio button.
            </summary>
            <value>The export of the radio button.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRadioButton.Checked">
            <summary>
            Gets or sets a value indicating whether this 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRadioButton" /> is checked or not.
            </summary>
            <value>
                <c>true</c> if the radio button is checked;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRadioButton.ChecksInUnison">
            <summary>
            (PDF 1.5) Gets or sets a value indicating whether this radio button and all other
            radio buttons with the same export values from the same group of radio buttons 
            should turn on and off in unison; that is if one is checked, they are all checked.
            </summary>
            <value>
            A value indicating whether this radio button and all other radio buttons with the
            same export values from the same group of radio buttons should turn on and off in
            unison; that is if one is checked, they are all checked.
            </value>
            <remarks>
                <para>
            If this property is <c>true</c> then all radio buttons with the same export values
            from the same group of radio buttons will turn on and off in unison; that is if one is
            checked, they are all checked. If this property is the buttons are mutually exclusive
            (the same behavior as HTML radio buttons).
            </para>
                <para>
            The default value of this property is <c>false</c>. I.e. radio buttons are mutually
            exclusive by default.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfRadioButton.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation">
            <summary>
            Class for a rectangle annotation.
            </summary>
            <remarks>
            Rectangle annotation displays a rectangle on the page. When opened, 
            it displays a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation.Color">
            <summary>
            Gets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The stroke color of the rectangle.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfRichMediaAnnotation">
            <summary>
            Class for a rich media annotation.
            </summary>
            <remarks>
            Rich media annotations allow to attach Flash applications, video, audio,
            and other multimedia to a PDF with expanded functionality.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfRichMediaAnnotation.Assets">
            <summary>
            Gets the collection of embedded file specifications associated with this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRichMediaAnnotation" />.
            </summary>
            <value>The collection of file specifications associated with this annotation.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfScreenAnnotation">
            <summary>
            Class for a screen annotation.
            </summary>
            <remarks>
            A screen annotation specifies a region of a page upon which media clips
            may be played. It also serves as an object from which actions can be triggered.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSignatureField">
            <summary>
            Class for a signature field.
            </summary>
            <remarks>
            A signature field is a form field that contains a digital signature.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureField.Lock">
            <summary>
            (PDF 1.5) Gets or sets the signature field lock that specifies a set of form fields
            that shall be locked when this signature field is signed.
            </summary>
            <value>
            The signature field lock that specifies a set of form fields that shall be locked when
            this signature field is signed.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if there is no field lock associated
            with this signature field.
            </para>
            Setting value of this property to <c>null</c> will remove any field lock associated
            with this signature field.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSignatureField.Signature">
            <summary>
            Gets the <see cref="T:BitMiracle.Docotic.Pdf.PdfSignature" /> object that specifies the signature associated
            with this signature field.
            </summary>
            <value>
            The <see cref="T:BitMiracle.Docotic.Pdf.PdfSignature" /> object that specifies the signature associated with
            this signature field.
            </value>
            <remarks>
                <para>
            The value of this property can be <c>null</c> if there is no signature associated
            with this signature field.
            </para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfSoundAnnotation">
            <summary>
            Class for a sound annotation.
            </summary>
            <remarks>
            A sound annotation is analogous to a text annotation
            (<see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" />) except that instead of a text note, it contains
            sound recorded from the computer’s microphone or imported from a file. When the
            annotation is activated, the sound is played. The annotation behaves like a text
            annotation in most ways, with a different icon (by default, a speaker) to
            indicate that it represents a sound.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSoundAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSoundAnnotation.Color">
            <summary>
            Gets or sets the color of this annotation.
            </summary>
            <value>The color of the sound annotation icon.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSoundAnnotation.Description">
            <summary>
            Gets or sets the description of this annotation.
            </summary>
            <value>The description of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSoundAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfSoundAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the 
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfStampAnnotation">
            <summary>
            Class for a rubber stamp annotation.
            </summary>
            <remarks>
            A rubber stamp annotation displays text or graphics intended to look as
            if they were stamped on the page with a rubber stamp. When opened, it displays a
            pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfStampAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfStampAnnotation.Color">
            <summary>
            Gets or sets the color of this annotation.
            </summary>
            <remarks>
            Specified color is used in the title bar of the annotation's pop-up window.
            </remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfStampAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the annotation's pop-up window is open.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfStampAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfStampAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the
            window is open and active.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfStrikeoutAnnotation">
            <summary>
            Class for a strikeout annotation.
            </summary>
            <remarks>
            Strikeout annotations appear as strikeouts in the text of a document. When
            opened, they display a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation">
            <summary>
            Class for a text annotation. 
            </summary>
            <remarks>A text annotation represents a "sticky note" attached to a
            point in the PDF document. When closed, the annotation appears as an
            icon; when open, it displays a pop-up window containing the text of the
            note in a font and size chosen by the viewer application. Text
            annotations do not scale and rotate with the page; they behave as if
            the <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.NoZoom" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.NoRotate" />
            properties were always set.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.Title">
            <summary>
            Gets or sets the annotation title.
            </summary>
            <value>
            The text label that is displayed in the title bar of
            the annotation's pop-up window when open and active.
            The title shall identify the user who added the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The annotation contents.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.Icon">
            <summary>
            Gets or sets the icon to be used in displaying the annotation.
            </summary>
            <value>The icon to be used in displaying the annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.Opened">
            <summary>
            Gets or sets a value indicating whether this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" /> should initially be displayed open.
            </summary>
            <value>
                <c>true</c> if should initially be displayed open;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextAnnotation.Color">
            <summary>
            Gets or sets the color of this <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" />.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The background of the annotation's icon when closed.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" />.</value>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextBox">
            <summary>
            Class for a text box control.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.Text">
            <summary>
            Gets or sets the text content of the <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> control.
            </summary>
            <value>The text displayed in the <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> control. The default is an
            empty string.</value>
            <remarks>
                <para>
            Length of any new value assigned to this property gets validated against value of
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.MaxLength" /> property. For string values with length bigger than value
            specified by <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.MaxLength" /> property a <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> is thrown.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.Font">
            <summary>
            Gets or sets the font used to display text in the control.
            </summary>
            <value>The font used to display text in the control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.FontSize">
            <summary>
            Gets or sets the size of the font (in points) used to display
            text in the control.
            </summary>
            <value>The size of the font (in points) used to display text
            in the control.</value>
            <remarks>
                <para>
            The value of this property can be 0. Such a value means that the font size is to be
            automatically adjusted in PDF viewer so that the text fills the control as much
            as possible.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.FontColor">
            <summary>
            Gets or sets the color of the font used to display text in the
            control.
            </summary>
            <value>The color of the font used to display text in the
            control.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.Multiline">
            <summary>
            Gets or sets a value indicating whether the text of this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextBox" /> can span more than one line.
            </summary>
            <value>
                <c>true</c> if text can span more than one line;
            otherwise, <c>false</c>.</value>
            <remarks>
                <para>
            Changing value of this property resets vertical alignment of the text box.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.PasswordField">
            <summary>
            Gets or sets a value indicating whether this text box is intended
            for entering a secure password that should not be echoed visibly to
            the screen. Characters typed from the keyboard should instead be
            echoed in some unreadable form, such as asterisks or
            bullet characters.
            </summary>
            <value>
                <c>true</c> if this text box is intended for entering a
            secure password; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.ShowBorder">
            <summary>
            Gets or sets a value indicating whether to show the text box border.
            </summary>
            <value>
                <c>true</c> if to show the text box border; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.MaxLength">
            <summary>
            Gets or sets the maximum number of characters that can be entered
            into the text box.
            </summary>
            <value>The maximum number of characters that can be entered
            into the text box.</value>
            <remarks>
                <para>
            If this property is equal to <see cref="F:System.Int32.MaxValue" /> then this text box has no limit
            for number of characters that can be entered into it.
            </para>
                <para>
            Setting zero, negative value or value equal to <see cref="F:System.Int32.MaxValue" /> removes the
            limit for number of characters that can be entered into this text box.
            </para>
                <para>
            Setting non-zero, positive value less than length of existing <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.Text" /> causes
            a <see cref="T:BitMiracle.Docotic.Pdf.PdfException" /> to be thrown.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.Comb">
            <summary>
            (PDF 1.5) Gets or sets a value indicating whether this text box should be automatically
            divided into as many equally spaced positions, or combs, as the value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.MaxLength" /> property, and the text should be laid out into those combs.
            </summary>
            <value>
            a value indicating whether this text box should be automatically
            divided into as many equally spaced positions, or combs, as the value of 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.MaxLength" /> property, and the text should be laid out into those combs.
            </value>
            <remarks>
                <para>
            Setting this property to <c>true</c> is meaningful only if <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.MaxLength" />
            property is set. 
            </para>
                <para>
            The value of this property is ignored if this text box is marked as
            <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.Multiline" /> or <see cref="P:BitMiracle.Docotic.Pdf.PdfTextBox.PasswordField" />.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.Scrollable">
            <summary>
            (PDF 1.4) Gets or sets a value indicating whether this text box can scroll.
            </summary>
            <value>
            A value indicating whether this text box can scroll
            (horizontally for single-line fields, vertically for multiple-line fields)
            to accommodate more text than fits within its <see cref="P:BitMiracle.Docotic.Pdf.PdfControl.BoundingBox" />.
            </value>
            <remarks>
                <para>Default value: true.</para>
                <para>When this property is <c>false</c>, no further text is accepted when the field is full.</para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextBox.TextAlign">
            <summary>
            (PDF 1.4) Gets or sets a value indicating how the text should be aligned horizontally
            within text box.
            </summary>
            <value>
            A value indicating how the text should be aligned horizontally within text box.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextBox.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation">
            <summary>
            Base class for text markup annotations.
            </summary>
            <remarks>
            Text markup annotations appear as highlights, underlines, strikeouts, or jagged underlines in the text of a document.
            When opened, they display a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.CreationDate">
            <summary>
            Gets the date and time when the annotation was created.
            </summary>
            <value>
            The date and time when the annotation was created or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time are expressed in UTC (Coordinated Universal Time).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.Color">
            <summary>
            Gets or sets the color of this annotation.
            </summary>
            <remarks>Specified color is used for the following purposes:
            <list type="bullet"><item><description>The color of the effect applied to the text.</description></item><item><description>The title bar of the annotation's pop-up window.</description></item></list></remarks>
            <value>The color of this annotation.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.Contents">
            <summary>
            Gets or sets the annotation contents.
            </summary>
            <value>The text that is displayed when the pop-up window is opened.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.Subject">
            <summary>
            Gets or sets the annotation subject.
            </summary>
            <value>
            The text representing a short description of the subject being addressed by the annotation.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.Author">
            <summary>
            Gets or sets the annotation author.
            </summary>
            <value>The identifier of the person who created the annotation.</value>
            <remarks>
            The author is displayed in the title bar of the annotation's pop-up window when the 
            window is open and active.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.GetTextBounds">
            <summary>
            Gets a collection of quadrilaterals that encompass a word or group of contiguous words in the text underlying
            the annotation.
            </summary>
            <returns>Collection of quadrilaterals that encompass a word or group of contiguous words in the text underlying
            the annotation</returns>
            <remarks>
            The text is oriented with respect to the edge connecting <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FirstCorner" /> and 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.SecondCorner" /> points.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfTextMarkupAnnotation.SetTextBounds(System.Collections.Generic.IEnumerable{BitMiracle.Docotic.Pdf.PdfQuadrilateral})">
            <summary>
            Sets a collection of quadrilaterals that encompass a word or group of contiguous words in the text underlying
            the annotation.
            </summary>
            <param name="textBounds">Bounds for words in the text underlying the annotation.</param>
            <remarks>
            The text is oriented with respect to the edge connecting <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FirstCorner" /> and 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.SecondCorner" /> points. Usually, <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.FirstCorner" /> should
            correspond to the left-top corner of the annotated area, <see cref="P:BitMiracle.Docotic.Pdf.PdfQuadrilateral.SecondCorner" /> -
            to the right-top corner.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfTrapNetworkAnnotation">
            <summary>
            Class for a trap network annotation.
            </summary>
            <remarks>
            A trap network annotation defines the trapping characteristics for a
            page of a PDF document. (<i>Trapping</i> is the process of adding marks to a page
            along color boundaries to avoid unwanted visual artifacts resulting from
            misregistration of colorants when the page is printed.) A page may have at most
            one trap network annotation.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfUnderlineAnnotation">
            <summary>
            Class for a underline annotation.
            </summary>
            <remarks>
            Underline annotations appear as underlines in the text of a document. When
            opened, they display a pop-up window containing the text of the associated note.
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfWatermarkAnnotation">
            <summary>
            Class for a watermark annotation.
            </summary>
            <remarks>
                <para>A watermark annotation (PDF 1.6) is used to represent graphics that are expected
            to be printed at a fixed size and position on a page, regardless of the dimensions
            of the printed page.</para>
                <para>Watermark annotations have no pop-up window or other interactive elements.
            When displaying a watermark annotation on-screen, viewer applications should
            use the dimensions of the media box as the page size so that the scroll and zoom
            behavior is the same as for other annotations.</para>
                <para>
                    <b>Note:</b> Since many printing devices have nonprintable margins, it is recommended
            that such margins be taken into consideration when positioning watermark annotations
            near the edge of a page.</para>
            </remarks>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfWidget">
            <summary>
            Class for a widget (annotation). Widget is an object such as a note,
            sound, or movie with a location on a page of a PDF document, or an 
            interactive control that provides a way to interact with the user by
            means of the mouse and keyboard. This class is a base class for 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfControl" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfActionArea" />, 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTextAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.Pdf3dAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfEllipseAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfFileAttachmentAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfFreeTextAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfHighlightAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfInkAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfJaggedUnderlineAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfLineAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfMovieAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPolygonAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPolylineAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPopupAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfPrinterMarkAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfRectangleAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfScreenAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfSoundAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfStampAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfStrikeoutAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfTrapNetworkAnnotation" />,
            <see cref="T:BitMiracle.Docotic.Pdf.PdfUnderlineAnnotation" /> and 
            <see cref="T:BitMiracle.Docotic.Pdf.PdfWatermarkAnnotation" />.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />.
            </summary>
            <value>The type of this <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Owner">
            <summary>
            Gets the page with which this widget is associated.
            </summary>
            <value>The page with which this widget is associated.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.BoundingBox">
            <summary>
            Gets or sets the bounding box (rectangle that defines the location
            of the widget on the page).
            </summary>
            <value>The bounding box.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge of the bounding box
            (rectangle that defines the location of the widget on the page).
            </summary>
            <value>The x-coordinate of the left edge of the bounding box.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Top">
            <summary>
            Gets or sets the y-coordinate of the top edge of the bounding box
            (rectangle that defines the location of the widget on the page).
            </summary>
            <value>The y-coordinate of the top edge of the bounding box.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Width">
            <summary>
            Gets or sets the width of the bounding box
            (rectangle that defines the location of the widget on the page).
            </summary>
            <value>The width of the bounding box in pixels.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Height">
            <summary>
            Gets or sets the height of the bounding box
            (rectangle that defines the location of the widget on the page).
            </summary>
            <value>The height of the bounding box in pixels.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.ModifiedDate">
            <summary>
            Gets or sets the date and time when the widget was last modified.
            </summary>
            <value>
            The date and time when the widget was last modified or <c>null</c> if
            there is no value set for this property.
            </value>
            <remarks>
            Returned date and time (what you get) expressed in UTC (Coordinated Universal Time).
            Provided date and time (what you set) is expected to be in local time zone.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Flags">
            <summary>
            Gets or sets the set of flags specifying various characteristics
            of the widget.
            </summary>
            <value>The set of flags specifying various characteristics
            of the widget.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Invisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />
            is invisible.
            </summary>
            <remarks>If widget is invisible than it does not get displayed. <br />
            This property is useful only if widget does not belong to one of the
            standard widget types and there is no action associated with this
            widget.</remarks>
            <value>
                <c>true</c> if widget is invisible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Hidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />
            is hidden. 
            </summary>
            <remarks>If widget is hidden than it does not get displayed or 
            printed and user can't interact with this widget.<br />
            This property is useful regardless of widget type or whether there is
            an action associated with this widget (unlike
            <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Invisible" /> property).</remarks>
            <seealso cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Invisible" />
            <value>
                <c>true</c> if widget is hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Print">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" />
            gets printed when the page is printed.
            </summary>
            <remarks>This property can be useful, for example, for widgets
            representing interactive pushbuttons, which would serve no
            meaningful purpose on the printed page.</remarks>
            <value>
                <c>true</c> if this widget gets printed; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.NoZoom">
            <summary>
            Gets or sets a value indicating whether to scale widget's appearance
            to match the magnification of the page.
            </summary>
            <value>
                <c>true</c> if not to scale widget's appearance to match the
            magnification of the page; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.NoRotate">
            <summary>
            Gets or sets a value indicating whether to rotate the widget's
            appearance to match the rotation of the page.
            </summary>
            <value>
                <c>true</c> if not to rotate the widget's appearance to match
            the rotation of the page; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.NoView">
            <summary>
            Gets or sets a value indicating whether to display widget on screen
            and allow it to interact with the user.
            </summary>
            <remarks>If this property is set to <c>true</c> than widget may
            be printed (depending on the setting of the <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Print" />
            property) but is considered hidden for purposes of on-screen display
            and user interaction.</remarks>
            <value>
                <c>true</c> if not to display widget on screen or allow it
            to interact with the user; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.ReadOnly">
            <summary>
            Gets or sets a value indicating whether to allow widget to interact
            with the user.
            </summary>
            <remarks>The widget may be displayed or printed (depending on the
            settings of the <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.NoView" /> and <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.Print" />
            properties) but will not respond to mouse clicks or change its
            appearance in response to mouse motions.</remarks>
            <value>
                <c>true</c> if to allow widget to interact with the user;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Locked">
            <summary>
            (PDF 1.4) Gets or sets a value indicating whether this
            <see cref="T:BitMiracle.Docotic.Pdf.PdfWidget" /> is locked.
            </summary>
            <remarks>If widget is locked than widget can't be deleted and 
            its properties (including position and size) can't be modified by
            the user. However, this property does not restrict changes to the
            widget's contents, such as the value of a form field.</remarks>
            <value>
                <c>true</c> if widget is locked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.ToggleNoView">
            <summary>
            (PDF 1.5) Gets or sets a value indicating whether to invert the
            interpretation of <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.NoView" /> property for certain events.
            </summary>
            <remarks>A typical use is to have a widget that appears only when
            a mouse cursor is held over it.</remarks>
            <value>
                <c>true</c> if to invert the interpretation of
            <see cref="P:BitMiracle.Docotic.Pdf.PdfWidget.NoView" /> property for certain events;
            otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.LockedContents">
            <summary>
            (PDF 1.7) Gets or sets a value indicating whether to allow the
            contents of the widget to be modified by the user.
            </summary>
            <remarks>This property does not restrict deletion of the widget
            or changes to other widget properties, such as position and
            size.</remarks>
            <value>
                <c>true</c> if to allow the contents of the widget to be
            modified by the user; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.HasBorder">
            <summary>
            Gets or sets a value indicating whether this widget has border.
            </summary>
            <value>
                <c>true</c> if this widget has border; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.PdfWidget.Layer">
            <summary>
            Gets or sets the layer to which this widget belongs.
            </summary>
            <value>
            The layer to which this widget belongs or <c>null</c> if this widget does not belong
            to any layer.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidget.op_Equality(BitMiracle.Docotic.Pdf.PdfWidget,BitMiracle.Docotic.Pdf.PdfWidget)">
            <summary>
            Determines whether the two specified objects are equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidget.op_Inequality(BitMiracle.Docotic.Pdf.PdfWidget,BitMiracle.Docotic.Pdf.PdfWidget)">
            <summary>
            Determines whether the two specified objects are not equal to each other.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns>
                <c>true</c> if specified objects are not equal to each other; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidget.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidget.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
                <c>true</c> if the specified object is equal to current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidget.GetHashCode">
            <summary>
            Serves as a hash function for a this type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.PdfWidgetCollection">
            <summary>
            Collection of widgets.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidgetCollection.Remove(BitMiracle.Docotic.Pdf.PdfWidget)">
            <summary>
            Removes the first occurrence of a specific widget from the collection.
            </summary>
            <param name="widget">The widget to remove from the collection.</param>
            <returns>
                <c>true</c> if widget is successfully removed; otherwise, <c>false.</c>
            This method also returns <c>false</c> if widget was not found in the collection.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidgetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the widget at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the widget to remove.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.PdfWidgetCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpArray">
            <summary>
            Class for an XMP array. An XMP array consists of a set of values. XMP array is
            one of the data types allowed for values of XMP properties.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpArray.#ctor(BitMiracle.Docotic.Pdf.XmpArrayType)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" /> class.
            </summary>
            <param name="type">The type of the array.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpArray.Type">
            <summary>
            Gets the type of this <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />.
            </summary>
            <value>The type of this <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpArray.Values">
            <summary>
            Gets the collection of values stored in this <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />.
            </summary>
            <value>The collection of values stored in this <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpArray.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpBasicSchema">
            <summary>
            This XMP schema contains properties that provide basic descriptive information.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.Advisory">
            <summary>
            Gets or sets the unordered array of properties that were edited outside the
            authoring application.
            </summary>
            <value>
            The unordered array of properties that were edited outside the authoring
            application.
            </value>
            <remarks>
            The value of this property should be <c>null</c> or an <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />
            of <see cref="F:BitMiracle.Docotic.Pdf.XmpArrayType.Unordered" /> type containing values of
            <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> type.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.BaseUrl">
            <summary>
            Gets or sets the base URL for relative URLs in the document content.
            </summary>
            <value>
            The base URL for relative URLs in the document content.
            </value>
            <remarks>
                <para>
            If this document contains Internet links, and those links are relative,
            they are relative to this base URL.
            </para>
                <para>
            This property provides a standard way for embedded relative URLs to be
            interpreted by tools. Web authoring tools should set the value based on
            their notion of where URLs will be interpreted.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.CreateDate">
            <summary>
            Gets the string representation of date and time this document was originally
            created.
            </summary>
            <value>The string representation of date and time this document was
            originally created.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.CreatorTool">
            <summary>
            Gets or sets the name of the first known tool used to create this document.
            </summary>
            <value>
            The name of the first known tool used to create this document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.Identifier">
            <summary>
            Gets or sets the unordered array of text strings that unambiguously identify
            this document within a given context.
            </summary>
            <value>
            The unordered array of text strings that unambiguously identify this document
            within a given context.
            </value>
            <remarks>
            The value of this property should be <c>null</c> or an <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />
            of <see cref="F:BitMiracle.Docotic.Pdf.XmpArrayType.Unordered" /> type containing values of
            <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> type.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.MetadataDate">
            <summary>
            Gets the string representation of date and time that any metadata for this
            document was last changed.
            </summary>
            <value>The string representation of date and time that any metadata for this
            document was last changed.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.ModifyDate">
            <summary>
            Gets the string representation of date and time this document was last
            modified.
            </summary>
            <value>The string representation of date and time this document was last
            modified.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.Nickname">
            <summary>
            Gets or sets the short informal name for this document.
            </summary>
            <value>
            The short informal name for this document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpBasicSchema.Thumbnails">
            <summary>
            Gets the array of thumbnail images for this document.
            </summary>
            <value>The array of thumbnail images for this document.</value>
            <remarks>
                <para>
            The value of this property should be <c>null</c> or an <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />
            of <see cref="F:BitMiracle.Docotic.Pdf.XmpArrayType.Alternative" /> type containing values of
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> type.
            </para>
                <para>
            Each value in the array describes a thumbnail image for this document. The
            structure might contain properties with following names: "height", "width",
            "format" and "image".
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpBasicSchema.Clear">
            <summary>
            Clears (sets to <c>null</c>) all properties in this schema.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema">
            <summary>
            This XMP schema provides a set of commonly used properties.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Contributors">
            <summary>
            Gets or sets the unordered array of contributors to the document
            (other than the authors).
            </summary>
            <value>
            The unordered array of contributors to the document (other than the authors).
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Coverage">
            <summary>
            Gets or sets the extent or scope of the document.
            </summary>
            <value>
            The extent or scope of the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Creators">
            <summary>
            Gets or sets the ordered array of authors of the document (listed in order
            of precedence, if significant).
            </summary>
            <value>
            The ordered array of authors of the document (listed in order of precedence,
            if significant).
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Dates">
            <summary>
            Gets or sets the ordered array of string representations of dates that
            something interesting happened to the document.
            </summary>
            <value>
            The ordered array of string representations of dates that something
            interesting happened to the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Descriptions">
            <summary>
            Gets or sets the array of textual descriptions of the content of the
            document in different languages.
            </summary>
            <value>
            The array of textual descriptions of the content of the
            document in different languages.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Format">
            <summary>
            Gets or sets the file format used when saving the document.
            </summary>
            <value>
            The file format used when saving the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Identifier">
            <summary>
            Gets or sets the unique identifier of the document.
            </summary>
            <value>
            The unique identifier of the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Languages">
            <summary>
            Gets or sets the unordered array specifying the languages used in the document.
            </summary>
            <value>
            The unordered array specifying the languages used in the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Publishers">
            <summary>
            Gets or sets the unordered array of publishers.
            </summary>
            <value>
            The unordered array of publishers.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Relations">
            <summary>
            Gets or sets the unordered array of relationships to other documents.
            </summary>
            <value>
            The unordered array of relationships to other documents.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Rights">
            <summary>
            Gets or sets the array of informal rights statement strings in different
            languages.
            </summary>
            <value>
            The array of informal rights statement strings in different languages.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Source">
            <summary>
            Gets or sets the unique identifier of the work from which this resource was
            derived.
            </summary>
            <value>
            The unique identifier of the work from which this resource was derived.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Subjects">
            <summary>
            Gets or sets the unordered array of descriptive phrases or keywords that
            specify the topic of the content of the document.
            </summary>
            <value>
            The unordered array of descriptive phrases or keywords that specify the
            topic of the content of the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Titles">
            <summary>
            Gets or sets the array of document title strings in different languages.
            </summary>
            <value>
            The array of document title strings in different languages.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Types">
            <summary>
            Gets or sets the unordered array of document types (for example, novel,
            poem, or working paper).
            </summary>
            <value>
            The unordered array of document types (for example, novel,
            poem, or working paper).
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpDublinCoreSchema.Clear">
            <summary>
            Clears (sets to <c>null</c>) all properties in this schema.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpLanguageAlternative">
            <summary>
            Class for an XMP language alternative. An XMP language alternative is a simple
            text value with associated language identifier. XMP language alternative is one
            of the data types allowed for items stored in an <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" /> with
            <see cref="T:BitMiracle.Docotic.Pdf.XmpArrayType" />.Alternative type.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpLanguageAlternative.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpLanguageAlternative" /> class.
            </summary>
            <param name="language">The language code.</param>
            <param name="value">The value.</param>
            <remarks>
                <para>
            Language code specified by the <paramref name="language" /> parameter
            is a string that conforms to RFC 1766 notation
            (see http://www.ietf.org/rfc/rfc1766.txt).
            </para>
                <para>
            XMP requires the "x-default" language code to be supplied as the default.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpLanguageAlternative.Language">
            <summary>
            Gets or sets the language code of this <see cref="T:BitMiracle.Docotic.Pdf.XmpLanguageAlternative" />.
            </summary>
            <value>
            The language code of this <see cref="T:BitMiracle.Docotic.Pdf.XmpLanguageAlternative" />.
            </value>
            <remarks>
            Language code is a string that conforms to RFC 1766 notation
            (see http://www.ietf.org/rfc/rfc1766.txt).
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpLanguageAlternative.Value">
            <summary>
            Gets or sets the value of this <see cref="T:BitMiracle.Docotic.Pdf.XmpLanguageAlternative" />.
            </summary>
            <value>
            The value of this <see cref="T:BitMiracle.Docotic.Pdf.XmpLanguageAlternative" />.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpLanguageAlternative.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema">
            <summary>
            This XMP schema provides a set of properties that are primarily for use by
            digital asset management (DAM) systems.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.DerivedFrom">
            <summary>
            Gets or sets the structure that describes a reference to the original
            document from which this one is derived.
            </summary>
            <value>
            The structure that describes a reference to the original document from
            which this one is derived.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.DocumentId">
            <summary>
            Gets or sets the common identifier for all versions and renditions of the
            document.
            </summary>
            <value>
            The common identifier for all versions and renditions of the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.History">
            <summary>
            Gets or sets the ordered array of structures that describe high-level user
            actions that resulted in this document.
            </summary>
            <value>
            The ordered array of structures that describe high-level user actions that
            resulted in this document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.ManagedFrom">
            <summary>
            Gets the structure that describes the reference to the document as it was
            prior to becoming managed.
            </summary>
            <value>The structure that describes the reference to the document as it was
            prior to becoming managed.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.Manager">
            <summary>
            Gets the name of the asset management system that manages this document.
            </summary>
            <value>The name of the asset management system that manages this
            document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.ManageTo">
            <summary>
            Gets the URI identifying the document to the asset management system.
            </summary>
            <value>The URI identifying the document to the asset management system.</value>
            <remarks>The presence of this property is the formal indication that this
            document is managed.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.ManageUi">
            <summary>
            Gets the URI that can be used to access information about the document
            through a web browser.
            </summary>
            <value>The URI that can be used to access information about the document
            through a web browser.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.ManagerVariant">
            <summary>
            Gets the string that specifies a particular variant of the asset management
            system.
            </summary>
            <value>The string that specifies a particular variant of the asset
            management system.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.RenditionClass">
            <summary>
            Gets or sets the rendition class name for this document.
            </summary>
            <value>
            The rendition class name for this document.
            </value>
            <remarks>This property should be absent or set to <c>default</c> for a
            document version that is not a derived rendition.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.RenditionParams">
            <summary>
            Gets or sets the string representation of rendition parameters.
            </summary>
            <value>
            The string representation of rendition parameters.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.VersionId">
            <summary>
            Gets or sets the document version identifier for this resource.
            </summary>
            <value>
            The document version identifier for this resource.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.Versions">
            <summary>
            Gets or sets the ordered array of structures that describe the version
            history associated with this document.
            </summary>
            <value>
            The ordered array of structures that describe the version history associated
            with this document.
            </value>
            <remarks>
            First entry in the array is the oldest known version for this document, last
            entry is the most recent version.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.LastUrl">
            <summary>
            [Deprecated for privacy protection] Gets the value for the last URL
            associated with this document.
            </summary>
            <value>The value for the last URL associated with this document.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.RenditionOf">
            <summary>
            [Deprecated in favor of <see cref="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.DerivedFrom" />] Gets the structure that
            describes a reference to the document from which this one is a rendition.
            </summary>
            <value>The structure that describes a reference to the document from which
            this one is a rendition.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.SaveId">
            <summary>
            [Deprecated because <see cref="P:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.LastUrl" /> is deprecated] Gets the save
            identifier.
            </summary>
            <value>The save identifier.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMediaManagementSchema.Clear">
            <summary>
            Clears (sets to <c>null</c>) all properties in this schema.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpMetadata">
            <summary>
            (PDF 1.4) Class for metadata attached to a PDF document or some of its parts.
            The metadata is of XMP (Extensible Metadata Platform) format.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.Schemas">
            <summary>
            Gets the collection of XMP schemas that are not well-known to the library.
            </summary>
            <value>The collection of XMP schemas that are not well-known to the
            library.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.Custom">
            <summary>
            Gets the XMP schema for custom (application-defined) properties.
            </summary>
            <value>The XMP schema for custom (application-defined) properties.</value>
            <remarks>
                <para>
            This is a well-known schema. This schema is used for custom
            (application-defined) PDF properties.
            </para>
                <para>
            This schema has no pre-defined properties. You can add any property you
            want to this schema.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.Pdf">
            <summary>
            Gets the XMP schema for Adobe PDF file properties.
            </summary>
            <value>The XMP schema for Adobe PDF file properties.</value>
            <remarks>
                <para>
            This is a well-known schema. This schema specifies properties used with
            Adobe PDF files.
            </para>
                <para>
            This schema defines the same properties as the <see cref="T:BitMiracle.Docotic.Pdf.PdfInfo" /> class.
            <para>
            By default, the library will synchronize values setup through this and 
            <see cref="P:BitMiracle.Docotic.Pdf.PdfDocument.Info" /> properties before saving document. Please
            take a look at <see cref="P:BitMiracle.Docotic.Pdf.PdfSaveOptions.MetadataSyncMode" /> property for
            more information about how the library will synchronize the values.
            </para></para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.Basic">
            <summary>
            Gets the XMP schema for properties that provide basic descriptive information.
            </summary>
            <value>The XMP schema for properties that provide basic descriptive information.</value>
            <remarks>
                <para>
            This is a well-known schema.
            </para>
                <para>
            This schema is also known as XMP Core schema.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.DublinCore">
            <summary>
            Gets the XMP schema for a set of commonly used properties.
            </summary>
            <value>The XMP schema for a set of commonly used properties.</value>
            <remarks>
                <para>
            This is a well-known schema.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.MediaManagement">
            <summary>
            Gets the XMP schema for a set of properties that are primarily for use by
            digital asset management (DAM) systems.
            </summary>
            <value>The XMP schema for a set of properties that are primarily for use by
            digital asset management (DAM) systems.</value>
            <remarks>
                <para>
            This is a well-known schema.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpMetadata.RightsManagement">
            <summary>
            Gets the XMP schema that includes properties related to rights management.
            </summary>
            <value>The XMP schema that includes properties related to rights
            management.</value>
            <remarks>
                <para>
            This is a well-known schema.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.String,System.String)">
            <summary>
            Extracts XMP metadata from PDF document to the file.
            </summary>
            <param name="documentPath">Path to the PDF document.</param>
            <param name="outputPath">Path to the file to save XMP metadata to.</param>
            <overloads>Extracts XMP metadata from PDF document to a file or a stream.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.String,System.String,System.String)">
            <summary>
            Extracts XMP metadata from PDF document to the file.
            </summary>
            <param name="documentPath">Path to the PDF document.</param>
            <param name="password">The user or owner password that unlocks PDF data.</param>
            <param name="outputPath">Path to the file to save XMP metadata to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts XMP metadata from PDF document to the stream.
            </summary>
            <param name="documentPath">Path to the PDF document.</param>
            <param name="outputStream">The stream to save XMP metadata.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.String,System.String,System.IO.Stream)">
            <summary>
            Extracts XMP metadata from PDF document to the stream.
            </summary>
            <param name="documentPath">Path to the PDF document.</param>
            <param name="password">The user or owner password that unlocks PDF data.</param>
            <param name="outputStream">The stream to save XMP metadata.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.IO.Stream,System.String)">
            <summary>
            Extracts XMP metadata from PDF document to the file.
            </summary>
            <param name="documentStream">Stream with the PDF document.</param>
            <param name="outputPath">Path to the file to save XMP metadata to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.IO.Stream,System.String,System.String)">
            <summary>
            Extracts XMP metadata from PDF document to the file.
            </summary>
            <param name="documentStream">Stream with the PDF document.</param>
            <param name="password">The user or owner password that unlocks PDF data.</param>
            <param name="outputPath">Path to the file to save XMP metadata to.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.IO.Stream,System.IO.Stream)">
            <summary>
            Extracts XMP metadata from PDF document to the stream.
            </summary>
            <param name="documentStream">Stream with the PDF document.</param>
            <param name="outputStream">The stream to save XMP metadata.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpMetadata.Extract(System.IO.Stream,System.String,System.IO.Stream)">
            <summary>
            Extracts XMP metadata from PDF document to the stream.
            </summary>
            <param name="documentStream">Stream with the PDF document.</param>
            <param name="password">The user or owner password that unlocks PDF data.</param>
            <param name="outputStream">The stream to save XMP metadata.</param>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpPdfSchema">
            <summary>
            This XMP schema specifies properties used with Adobe PDF files.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Author">
            <summary>
            Gets or sets the name of the person who created the document.
            </summary>
            <value>The name of the person who created the document or <c>null</c> if
            there is no value set for this property.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Creator">
            <summary>
            Gets or sets the name of the application that created the document.
            </summary>
            <remarks>If the document was converted to PDF from another format,
            this property may contain the name of the application (for example,
            Adobe FrameMaker®) that created the original document from which
            this document was converted.</remarks>
            <value>The the name of the application that created the document or
            <c>null</c> if there is no value set for this property.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Keywords">
            <summary>
            Gets or sets the keywords associated with the document.
            </summary>
            <value>The keywords associated with the document or <c>null</c> if there is
            no value set for this property.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Producer">
            <summary>
            Gets or sets the name of the application that produced the document.
            </summary>
            <value>The name of the application that produced the document or <c>null</c>
            if there is no value set for this property.</value>
            <remarks>If the document was converted to PDF from another format,
            this property may contain the name of the application (for example,
            Acrobat Distiller) that converted it to PDF.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Subject">
            <summary>
            Gets or sets the subject of the document.
            </summary>
            <value>The subject of the document or <c>null</c> if there is no value set
            for this property.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
            <value>The title of the document or <c>null</c> if there is no value set for
            this property.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.CreationDate">
            <summary>
            Gets the date and time the document was created.
            </summary>
            <value>The string representation of date and time the document was created
            or <c>null</c> if there is no value set for this property.</value>
            <remarks>You can convert the string representation to a
            <see cref="T:System.DateTime" /> value using <see cref="M:BitMiracle.Docotic.Pdf.XmpString.ToDateTime" /> method.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPdfSchema.ModifiedDate">
            <summary>
            Gets the date and time the document was most recently modified.
            </summary>
            <value>The string representation of date and time the document was most
            recently modified or <c>null</c> if there is no value set for this property.
            </value>
            <remarks>You can convert the string representation to a
            <see cref="T:System.DateTime" /> value using <see cref="M:BitMiracle.Docotic.Pdf.XmpString.ToDateTime" /> method.
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPdfSchema.Clear">
            <summary>
            Clears (sets to <c>null</c>) all properties in this schema.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpProperty">
            <summary>
            Class for an XMP property. An XMP property is a named XMP value.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpProperty.#ctor(System.String,BitMiracle.Docotic.Pdf.XmpValue)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpProperty" /> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpProperty.#ctor(System.String,BitMiracle.Docotic.Pdf.XmpValue,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpProperty" /> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            /// <param name="description">The description of the property.</param></member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpProperty.Prefix">
            <summary>
            Gets the prefix of this property namespace.
            </summary>
            <value>The prefix of this property namespace.</value>
            <remarks>
                <para>
            The prefix can be <c>null</c> if this property uses the same namespace as a
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> or a <see cref="T:BitMiracle.Docotic.Pdf.XmpSchema" /> containing it.
            </para>
                <para>
            The schema namespace prefix is a short abbreviation for the full schema name.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpProperty.Namespace">
            <summary>
            Gets the namespace of this property.
            </summary>
            <value>The namespace of this property.</value>
            <remarks>
            The prefix can be <c>null</c> if this property uses the same namespace as a
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> or a <see cref="T:BitMiracle.Docotic.Pdf.XmpSchema" /> containing it.
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpProperty.Name">
            <summary>
            Gets the name of this XMP property.
            </summary>
            <value>The name of this XMP property.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpProperty.Description">
            <summary>
            Gets or sets the optional description for this XMP property.
            </summary>
            <value>The optional description for this XMP property.</value>
            <remarks>An optional description can be provided for an XMP property. Such
            description is primarily useful for custom properties stored in a PDF/A
            compliant document.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpProperty.Value">
            <summary>
            Gets or sets the value of this XMP property.
            </summary>
            <value>
            The value of this XMP property.
            </value>
            <remarks>
                <para>
            XMP property value can be <c>null</c> or an instance of
            <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />, <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> or
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> types only.
            </para>
                <para>
            If the value of an XMP property is set to <c>null</c> then the property
            won't be saved to the output PDF document.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpProperty" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this <see cref="T:BitMiracle.Docotic.Pdf.XmpProperty" />.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpPropertyList">
            <summary>
            Collection of XMP properties.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpPropertyList.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:BitMiracle.Docotic.Pdf.XmpProperty" /> with the specified name.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Add(System.String,System.String)">
            <summary>
            Creates new XMP property and adds it to the end of this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>The newly created XMP property.</returns>
            <remarks>
                <para>
            The value of the property specified by <paramref name="value" /> can be
            <c>null</c>.
            </para>
                <para>
            Collection should not contain duplicate properties, so the
            <see cref="T:System.ArgumentException" /> will be thrown if this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" /> already contains property with specified name.
            </para>
            </remarks>
            <overloads>Creates new XMP property and adds it to the end of this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Add(System.String,System.String,System.String)">
            <summary>
            Creates new XMP property and adds it to the end of this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="description">The description of the property.</param>
            <returns>
            The newly created XMP property.
            </returns>
            <remarks>
                <para>
            The value of the property specified by <paramref name="value" /> can be
              <c>null</c>.
              </para>
                <para>
            Collection should not contain duplicate properties, so the
              <see cref="T:System.ArgumentException" /> will be thrown if this
              <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" /> already contains property with specified name.
              </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Add(System.String,BitMiracle.Docotic.Pdf.XmpValue)">
            <summary>
            Creates new XMP property and adds it to the end of this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>The newly created XMP property.</returns>
            <remarks>
                <para>
            Collection should not contain duplicate properties, so the
            <see cref="T:System.ArgumentException" /> will be thrown if this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" /> already contains property with specified name.
            </para>
                <para>
            XMP property value can be <c>null</c> or an instance of
            <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />, <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> or
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> types only.
            </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Add(System.String,BitMiracle.Docotic.Pdf.XmpValue,System.String)">
            <summary>
            Creates new XMP property and adds it to the end of this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="description">The description of the property.</param>
            <returns>
            The newly created XMP property.
            </returns>
            <remarks>
                <para>
            Collection should not contain duplicate properties, so the
              <see cref="T:System.ArgumentException" /> will be thrown if this
              <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" /> already contains property with specified name.
              </para>
                <para>
            XMP property value can be <c>null</c> or an instance of
              <see cref="T:BitMiracle.Docotic.Pdf.XmpArray" />, <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> or
              <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> types only.
              </para>
            </remarks>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Get(System.String)">
            <summary>
            Gets the property with specified name.
            </summary>
            <param name="name">The name of the property to get.</param>
            <returns>The property with the specified name or <c>null</c> if there is no
            property with the specified name in this <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" /> contains a
            property with the specified name.
            </summary>
            <param name="name">The name of the property to locate in this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />.</param>
            <returns>
                <c>true</c> if property with the specified name is found in
            this <see cref="T:BitMiracle.Docotic.Pdf.XmpPropertyList" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Set(System.String,BitMiracle.Docotic.Pdf.XmpValue)">
            <summary>
            Sets the value of a property with specified name or adds a new property
            with specified name and value.
            </summary>
            <param name="name">The name of the property to set.</param>
            <param name="value">The value to set.</param>
            <overloads>Sets the value of a property with specified name or adds a new
            property with specified name and value.</overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpPropertyList.Set(System.String,BitMiracle.Docotic.Pdf.XmpValue,System.String)">
            <summary>
            Sets the value of a property with specified name or adds a new property
            with specified name and value.
            </summary>
            <param name="name">The name of the property to set.</param>
            <param name="value">The value to set.</param>
            <param name="description">The description of the property.</param>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema">
            <summary>
            This schema includes properties related to rights management. These properties
            specify information regarding the legal restrictions associated with a resource.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema.Certificate">
            <summary>
            Gets or sets the URL of rights management certificate.
            </summary>
            <value>
            The URL of rights management certificate.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema.Marked">
            <summary>
            Gets or sets the value indicating if this is a rights-managed document.
            </summary>
            <value>
            The value indicating if this is a rights-managed document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema.Owners">
            <summary>
            Gets or sets the unordered array of strings specifying the legal owner(s) of
            the document.
            </summary>
            <value>
            The unordered array of strings specifying the legal owner(s) of the document.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema.UsageTerms">
            <summary>
            Gets or sets the array of text instructions in different languages on how
            this document can be used.
            </summary>
            <value>
            The array of text instructions in different languages on how this document
            can be used.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema.WebStatement">
            <summary>
            Gets or sets the location of a web page describing the owner and/or rights
            statement for this document.
            </summary>
            <value>
            The location of a web page describing the owner and/or rights statement for
            this document.
            </value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpRightsManagementSchema.Clear">
            <summary>
            Clears (sets to <c>null</c>) all properties in this schema.
            </summary>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpSchema">
            <summary>
            Class for an XMP schema. A schema is a set of properties. Typically, schemas
            may consist of properties that are relevant only for particular types of
            documents or for certain stages of a workflow.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpSchema.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpSchema" /> class.
            </summary>
            <param name="prefix">The schema namespace prefix.</param>
            <param name="uri">The name of the schema.</param>
            <remarks>
                <para>
            Metadata should not contain duplicate schemas, so the
            <see cref="T:System.ArgumentException" /> will be thrown if metadata already contains
            schema with specified namespace prefix.
            </para>
                <para>
            Creation of schemas with well-known prefixes is forbidden. Please use
            corresponding properties of <see cref="T:BitMiracle.Docotic.Pdf.XmpMetadata" /> to access properties
            of a well-known schema.
            </para>
                <para>
            Each schema consists of a schema name and namespace prefix. The name is a
            URI that serves to uniquely identify the schema. It is simply a unique
            string. A schema name looks like an URI (e.g. 'http://ns.adobe.com/xap/1.0/')
            but there might or might not be an actual Web page at the URI.
            The URI must obey XML namespace rules, and it should end in "/" or "#".
            </para>
                <para>
            A schema namespace prefix is a short abbreviation for the full schema name.
            The prefix is used for properties in the schema.
            </para>
            </remarks>
            <overloads>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpSchema" /> class.
            </overloads>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpSchema.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpSchema" /> class.
            </summary>
            <param name="prefix">The schema namespace prefix.</param>
            <param name="uri">The name of the schema.</param>
            <remarks>
                <para>
            Metadata should not contain duplicate schemas, so the
            <see cref="T:System.ArgumentException" /> will be thrown if metadata already contains
            schema with specified namespace prefix.
            </para>
                <para>
            Creation of schemas with well-known prefixes is forbidden. Please use
            corresponding properties of <see cref="T:BitMiracle.Docotic.Pdf.XmpMetadata" /> to access properties
            of a well-known schema.
            </para>
                <para>
            Each schema consists of a schema name and namespace prefix. The name is a
            URI that serves to uniquely identify the schema. It is simply a unique
            string. A schema name looks like an URI (e.g. 'http://ns.adobe.com/xap/1.0/')
            but there might or might not be an actual Web page at the URI.
            The URI must obey XML namespace rules, and it should end in "/" or "#".
            </para>
                <para>
            A schema namespace prefix is a short abbreviation for the full schema name.
            The prefix is used for properties in the schema.
            </para>
            </remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpSchema.Prefix">
            <summary>
            Gets the namespace prefix used for properties in this schema.
            </summary>
            <value>The namespace prefix used for properties in this schema.</value>
            <remarks>The schema namespace prefix is a short abbreviation for the full
            schema name.</remarks>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpSchema.Namespace">
            <summary>
            Gets the namespace of the schema.
            </summary>
            <value>The namespace of the schema.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpSchema.Properties">
            <summary>
            Gets the collection of properties associated with the schema.
            </summary>
            <value>The collection of properties associated with the schema.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpSchemaList">
            <summary>
            Collection of XMP schemas that are not well-known to the library.
            </summary>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpSchemaList.Item(System.String)">
            <summary>
            Gets the schema with the specified namespace prefix.
            </summary>
            <param name="prefix">The namespace prefix of the property to get.</param>
            <returns>The schema with the specified namespace prefix or <c>null</c> if
            there is no schema with the specified namespace prefix in this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpSchemaList" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpSchemaList.Get(System.String)">
            <summary>
            Gets the schema with the specified namespace prefix.
            </summary>
            <param name="prefix">The namespace prefix of the property to get.</param>
            <returns>The schema with the specified namespace prefix or <c>null</c> if
            there is no schema with the specified namespace prefix in this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpSchemaList" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpSchemaList.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:BitMiracle.Docotic.Pdf.XmpSchemaList" /> contains a schema with
            the specified namespace prefix.
            </summary>
            <param name="prefix">The namespace prefix of the schema to locate in this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpSchemaList" />.</param>
            <returns>
                <c>true</c> if schema with the specified namespace prefix is found
            in this <see cref="T:BitMiracle.Docotic.Pdf.XmpSchemaList" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpString">
            <summary>
            Class for an XMP string. XMP string is one of the data types allowed for values
            of XMP properties.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpString.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpString" /> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpString.Value">
            <summary>
            Gets or sets the value of this <see cref="T:BitMiracle.Docotic.Pdf.XmpString" />.
            </summary>
            <value>
            The value of this <see cref="T:BitMiracle.Docotic.Pdf.XmpString" />.
            </value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpString.Qualifiers">
            <summary>
            Gets the collection of property qualifiers associated with
            this <see cref="T:BitMiracle.Docotic.Pdf.XmpString" />.
            </summary>
            <value>The collection of property qualifiers associated with this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpString" />.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpString.ToDateTime">
            <summary>
            Returns a <see cref="T:System.DateTime" /> value that represents this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpString" />.
            </summary>
            <returns>A <see cref="T:System.DateTime" /> value that represents this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpString" />.</returns>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpString.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpStructure">
            <summary>
            Class for an XMP structure. An XMP structure is a set of one or more named
            fields. XMP structure is one of the data types allowed for values of XMP
            properties.
            </summary>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpStructure.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" /> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="uri">The URI.</param>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpStructure.Prefix">
            <summary>
            Gets the namespace prefix used for properties in this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" />.
            </summary>
            <value>The namespace prefix used for properties in this
            <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpStructure.Namespace">
            <summary>
            Gets the namespace of this <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" />.
            </summary>
            <value>The namespace of this <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" />.</value>
        </member>
        <member name="P:BitMiracle.Docotic.Pdf.XmpStructure.Properties">
            <summary>
            Gets the collection of properties stored in this <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" />.
            </summary>
            <value>The collection of properties stored in this <see cref="T:BitMiracle.Docotic.Pdf.XmpStructure" />.</value>
        </member>
        <member name="M:BitMiracle.Docotic.Pdf.XmpStructure.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:BitMiracle.Docotic.Pdf.XmpValue">
            <summary>
            Base class for classes that represent a value of an XMP property.
            </summary>
        </member>
        <member name="T:BitMiracle.LibTiff.Classic.TiffTag">
            <summary>
            TIFF tag definitions.
            </summary>
            <remarks>
            Joris Van Damme maintains
            <a href="http://www.awaresystems.be/imaging/tiff/tifftags.html" target="_blank">
            TIFF Tag Reference</a>, good source of tag information. It's an overview of known TIFF
            Tags with properties, short description, and other useful information.
            </remarks>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IGNORE">
            <summary>
            Tag placeholder
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SUBFILETYPE">
            <summary>
            Subfile data descriptor.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FileType" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OSUBFILETYPE">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Kind of data in subfile. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.OFileType" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEWIDTH">
            <summary>
            Image width in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH">
            <summary>
            Image height in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE">
            <summary>
            Bits per channel (sample).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COMPRESSION">
            <summary>
            Data compression technique.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Compression" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PHOTOMETRIC">
            <summary>
            Photometric interpretation.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Photometric" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.THRESHHOLDING">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Thresholding used on data. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Threshold" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CELLWIDTH">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Dithering matrix width.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CELLLENGTH">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Dithering matrix height.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER">
            <summary>
            Data order within a byte.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FillOrder" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DOCUMENTNAME">
            <summary>
            Name of document which holds for image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDESCRIPTION">
            <summary>
            Information about image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAKE">
            <summary>
            Scanner manufacturer name.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MODEL">
            <summary>
            Scanner model name/number.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS">
            <summary>
            Offsets to data strips.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIENTATION">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Image orientation. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Orientation" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLESPERPIXEL">
            <summary>
            Samples per pixel.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ROWSPERSTRIP">
            <summary>
            Rows per strip of data.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS">
            <summary>
            Bytes counts for strips.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MINSAMPLEVALUE">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Minimum sample value.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAXSAMPLEVALUE">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Maximum sample value.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XRESOLUTION">
            <summary>
            Pixels/resolution in x.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YRESOLUTION">
            <summary>
            Pixels/resolution in y.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG">
            <summary>
            Storage organization.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PAGENAME">
            <summary>
            Page name image is from.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XPOSITION">
            <summary>
            X page offset of image lhs.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YPOSITION">
            <summary>
            Y page offset of image lhs.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FREEOFFSETS">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Byte offset to free block.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FREEBYTECOUNTS">
            <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Sizes of free blocks.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GRAYRESPONSEUNIT">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Gray scale curve accuracy.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.GrayResponseUnit" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GRAYRESPONSECURVE">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Gray scale response curve.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GROUP3OPTIONS">
            <summary>
            Options for CCITT Group 3 fax encoding. 32 flag bits.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Group3Opt" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.T4OPTIONS">
            <summary>
            TIFF 6.0 proper name alias for GROUP3OPTIONS.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GROUP4OPTIONS">
            <summary>
            Options for CCITT Group 4 fax encoding. 32 flag bits.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Group3Opt" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.T6OPTIONS">
            <summary>
            TIFF 6.0 proper name alias for GROUP4OPTIONS.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RESOLUTIONUNIT">
            <summary>
            Units of resolutions.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ResUnit" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PAGENUMBER">
            <summary>
            Page numbers of multi-page.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORRESPONSEUNIT">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Color curve accuracy.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ColorResponseUnit" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TRANSFERFUNCTION">
            <summary>
            Colorimetry info.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SOFTWARE">
            <summary>
            Name &amp; release.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DATETIME">
            <summary>
            Creation date and time.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ARTIST">
            <summary>
            Creator of image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.HOSTCOMPUTER">
            <summary>
            Machine where created.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PREDICTOR">
            <summary>
            Prediction scheme w/ LZW.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Predictor" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WHITEPOINT">
            <summary>
            Image white point.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PRIMARYCHROMATICITIES">
            <summary>
            Primary chromaticities.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMAP">
            <summary>
            RGB map for pallette image.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.HALFTONEHINTS">
            <summary>
            Highlight + shadow info.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEWIDTH">
            <summary>
            Tile width in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILELENGTH">
            <summary>
            Tile height in pixels.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEOFFSETS">
            <summary>
            Offsets to data tiles.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEBYTECOUNTS">
            <summary>
            Byte counts for tiles.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BADFAXLINES">
            <summary>
            Lines with wrong pixel count.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CLEANFAXDATA">
            <summary>
            Regenerated line info.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.CleanFaxData" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CONSECUTIVEBADFAXLINES">
            <summary>
            Max consecutive bad lines.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SUBIFD">
            <summary>
            Subimage descriptors.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INKSET">
            <summary>
            Inks in separated image.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.InkSet" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INKNAMES">
            <summary>
            ASCII names of inks.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.NUMBEROFINKS">
            <summary>
            Number of inks.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DOTRANGE">
            <summary>
            0% and 100% dot codes.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TARGETPRINTER">
            <summary>
            Separation target.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXTRASAMPLES">
            <summary>
            Information about extra samples.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ExtraSample" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLEFORMAT">
            <summary>
            Data sample format.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.SampleFormat" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SMINSAMPLEVALUE">
            <summary>
            Variable MinSampleValue.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SMAXSAMPLEVALUE">
            <summary>
            Variable MaxSampleValue.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CLIPPATH">
            <summary>
            ClipPath. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XCLIPPATHUNITS">
            <summary>
            XClipPathUnits. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCLIPPATHUNITS">
            <summary>
            YClipPathUnits. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INDEXED">
            <summary>
            Indexed. Introduced post TIFF rev 6.0 by Adobe TIFF Technote 3.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGTABLES">
            <summary>
            JPEG table stream. Introduced post TIFF rev 6.0.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OPIPROXY">
            <summary>
            OPI Proxy. Introduced post TIFF rev 6.0 by Adobe TIFF technote.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGPROC">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            JPEG processing algorithm.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegProc" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGIFOFFSET">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Pointer to SOI marker.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGIFBYTECOUNT">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            JFIF stream length
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGRESTARTINTERVAL">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Restart interval length.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGLOSSLESSPREDICTORS">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Lossless proc predictor.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGPOINTTRANSFORM">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Lossless point transform.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGQTABLES">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Q matrice offsets.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGDCTABLES">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            DCT table offsets.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGACTABLES">
            <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            AC coefficient offsets.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRCOEFFICIENTS">
            <summary>
            RGB -&gt; YCbCr transform.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRSUBSAMPLING">
            <summary>
            YCbCr subsampling factors.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRPOSITIONING">
            <summary>
            Subsample positioning.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.YCbCrPosition" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REFERENCEBLACKWHITE">
            <summary>
            Colorimetry info.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XMLPACKET">
            <summary>
            XML packet. Introduced post TIFF rev 6.0 by Adobe XMP Specification, January 2004.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OPIIMAGEID">
            <summary>
            OPI ImageID. Introduced post TIFF rev 6.0 by Adobe TIFF technote.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REFPTS">
            <summary>
            Image reference points. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONTACKPOINT">
            <summary>
            Region-xform tack point. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONWARPCORNERS">
            <summary>
            Warp quadrilateral. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONAFFINE">
            <summary>
            Affine transformation matrix. Private tag registered to Island Graphics.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MATTEING">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Use EXTRASAMPLE tag. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DATATYPE">
            <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Use SAMPLEFORMAT tag. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH">
            <summary>
            Z depth of image. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEDEPTH">
            <summary>
            Z depth/data tile. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_IMAGEFULLWIDTH">
            <summary>
            Full image size in X. This tag is set when an image has been cropped out of a larger
            image. It reflect width of the original uncropped image. The XPOSITION tag can be used
            to determine the position of the smaller image in the larger one.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_IMAGEFULLLENGTH">
            <summary>
            Full image size in Y. This tag is set when an image has been cropped out of a larger
            image. It reflect height of the original uncropped image. The YPOSITION can be used
            to determine the position of the smaller image in the larger one.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_TEXTUREFORMAT">
            <summary>
            Texture map format. Used to identify special image modes and data used by Pixar's
            texture formats. Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_WRAPMODES">
            <summary>
            S&amp;T wrap modes. Used to identify special image modes and data used by Pixar's
            texture formats. Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_FOVCOT">
            <summary>
            Cotan(fov) for env. maps. Used to identify special image modes and data used by
            Pixar's texture formats. Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_MATRIX_WORLDTOSCREEN">
            <summary>
            Used to identify special image modes and data used by Pixar's texture formats.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_MATRIX_WORLDTOCAMERA">
            <summary>
            Used to identify special image modes and data used by Pixar's texture formats.
            Private tag registered to Pixar.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WRITERSERIALNUMBER">
            <summary>
            Device serial number. Private tag registered to Eastman Kodak.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COPYRIGHT">
            <summary>
            Copyright string. This tag is listed in the TIFF rev. 6.0 w/ unknown ownership.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RICHTIFFIPTC">
            <summary>
            IPTC TAG from RichTIFF specifications.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8SITE">
            <summary>
            Site name. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORSEQUENCE">
            <summary>
            Color seq. [RGB, CMYK, etc]. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8HEADER">
            <summary>
            DDES Header. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8RASTERPADDING">
            <summary>
            Raster scanline padding. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BITSPERRUNLENGTH">
            <summary>
            The number of bits in short run. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BITSPEREXTENDEDRUNLENGTH">
            <summary>
            The number of bits in long run. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORTABLE">
            <summary>
            LW colortable. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8IMAGECOLORINDICATOR">
            <summary>
            BP/BL image color switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BKGCOLORINDICATOR">
            <summary>
            BP/BL bg color switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8IMAGECOLORVALUE">
            <summary>
            BP/BL image color value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BKGCOLORVALUE">
            <summary>
            BP/BL bg color value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8PIXELINTENSITYRANGE">
            <summary>
            MP pixel intensity value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8TRANSPARENCYINDICATOR">
            <summary>
            HC transparency switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORCHARACTERIZATION">
            <summary>
            Color characterization table. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8HCUSAGE">
            <summary>
            HC usage indicator. Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8TRAPINDICATOR">
            <summary>
            Trapping indicator (untrapped = 0, trapped = 1). Reserved for ANSI IT8 TIFF/IT.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8CMYKEQUIVALENT">
            <summary>
            CMYK color equivalents.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FRAMECOUNT">
            <summary>
            Sequence Frame Count. Private tag registered to Texas Instruments.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PHOTOSHOP">
            <summary>
            Private tag registered to Adobe for PhotoShop.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIFIFD">
            <summary>
            Pointer to EXIF private directory. This tag is documented in EXIF specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ICCPROFILE">
            <summary>
            ICC profile data. ?? Private tag registered to Adobe. ??
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JBIGOPTIONS">
            <summary>
            JBIG options. Private tag registered to Pixel Magic.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GPSIFD">
            <summary>
            Pointer to GPS private directory. This tag is documented in EXIF specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXRECVPARAMS">
            <summary>
            Encoded Class 2 ses. params. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXSUBADDRESS">
            <summary>
            Received SubAddr string. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXRECVTIME">
            <summary>
            Receive time (secs). Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXDCS">
            <summary>
            Encoded fax ses. params, Table 2/T.30. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STONITS">
            <summary>
            Sample value to Nits. Private tag registered to SGI.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FEDEX_EDR">
            <summary>
            Private tag registered to FedEx.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INTEROPERABILITYIFD">
            <summary>
            Pointer to Interoperability private directory.
            This tag is documented in EXIF specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGVERSION">
            <summary>
            DNG version number. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGBACKWARDVERSION">
            <summary>
            DNG compatibility version. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.UNIQUECAMERAMODEL">
            <summary>
            Name for the camera model. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LOCALIZEDCAMERAMODEL">
            <summary>
            Localized camera model name. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CFAPLANECOLOR">
            <summary>
            CFAPattern-&gt;LinearRaw space mapping. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CFALAYOUT">
            <summary>
            Spatial layout of the CFA. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LINEARIZATIONTABLE">
            <summary>
            Lookup table description. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELREPEATDIM">
            <summary>
            Repeat pattern size for the BlackLevel tag. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVEL">
            <summary>
            Zero light encoding level. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELDELTAH">
            <summary>
            Zero light encoding level differences (columns). Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELDELTAV">
            <summary>
            Zero light encoding level differences (rows). Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WHITELEVEL">
            <summary>
            Fully saturated encoding level. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTSCALE">
            <summary>
            Default scale factors. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTCROPORIGIN">
            <summary>
            Origin of the final image area. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTCROPSIZE">
            <summary>
            Size of the final image area. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMATRIX1">
            <summary>
            XYZ-&gt;reference color space transformation matrix 1.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMATRIX2">
            <summary>
            XYZ-&gt;reference color space transformation matrix 2.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERACALIBRATION1">
            <summary>
            Calibration matrix 1. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERACALIBRATION2">
            <summary>
            Calibration matrix 2. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REDUCTIONMATRIX1">
            <summary>
            Dimensionality reduction matrix 1. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REDUCTIONMATRIX2">
            <summary>
            Dimensionality reduction matrix 2. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ANALOGBALANCE">
            <summary>
            Gain applied the stored raw values. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTNEUTRAL">
            <summary>
            Selected white balance in linear reference space.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTWHITEXY">
            <summary>
            Selected white balance in x-y chromaticity coordinates.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINEEXPOSURE">
            <summary>
            How much to move the zero point. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINENOISE">
            <summary>
            Relative noise level. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINESHARPNESS">
            <summary>
            Relative amount of sharpening. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BAYERGREENSPLIT">
            <summary>
            How closely the values of the green pixels in the blue/green rows 
            track the values of the green pixels in the red/green rows.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LINEARRESPONSELIMIT">
            <summary>
            Non-linear encoding range. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERASERIALNUMBER">
            <summary>
            Camera's serial number. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LENSINFO">
            <summary>
            Information about the lens.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CHROMABLURRADIUS">
            <summary>
            Chroma blur radius. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ANTIALIASSTRENGTH">
            <summary>
            Relative strength of the camera's anti-alias filter.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SHADOWSCALE">
            <summary>
            Used by Adobe Camera Raw. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGPRIVATEDATA">
            <summary>
            Manufacturer's private data. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAKERNOTESAFETY">
            <summary>
            Whether the EXIF MakerNote tag is safe to preserve along with the rest of the EXIF data.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CALIBRATIONILLUMINANT1">
            <summary>
            Illuminant 1. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CALIBRATIONILLUMINANT2">
            <summary>
            Illuminant 2. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BESTQUALITYSCALE">
            <summary>
            Best quality multiplier. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RAWDATAUNIQUEID">
            <summary>
            Unique identifier for the raw image data. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIGINALRAWFILENAME">
            <summary>
            File name of the original raw file. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIGINALRAWFILEDATA">
            <summary>
            Contents of the original raw file. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ACTIVEAREA">
            <summary>
            Active (non-masked) pixels of the sensor. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MASKEDAREAS">
            <summary>
            List of coordinates of fully masked pixels. Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTICCPROFILE">
            <summary>
            Used to map cameras's color space into ICC profile space.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTPREPROFILEMATRIX">
            <summary>
            Used to map cameras's color space into ICC profile space.
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CURRENTICCPROFILE">
            <summary>
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CURRENTPREPROFILEMATRIX">
            <summary>
            Introduced by Adobe DNG specification.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSHUESHIFTVALUES">
            <summary>
            Undefined tag used by Eastman Kodak, hue shift correction data.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            Group 3/4 format control.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FaxMode" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGQUALITY">
            <summary>
            [pseudo tag. not written to file]<br />
            Compression quality level. Quality level is on the IJG 0-100 scale. Default value is 75.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGCOLORMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            Auto RGB&lt;=&gt;YCbCr convert.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegColorMode" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGTABLESMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegTablesMode" />.
            Default is <see cref="F:BitMiracle.LibTiff.Classic.JpegTablesMode.QUANT" /> | <see cref="F:BitMiracle.LibTiff.Classic.JpegTablesMode.HUFF" />.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXFILLFUNC">
            <summary>
            [pseudo tag. not written to file]<br />
            G3/G4 fill function.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXARLOGDATAFMT">
            <summary>
            [pseudo tag. not written to file]<br />
            PixarLogCodec I/O data sz.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSIMAGERTYPE">
            <summary>
            [pseudo tag. not written to file]<br />
            Imager mode &amp; filter.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSINTERPMODE">
            <summary>
            [pseudo tag. not written to file]<br />
            Interpolation mode.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSBALANCEARRAY">
            <summary>
            [pseudo tag. not written to file]<br />
            Color balance values.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCORRECTMATRIX">
            <summary>
            [pseudo tag. not written to file]<br />
            Color correction values.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSGAMMA">
            <summary>
            [pseudo tag. not written to file]<br />
            Gamma value.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSTOESHOULDERPTS">
            <summary>
            [pseudo tag. not written to file]<br />
            Toe &amp; shoulder points.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCALIBRATIONFD">
            <summary>
            [pseudo tag. not written to file]<br />
            Calibration file description.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ZIPQUALITY">
            <summary>
            [pseudo tag. not written to file]<br />
            Compression quality level.
            Quality level is on the ZLIB 1-9 scale. Default value is -1.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXARLOGQUALITY">
            <summary>
            [pseudo tag. not written to file]<br />
            PixarLog uses same scale.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCLIPRECTANGLE">
            <summary>
            [pseudo tag. not written to file]<br />
            Area of image to acquire.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SGILOGDATAFMT">
            <summary>
            [pseudo tag. not written to file]<br />
            SGILog user data format.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SGILOGENCODE">
            <summary>
            [pseudo tag. not written to file]<br />
            SGILog data encoding control.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSURETIME">
            <summary>
            Exposure time.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FNUMBER">
            <summary>
            F number.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREPROGRAM">
            <summary>
            Exposure program.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SPECTRALSENSITIVITY">
            <summary>
            Spectral sensitivity.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_ISOSPEEDRATINGS">
            <summary>
            ISO speed rating.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_OECF">
            <summary>
            Optoelectric conversion factor.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXIFVERSION">
            <summary>
            Exif version.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DATETIMEORIGINAL">
            <summary>
            Date and time of original data generation.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DATETIMEDIGITIZED">
            <summary>
            Date and time of digital data generation.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COMPONENTSCONFIGURATION">
            <summary>
            Meaning of each component.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COMPRESSEDBITSPERPIXEL">
            <summary>
            Image compression mode.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SHUTTERSPEEDVALUE">
            <summary>
            Shutter speed.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_APERTUREVALUE">
            <summary>
            Aperture.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_BRIGHTNESSVALUE">
            <summary>
            Brightness.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREBIASVALUE">
            <summary>
            Exposure bias.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_MAXAPERTUREVALUE">
            <summary>
            Maximum lens aperture.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTDISTANCE">
            <summary>
            Subject distance.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_METERINGMODE">
            <summary>
            Metering mode.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_LIGHTSOURCE">
            <summary>
            Light source.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASH">
            <summary>
            Flash.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALLENGTH">
            <summary>
            Lens focal length.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTAREA">
            <summary>
            Subject area.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_MAKERNOTE">
            <summary>
            Manufacturer notes.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_USERCOMMENT">
            <summary>
            User comments.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIME">
            <summary>
            DateTime subseconds.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIMEORIGINAL">
            <summary>
            DateTimeOriginal subseconds.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIMEDIGITIZED">
            <summary>
            DateTimeDigitized subseconds.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASHPIXVERSION">
            <summary>
            Supported Flashpix version.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COLORSPACE">
            <summary>
            Color space information.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_PIXELXDIMENSION">
            <summary>
            Valid image width.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_PIXELYDIMENSION">
            <summary>
            Valid image height.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_RELATEDSOUNDFILE">
            <summary>
            Related audio file.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASHENERGY">
            <summary>
            Flash energy.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SPATIALFREQUENCYRESPONSE">
            <summary>
            Spatial frequency response.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANEXRESOLUTION">
            <summary>
            Focal plane X resolution.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANEYRESOLUTION">
            <summary>
            Focal plane Y resolution.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANERESOLUTIONUNIT">
            <summary>
            Focal plane resolution unit.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTLOCATION">
            <summary>
            Subject location.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREINDEX">
            <summary>
            Exposure index.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SENSINGMETHOD">
            <summary>
            Sensing method.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FILESOURCE">
            <summary>
            File source.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SCENETYPE">
            <summary>
            Scene type.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CFAPATTERN">
            <summary>
            CFA pattern.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CUSTOMRENDERED">
            <summary>
            Custom image processing.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREMODE">
            <summary>
            Exposure mode.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_WHITEBALANCE">
            <summary>
            White balance.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DIGITALZOOMRATIO">
            <summary>
            Digital zoom ratio.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALLENGTHIN35MMFILM">
            <summary>
            Focal length in 35 mm film.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SCENECAPTURETYPE">
            <summary>
            Scene capture type.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_GAINCONTROL">
            <summary>
            Gain control.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CONTRAST">
            <summary>
            Contrast.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SATURATION">
            <summary>
            Saturation.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SHARPNESS">
            <summary>
            Sharpness.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DEVICESETTINGDESCRIPTION">
            <summary>
            Device settings description.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTDISTANCERANGE">
            <summary>
            Subject distance range.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_IMAGEUNIQUEID">
            <summary>
            Unique image ID.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_MODELPIXELSCALETAG">
            <summary>
            This tag is defining exact affine transformations between raster and model space. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_MODELTIEPOINTTAG">
            <summary>
            This tag stores raster-&gt;model tiepoint pairs. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GEOTIFF_MODELTRANSFORMATIONTAG">
            <summary>
            This tag is optionally provided for defining exact affine transformations between raster and model space. Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="T:BitMiracle.LibTiff.Classic.TiffType">
            <summary>
            Tag data type.
            </summary>
            <remarks>Note: RATIONALs are the ratio of two 32-bit integer values.</remarks>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.NOTYPE">
            <summary>
            Placeholder.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.ANY">
            <summary>
            For field descriptor searching.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.BYTE">
            <summary>
            8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.ASCII">
            <summary>
            8-bit bytes with last byte <c>null</c>.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SHORT">
            <summary>
            16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.LONG">
            <summary>
            32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.RATIONAL">
            <summary>
            64-bit unsigned fraction.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SBYTE">
            <summary>
            8-bit signed integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.UNDEFINED">
            <summary>
            8-bit untyped data.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SSHORT">
            <summary>
            16-bit signed integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SLONG">
            <summary>
            32-bit signed integer.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SRATIONAL">
            <summary>
            64-bit signed fraction.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.FLOAT">
            <summary>
            32-bit IEEE floating point.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.DOUBLE">
            <summary>
            64-bit IEEE floating point.
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.IFD">
            <summary>
            32-bit unsigned integer (offset)
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.LONG8">
            <summary>
            BigTIFF 64-bit unsigned long
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.SLONG8">
            <summary>
            BigTIFF 64-bit signed long
            </summary>
        </member>
        <member name="F:BitMiracle.LibTiff.Classic.TiffType.IFD8">
            <summary>
            BigTIFF 64-bit unsigned integer/long (offset)
            </summary>
        </member>
        <member name="T:Org.BouncyCastle.Crypto.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given
            insufficient input. In general this exception will Get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="M:Org.BouncyCastle.Crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle.Crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Org.BouncyCastle.Crypto.InvalidCipherTextException">
            this exception is thrown whenever we find something we don't expect in a
            message.
        </member>
        <member name="M:Org.BouncyCastle.Crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle.Crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:Org.BouncyCastle.Crypto.MaxBytesExceededException">
            <summary>
            This exception is thrown whenever a cipher requires a change of key, iv
            or similar after x amount of bytes enciphered
            </summary>
        </member>
        <member name="M:Org.BouncyCastle.Security.SecurityUtilityException.#ctor">
            base constructor.
        </member>
        <member name="M:Org.BouncyCastle.Security.SecurityUtilityException.#ctor(System.String)">
             create a SecurityUtilityException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:log4net.Appender.AdoNetAppender">
            <summary>
            Appender that logs to a database.
            </summary>
            <remarks>
                <para>
                    <see cref="T:log4net.Appender.AdoNetAppender" /> appends logging events to a table within a
            database. The appender can be configured to specify the connection 
            string by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionString" /> property. 
            The connection type (provider) can be specified by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" />
            property. For more information on database connection strings for
            your specific database see <a href="http://www.connectionstrings.com/">http://www.connectionstrings.com/</a>.
            </para>
                <para>
            Records are written into the database either using a prepared
            statement or a stored procedure. The <see cref="P:log4net.Appender.AdoNetAppender.CommandType" /> property
            is set to <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>) to specify a prepared statement
            or to <see cref="F:System.Data.CommandType.StoredProcedure" /> (<c>System.Data.CommandType.StoredProcedure</c>) to specify a stored
            procedure.
            </para>
                <para>
            The prepared statement text or the name of the stored procedure
            must be set in the <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> property.
            </para>
                <para>
            The prepared statement or stored procedure can take a number
            of parameters. Parameters are added using the <see cref="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)" />
            method. This adds a single <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> to the
            ordered list of parameters. The <see cref="T:log4net.Appender.AdoNetAppenderParameter" />
            type may be subclassed if required to provide database specific
            functionality. The <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> specifies
            the parameter name, database type, size, and how the value should
            be generated using a <see cref="T:log4net.Layout.ILayout" />.
            </para>
            </remarks>
            <example>
            An example of a SQL Server table that could be logged to:
            <code lang="SQL">
            CREATE TABLE [dbo].[Log] ( 
              [ID] [int] IDENTITY (1, 1) NOT NULL ,
              [Date] [datetime] NOT NULL ,
              [Thread] [varchar] (255) NOT NULL ,
              [Level] [varchar] (20) NOT NULL ,
              [Logger] [varchar] (255) NOT NULL ,
              [Message] [varchar] (4000) NOT NULL 
            ) ON [PRIMARY]
            </code></example>
            <example>
            An example configuration to log to the above table:
            <code lang="XML" escaped="true"><appender name="AdoNetAppender_SqlServer" type="log4net.Appender.AdoNetAppender"><connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /><connectionString value="data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa" /><commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)" /><parameter><parameterName value="@log_date" /><dbType value="DateTime" /><layout type="log4net.Layout.PatternLayout" value="%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}" /></parameter><parameter><parameterName value="@thread" /><dbType value="String" /><size value="255" /><layout type="log4net.Layout.PatternLayout" value="%thread" /></parameter><parameter><parameterName value="@log_level" /><dbType value="String" /><size value="50" /><layout type="log4net.Layout.PatternLayout" value="%level" /></parameter><parameter><parameterName value="@logger" /><dbType value="String" /><size value="255" /><layout type="log4net.Layout.PatternLayout" value="%logger" /></parameter><parameter><parameterName value="@message" /><dbType value="String" /><size value="4000" /><layout type="log4net.Layout.PatternLayout" value="%message" /></parameter></appender></code></example>
            <author>Julian Biddle</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Lance Nehring</author>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppender" /> class.
            </summary>
            <remarks>
            Public default constructor to initialize a new instance of this class.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ConnectionString">
            <summary>
            Gets or sets the database connection string that is used to connect to 
            the database.
            </summary>
            <value>
            The database connection string used to connect to the database.
            </value>
            <remarks>
                <para>
            The connections string is specific to the connection type.
            See <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" /> for more information.
            </para>
            </remarks>
            <example>Connection string for MS Access via ODBC:
            <code>"DSN=MS Access Database;UID=admin;PWD=;SystemDB=C:\data\System.mdw;SafeTransactions = 0;FIL=MS Access;DriverID = 25;DBQ=C:\data\train33.mdb"</code></example>
            <example>Another connection string for MS Access via ODBC:
            <code>"Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"</code></example>
            <example>Connection string for MS Access via OLE DB:
            <code>"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"</code></example>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.AppSettingsKey">
            <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ConnectionStringName">
            <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
            <remarks>
            This property requires at least .NET 2.0.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ConnectionType">
            <summary>
            Gets or sets the type name of the <see cref="T:System.Data.IDbConnection" /> connection
            that should be created.
            </summary>
            <value>
            The type name of the <see cref="T:System.Data.IDbConnection" /> connection.
            </value>
            <remarks>
                <para>
            The type name of the ADO.NET provider to use.
            </para>
                <para>
            The default is to use the OLE DB provider.
            </para>
            </remarks>
            <example>Use the OLE DB Provider. This is the default value.
            <code>System.Data.OleDb.OleDbConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code></example>
            <example>Use the MS SQL Server Provider. 
            <code>System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code></example>
            <example>Use the ODBC Provider. 
            <code>Microsoft.Data.Odbc.OdbcConnection,Microsoft.Data.Odbc,version=1.0.3300.0,publicKeyToken=b77a5c561934e089,culture=neutral</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>ODBC .NET Data Provider</b>.
            </example>
            <example>Use the Oracle Provider. 
            <code>System.Data.OracleClient.OracleConnection, System.Data.OracleClient, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>.NET Managed Provider for Oracle</b>.
            </example>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.CommandText">
            <summary>
            Gets or sets the command text that is used to insert logging events
            into the database.
            </summary>
            <value>
            The command text used to insert logging events into the database.
            </value>
            <remarks>
                <para>
            Either the text of the prepared statement or the
            name of the stored procedure to execute to write into
            the database.
            </para>
                <para>
            The <see cref="P:log4net.Appender.AdoNetAppender.CommandType" /> property determines if
            this text is a prepared statement or a stored procedure.
            </para>
                <para>
            If this property is not set, the command text is retrieved by invoking
            <see cref="M:log4net.Appender.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.CommandType">
            <summary>
            Gets or sets the command type to execute.
            </summary>
            <value>
            The command type to execute.
            </value>
            <remarks>
                <para>
            This value may be either <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>) to specify
            that the <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> is a prepared statement to execute, 
            or <see cref="F:System.Data.CommandType.StoredProcedure" /> (<c>System.Data.CommandType.StoredProcedure</c>) to specify that the
            <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> property is the name of a stored procedure
            to execute.
            </para>
                <para>
            The default value is <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.UseTransactions">
            <summary>
            Should transactions be used to insert logging events in the database.
            </summary>
            <value>
                <c>true</c> if transactions should be used to insert logging events in
            the database, otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
                <para>
            Gets or sets a value that indicates whether transactions should be used
            to insert logging events in the database.
            </para>
                <para>
            When set a single transaction will be used to insert the buffered events
            into the database. Otherwise each event will be inserted without using
            an explicit transaction.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> used to call the NetSend method.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> used to call the NetSend method.
            </value>
            <remarks>
                <para>
            Unless a <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.ReconnectOnError">
            <summary>
            Should this appender try to reconnect to the database on error.
            </summary>
            <value>
                <c>true</c> if the appender should try to reconnect to the database after an
            error has occurred, otherwise <c>false</c>. The default value is <c>false</c>, 
            i.e. not to try to reconnect.
            </value>
            <remarks>
                <para>
            The default behaviour is for the appender not to try to reconnect to the
            database if an error occurs. Subsequent logging events are discarded.
            </para>
                <para>
            To force the appender to attempt to reconnect to the database set this
            property to <c>true</c>.
            </para>
                <note>
            When the appender attempts to connect to the database there may be a
            delay of up to the connection timeout specified in the connection string.
            This delay will block the calling application's thread. 
            Until the connection can be reestablished this potential delay may occur multiple times.
            </note>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppender.Connection">
            <summary>
            Gets or sets the underlying <see cref="T:System.Data.IDbConnection" />.
            </summary>
            <value>
            The underlying <see cref="T:System.Data.IDbConnection" />.
            </value>
            <remarks>
                <see cref="T:log4net.Appender.AdoNetAppender" /> creates a <see cref="T:System.Data.IDbConnection" /> to insert 
            logging events into a database.  Classes deriving from <see cref="T:log4net.Appender.AdoNetAppender" /> 
            can use this property to get or set this <see cref="T:System.Data.IDbConnection" />.  Use the 
            underlying <see cref="T:System.Data.IDbConnection" /> returned from <see cref="P:log4net.Appender.AdoNetAppender.Connection" /> if 
            you require access beyond that which <see cref="T:log4net.Appender.AdoNetAppender" /> provides.
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.OnClose">
            <summary>
            Override the parent method to close the database
            </summary>
            <remarks>
                <para>
            Closes the database command and database connection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Inserts the events into the database.
            </summary>
            <param name="events">The events to insert into the database.</param>
            <remarks>
                <para>
            Insert all the events specified in the <paramref name="events" />
            array into the database.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)">
            <summary>
            Adds a parameter to the command.
            </summary>
            <param name="parameter">The parameter to add to the command.</param>
            <remarks>
                <para>
            Adds a parameter to the ordered list of command parameters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])">
            <summary>
            Writes the events to the database using the transaction specified.
            </summary>
            <param name="dbTran">The transaction that the events will be executed under.</param>
            <param name="events">The array of events to insert into the database.</param>
            <remarks>
                <para>
            The transaction argument can be <c>null</c> if the appender has been
            configured not to use transactions. See <see cref="P:log4net.Appender.AdoNetAppender.UseTransactions" />
            property for more information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)">
            <summary>
            Formats the log message into database statement text.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            This method can be overridden by subclasses to provide 
            more control over the format of the database statement.
            </remarks>
            <returns>
            Text that can be passed to a <see cref="T:System.Data.IDbCommand" />.
            </returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.CreateConnection(System.Type,System.String)">
            <summary>
            Creates an <see cref="T:System.Data.IDbConnection" /> instance used to connect to the database.
            </summary>
            <remarks>
            This method is called whenever a new IDbConnection is needed (i.e. when a reconnect is necessary).
            </remarks>
            <param name="connectionType">The <see cref="T:System.Type" /> of the <see cref="T:System.Data.IDbConnection" /> object.</param>
            <param name="connectionString">The connectionString output from the ResolveConnectionString method.</param>
            <returns>An <see cref="T:System.Data.IDbConnection" /> instance with a valid connection string.</returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionString(System.String@)">
            <summary>
            Resolves the connection string from the ConnectionString, ConnectionStringName, or AppSettingsKey
            property.
            </summary>
            <remarks>
            ConnectiongStringName is only supported on .NET 2.0 and higher.
            </remarks>
            <param name="connectionStringContext">Additional information describing the connection string.</param>
            <returns>A connection string used to connect to the database.</returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionType">
            <summary>
            Retrieves the class type of the ADO.NET provider.
            </summary>
            <remarks>
                <para>
            Gets the Type of the ADO.NET provider to use to connect to the
            database. This method resolves the type specified in the 
            <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" /> property.
            </para>
                <para>
            Subclasses can override this method to return a different type
            if necessary.
            </para>
            </remarks>
            <returns>The <see cref="T:System.Type" /> of the ADO.NET provider</returns>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.InitializeDatabaseConnection">
            <summary>
            Connects to the database.
            </summary>
        </member>
        <member name="M:log4net.Appender.AdoNetAppender.DiposeConnection">
            <summary>
            Cleanup the existing connection.
            </summary>
            <remarks>
            Calls the IDbConnection's <see cref="M:System.Data.IDbConnection.Close" /> method.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_parameters">
            <summary>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> objects.
            </summary>
            <remarks>
                <para>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> objects.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_dbConnection">
            <summary>
            The <see cref="T:System.Data.IDbConnection" /> that will be used
            to insert logging events into a database.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_connectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_appSettingsKey">
            <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_connectionStringName">
            <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_connectionType">
            <summary>
            String type name of the <see cref="T:System.Data.IDbConnection" /> type name.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_commandText">
            <summary>
            The text of the command.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_commandType">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_useTransactions">
            <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.m_reconnectOnError">
            <summary>
            Indicates whether to reconnect when a connection is lost.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppender.declaringType">
            <summary>
            The fully qualified type of the AdoNetAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Appender.AdoNetAppenderParameter">
            <summary>
            Parameter type used by the <see cref="T:log4net.Appender.AdoNetAppender" />.
            </summary>
            <remarks>
                <para>
            This class provides the basic database parameter properties
            as defined by the <see cref="T:System.Data.IDbDataParameter" /> interface.
            </para>
                <para>This type can be subclassed to provide database specific
            functionality. The two methods that are called externally are
            <see cref="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)" /> and <see cref="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppenderParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> class.
            </summary>
            <remarks>
            Default constructor for the AdoNetAppenderParameter class.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.ParameterName">
            <summary>
            Gets or sets the name of this parameter.
            </summary>
            <value>
            The name of this parameter.
            </value>
            <remarks>
                <para>
            The name of this parameter. The parameter name
            must match up to a named parameter to the SQL stored procedure
            or prepared statement.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.DbType">
            <summary>
            Gets or sets the database type for this parameter.
            </summary>
            <value>
            The database type for this parameter.
            </value>
            <remarks>
                <para>
            The database type for this parameter. This property should
            be set to the database type from the <see cref="P:log4net.Appender.AdoNetAppenderParameter.DbType" />
            enumeration. See <see cref="P:System.Data.IDataParameter.DbType" />.
            </para>
                <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the type from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDataParameter.DbType" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Precision">
            <summary>
            Gets or sets the precision for this parameter.
            </summary>
            <value>
            The precision for this parameter.
            </value>
            <remarks>
                <para>
            The maximum number of digits used to represent the Value.
            </para>
                <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the precision from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Precision" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Scale">
            <summary>
            Gets or sets the scale for this parameter.
            </summary>
            <value>
            The scale for this parameter.
            </value>
            <remarks>
                <para>
            The number of decimal places to which Value is resolved.
            </para>
                <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the scale from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Scale" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Size">
            <summary>
            Gets or sets the size for this parameter.
            </summary>
            <value>
            The size for this parameter.
            </value>
            <remarks>
                <para>
            The maximum size, in bytes, of the data within the column.
            </para>
                <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the size from the value.
            </para>
                <para>
            For BLOB data types like VARCHAR(max) it may be impossible to infer the value automatically, use -1 as the size in this case.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Size" />
        </member>
        <member name="P:log4net.Appender.AdoNetAppenderParameter.Layout">
            <summary>
            Gets or sets the <see cref="T:log4net.Layout.IRawLayout" /> to use to 
            render the logging event into an object for this 
            parameter.
            </summary>
            <value>
            The <see cref="T:log4net.Layout.IRawLayout" /> used to render the
            logging event into an object for this parameter.
            </value>
            <remarks>
                <para>
            The <see cref="T:log4net.Layout.IRawLayout" /> that renders the value for this
            parameter.
            </para>
                <para>
            The <see cref="T:log4net.Layout.RawLayoutConverter" /> can be used to adapt
            any <see cref="T:log4net.Layout.ILayout" /> into a <see cref="T:log4net.Layout.IRawLayout" />
            for use in the property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)">
            <summary>
            Prepare the specified database command object.
            </summary>
            <param name="command">The command to prepare.</param>
            <remarks>
                <para>
            Prepares the database command object by adding
            this parameter to its collection of parameters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)">
            <summary>
            Renders the logging event and set the parameter value in the command.
            </summary>
            <param name="command">The command containing the parameter.</param>
            <param name="loggingEvent">The event to be rendered.</param>
            <remarks>
                <para>
            Renders the logging event using this parameters layout
            object. Sets the value of the parameter on the command object.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_parameterName">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_dbType">
            <summary>
            The database type for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_inferType">
            <summary>
            Flag to infer type rather than use the DbType
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_precision">
            <summary>
            The precision for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_scale">
            <summary>
            The scale for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_size">
            <summary>
            The size for this parameter.
            </summary>
        </member>
        <member name="F:log4net.Appender.AdoNetAppenderParameter.m_layout">
            <summary>
            The <see cref="T:log4net.Layout.IRawLayout" /> to use to render the
            logging event into an object for this parameter.
            </summary>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender">
            <summary>
            Appends logging events to the terminal using ANSI color escape sequences.
            </summary>
            <remarks>
                <para>
            AnsiColorTerminalAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific level of message to be set.
            </para>
                <note>
            This appender expects the terminal to understand the VT100 control set 
            in order to interpret the color codes. If the terminal or console does not
            understand the control codes the behavior is not defined.
            </note>
                <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
                <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
                <para>
            When configuring the ANSI colored terminal appender, a mapping should be
            specified to map a logging level to a color. For example:
            </para>
                <code lang="XML" escaped="true">
                    <mapping>
                        <level value="ERROR" />
                        <foreColor value="White" />
                        <backColor value="Red" />
                        <attributes value="Bright,Underscore" />
                    </mapping>
                    <mapping>
                        <level value="DEBUG" />
                        <backColor value="Green" />
                    </mapping>
                </code>
                <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            of the following values:
            <list type="bullet"><item><term>Blue</term><description></description></item><item><term>Green</term><description></description></item><item><term>Red</term><description></description></item><item><term>White</term><description></description></item><item><term>Yellow</term><description></description></item><item><term>Purple</term><description></description></item><item><term>Cyan</term><description></description></item></list>
            These color values cannot be combined together to make new colors.
            </para>
                <para>
            The attributes can be any combination of the following:
            <list type="bullet"><item><term>Bright</term><description>foreground is brighter</description></item><item><term>Dim</term><description>foreground is dimmer</description></item><item><term>Underscore</term><description>message is underlined</description></item><item><term>Blink</term><description>foreground is blinking (does not work on all terminals)</description></item><item><term>Reverse</term><description>foreground and background are reversed</description></item><item><term>Hidden</term><description>output is hidden</description></item><item><term>Strikethrough</term><description>message has a line through it</description></item></list>
            While any of these attributes may be combined together not all combinations
            work well together, for example setting both <i>Bright</i> and <i>Dim</i> attributes makes
            no sense.
            </para>
            </remarks>
            <author>Patrick Wagstrom</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes">
            <summary>
            The enum of possible display attributes
            </summary>
            <remarks>
                <para>
            The following flags can be combined together to
            form the ANSI color attributes.
            </para>
            </remarks>
            <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Bright">
            <summary>
            text is bright
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Dim">
            <summary>
            text is dim
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Underscore">
            <summary>
            text is underlined
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Blink">
            <summary>
            text is blinking
            </summary>
            <remarks>
            Not all terminals support this attribute
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Reverse">
            <summary>
            text and background colors are reversed
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Hidden">
            <summary>
            text is hidden
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Strikethrough">
            <summary>
            text is displayed with a strikethrough
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes.Light">
            <summary>
            text color is light
            </summary>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiColor">
            <summary>
            The enum of possible foreground or background color values for 
            use with the color mapping method
            </summary>
            <remarks>
                <para>
            The output can be in one for the following ANSI colors.
            </para>
            </remarks>
            <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Black">
            <summary>
            color is black
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Red">
            <summary>
            color is red
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Green">
            <summary>
            color is green
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Yellow">
            <summary>
            color is yellow
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Blue">
            <summary>
            color is blue
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Magenta">
            <summary>
            color is magenta
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.Cyan">
            <summary>
            color is cyan
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.AnsiColor.White">
            <summary>
            color is white
            </summary>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.Target">
            <summary>
            Target is the value of the console output stream.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
                <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.AddMapping(log4net.Appender.AnsiColorTerminalAppender.LevelColors)">
            <summary>
            Add a mapping of level to color
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
                <para>
            Add a <see cref="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colours
            for a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the event to the console.
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
                <para>
            Initialize the level to color mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_writeToErrorStream">
            <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_levelMapping">
            <summary>
            Mapping from level object to color value
            </summary>
        </member>
        <member name="F:log4net.Appender.AnsiColorTerminalAppender.PostEventCodes">
            <summary>
            Ansi code to reset terminal
            </summary>
        </member>
        <member name="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
                <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor">
            <summary>
            The mapped foreground color for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped foreground color for the specified level
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor">
            <summary>
            The mapped background color for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped background color for the specified level
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes">
            <summary>
            The color attributes for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The color attributes for the specified level
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ActivateOptions">
            <summary>
            Initialize the options for the object
            </summary>
            <remarks>
                <para>
            Combine the <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor" /> together
            and append the attributes.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.CombinedColor">
            <summary>
            The combined <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor" />, <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor" /> and
            <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes" /> suitable for setting the ansi terminal color.
            </summary>
        </member>
        <member name="T:log4net.Appender.AppenderCollection">
            <summary>
            A strongly-typed collection of <see cref="T:log4net.Appender.IAppender" /> objects.
            </summary>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
            <exclude />
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
                <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ReadOnly(log4net.Appender.AppenderCollection)">
            <summary>
            Creates a read-only wrapper for a <c>AppenderCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            An <c>AppenderCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="F:log4net.Appender.AppenderCollection.EmptyCollection">
            <summary>
            An empty readonly static AppenderCollection
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>AppenderCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection)">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <c>AppenderCollection</c>.
            </summary>
            <param name="c">The <c>AppenderCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.IAppender[])">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender" /> array.
            </summary>
            <param name="a">The <see cref="T:log4net.Appender.IAppender" /> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender" /> collection.
            </summary>
            <param name="col">The <see cref="T:log4net.Appender.IAppender" /> collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
            <exclude />
        </member>
        <member name="F:log4net.Appender.AppenderCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
            <exclude />
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>AppenderCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[])">
            <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender" /> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender" /> array to copy to.</param>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[],System.Int32)">
            <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender" /> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender" /> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>false, because the backing type is an array, which is never thread-safe.</returns>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:log4net.Appender.IAppender" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Add(log4net.Appender.IAppender)">
            <summary>
            Adds a <see cref="T:log4net.Appender.IAppender" /> to the end of the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to be added to the end of the <c>AppenderCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Clear">
            <summary>
            Removes all elements from the <c>AppenderCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
            <returns>A new <see cref="T:log4net.Appender.AppenderCollection" /> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Contains(log4net.Appender.IAppender)">
            <summary>
            Determines whether a given <see cref="T:log4net.Appender.IAppender" /> is in the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to check for.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> is found in the <c>AppenderCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.IndexOf(log4net.Appender.IAppender)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Appender.IAppender" />
            in the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to locate in the <c>AppenderCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>AppenderCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Insert(System.Int32,log4net.Appender.IAppender)">
            <summary>
            Inserts an element into the <c>AppenderCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Remove(log4net.Appender.IAppender)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Appender.IAppender" /> from the <c>AppenderCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to remove from the <c>AppenderCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Appender.IAppender" /> was not found in the <c>AppenderCollection</c>.
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>AppenderCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
            </exception>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>AppenderCollection</c>.
            </summary>
            <returns>An <see cref="T:log4net.Appender.AppenderCollection.Enumerator" /> for the entire <c>AppenderCollection</c>.</returns>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>AppenderCollection</c> can contain.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.AppenderCollection)">
            <summary>
            Adds the elements of another <c>AppenderCollection</c> to the current <c>AppenderCollection</c>.
            </summary>
            <param name="x">The <c>AppenderCollection</c> whose elements should be added to the end of the current <c>AppenderCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.IAppender[])">
            <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender" /> array to the current <c>AppenderCollection</c>.
            </summary>
            <param name="x">The <see cref="T:log4net.Appender.IAppender" /> array whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender" /> collection to the current <c>AppenderCollection</c>.
            </summary>
            <param name="col">The <see cref="T:log4net.Appender.IAppender" /> collection whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ToArray">
            <summary>
            Return the collection elements as an array
            </summary>
            <returns>the array</returns>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="i" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="i" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
            </exception>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
            <exclude />
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Enumerator.#ctor(log4net.Appender.AppenderCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:log4net.Appender.AppenderCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
                <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Appender.AppenderCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:log4net.Appender.AppenderCollection.ReadOnlyAppenderCollection">
            <exclude />
        </member>
        <member name="T:log4net.Appender.AppenderSkeleton">
            <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender" />. 
            </summary>
            <remarks>
                <para>
            This class provides the code for common functionality, such 
            as support for threshold filtering and support for general filters.
            </para>
                <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:IOptionHandler.ActivateOptions()" /> method
            be called after the appenders properties have been configured.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>Empty default constructor</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Finalize">
            <summary>
            Finalizes this appender by calling the implementation's 
            <see cref="M:log4net.Appender.AppenderSkeleton.Close" /> method.
            </summary>
            <remarks>
                <para>
            If this appender has not been closed then the <c>Finalize</c> method
            will call <see cref="M:log4net.Appender.AppenderSkeleton.Close" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Threshold">
            <summary>
            Gets or sets the threshold <see cref="T:log4net.Core.Level" /> of this appender.
            </summary>
            <value>
            The threshold <see cref="T:log4net.Core.Level" /> of the appender. 
            </value>
            <remarks>
                <para>
            All log events with lower level than the threshold level are ignored 
            by the appender.
            </para>
                <para>
            In configuration files this option is specified by setting the
            value of the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> option to a level
            string, such as "DEBUG", "INFO" and so on.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.ErrorHandler">
            <summary>
            Gets or sets the <see cref="T:log4net.Core.IErrorHandler" /> for this appender.
            </summary>
            <value>The <see cref="T:log4net.Core.IErrorHandler" /> of the appender</value>
            <remarks>
                <para>
            The <see cref="T:log4net.Appender.AppenderSkeleton" /> provides a default 
            implementation for the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" /> property. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.FilterHead">
            <summary>
            The filter chain.
            </summary>
            <value>The head of the filter chain filter chain.</value>
            <remarks>
                <para>
            Returns the head Filter. The Filters are organized in a linked list
            and so all Filters on this Appender are available through the result.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Layout">
            <summary>
            Gets or sets the <see cref="T:log4net.Layout.ILayout" /> for this appender.
            </summary>
            <value>The layout of the appender.</value>
            <remarks>
                <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout" /> for more information.
            </para>
            </remarks>
            <seealso cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout" />
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.Name">
            <summary>
            Gets or sets the name of this appender.
            </summary>
            <value>The name of the appender.</value>
            <remarks>
                <para>
            The name uniquely identifies the appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Close">
            <summary>
            Closes the appender and release resources.
            </summary>
            <remarks>
                <para>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
                <para>
            It is a programming error to append to a closed appender.
            </para>
                <para>
            This method cannot be overridden by subclasses. This method 
            delegates the closing of the appender to the <see cref="M:log4net.Appender.AppenderSkeleton.OnClose" />
            method which must be overridden in the subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)">
            <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:Append(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:Append(LoggingEvent)" /> method
            which is called by this method.
            </para>
                <para>
            The implementation of this method is as follows:
            </para>
                <para>
                    <list type="bullet">
                        <item>
                            <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
                        </item>
                        <item>
                            <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
                        </item>
                        <item>
                            <description>
            		Calls <see cref="M:PreAppendCheck()" /> and checks that 
            		it returns <c>true</c>.</description>
                        </item>
                    </list>
                </para>
                <para>
            If all of the above steps succeed then the <paramref name="loggingEvent" />
            will be passed to the abstract <see cref="M:Append(LoggingEvent)" /> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])">
            <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:Append(LoggingEvent[])" /> method.
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
                <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:Append(LoggingEvent[])" /> method
            which is called by this method.
            </para>
                <para>
            The implementation of this method is as follows:
            </para>
                <para>
                    <list type="bullet">
                        <item>
                            <description>
            		Checks that the severity of the <paramref name="loggingEvents" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
                        </item>
                        <item>
                            <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvents" />.
            		</description>
                        </item>
                        <item>
                            <description>
            		Calls <see cref="M:PreAppendCheck()" /> and checks that 
            		it returns <c>true</c>.</description>
                        </item>
                    </list>
                </para>
                <para>
            If all of the above steps succeed then the <paramref name="loggingEvents" />
            will be passed to the <see cref="M:Append(LoggingEvent[])" /> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.FilterEvent(log4net.Core.LoggingEvent)">
            <summary>
            Test if the logging event should we output by this appender
            </summary>
            <param name="loggingEvent">the event to test</param>
            <returns>
                <c>true</c> if the event should be output, <c>false</c> if the event should be ignored</returns>
            <remarks>
                <para>
            This method checks the logging event against the threshold level set
            on this appender and also against the filters specified on this
            appender.
            </para>
                <para>
            The implementation of this method is as follows:
            </para>
                <para>
                    <list type="bullet">
                        <item>
                            <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
                        </item>
                        <item>
                            <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
                        </item>
                    </list>
                </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
            <summary>
            Adds a filter to the end of the filter chain.
            </summary>
            <param name="filter">the filter to add to this appender</param>
            <remarks>
                <para>
            The Filters are organized in a linked list.
            </para>
                <para>
            Setting this property causes the new filter to be pushed onto the 
            back of the filter chain.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.ClearFilters">
            <summary>
            Clears the filter list for this appender.
            </summary>
            <remarks>
                <para>
            Clears the filter list for this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Core.Level)">
            <summary>
            Checks if the message level is below this appender's threshold.
            </summary>
            <param name="level">
                <see cref="T:log4net.Core.Level" /> to test against.</param>
            <remarks>
                <para>
            If there is no threshold set, then the return value is always <c>true</c>.
            </para>
            </remarks>
            <returns>
                <c>true</c> if the <paramref name="level" /> meets the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> 
            requirements of this appender.
            </returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.OnClose">
            <summary>
            Is called when the appender is closed. Derived classes should override 
            this method if resources need to be released.
            </summary>
            <remarks>
                <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
                <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)">
            <summary>
            Subclasses of <see cref="T:log4net.Appender.AppenderSkeleton" /> should implement this method 
            to perform actual logging.
            </summary>
            <param name="loggingEvent">The event to append.</param>
            <remarks>
                <para>
            A subclass must implement this method to perform
            logging of the <paramref name="loggingEvent" />.
            </para>
                <para>This method will be called by <see cref="M:DoAppend(LoggingEvent)" />
            if all the conditions listed for that method are met.
            </para>
                <para>
            To restrict the logging of events in the appender
            override the <see cref="M:PreAppendCheck()" /> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Append a bulk array of logging events.
            </summary>
            <param name="loggingEvents">the array of logging events</param>
            <remarks>
                <para>
            This base class implementation calls the <see cref="M:Append(LoggingEvent)" />
            method for each element in the bulk array.
            </para>
                <para>
            A sub class that can better process a bulk array of events should
            override this method in addition to <see cref="M:Append(LoggingEvent)" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.PreAppendCheck">
            <summary>
            Called before <see cref="M:Append(LoggingEvent)" /> as a precondition.
            </summary>
            <remarks>
                <para>
            This method is called by <see cref="M:DoAppend(LoggingEvent)" />
            before the call to the abstract <see cref="M:Append(LoggingEvent)" /> method.
            </para>
                <para>
            This method can be overridden in a subclass to extend the checks 
            made before the event is passed to the <see cref="M:Append(LoggingEvent)" /> method.
            </para>
                <para>
            A subclass should ensure that they delegate this call to
            this base class if it is overridden.
            </para>
            </remarks>
            <returns>
                <c>true</c> if the call to <see cref="M:Append(LoggingEvent)" /> should proceed.</returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)">
            <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent" /> to a string.
            </summary>
            <param name="loggingEvent">The event to render.</param>
            <returns>The event rendered as a string.</returns>
            <remarks>
                <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent" /> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" />
            set to render the <paramref name="loggingEvent" /> to 
            a string.
            </para>
                <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
                <para>
            Where possible use the alternative version of this method
            <see cref="M:RenderLoggingEvent(TextWriter,LoggingEvent)" />.
            That method streams the rendering onto an existing Writer
            which can give better performance if the caller already has
            a <see cref="T:System.IO.TextWriter" /> open and ready for writing.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent" /> to a string.
            </summary>
            <param name="loggingEvent">The event to render.</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
                <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent" /> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" />
            set to render the <paramref name="loggingEvent" /> to 
            a string.
            </para>
                <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
                <para>
            Use this method in preference to <see cref="M:RenderLoggingEvent(LoggingEvent)" />
            where possible. If, however, the caller needs to render the event
            to a string then <see cref="M:RenderLoggingEvent(LoggingEvent)" /> does
            provide an efficient mechanism for doing so.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.AppenderSkeleton.RequiresLayout">
            <summary>
            Tests if this appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </summary>
            <remarks>
                <para>
            In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, 
            then the appender should return <c>true</c>.
            </para>
                <para>
            This default implementation always returns <c>false</c>.
            </para>
            </remarks>
            <returns>
                <c>true</c> if the appender requires a layout object, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:log4net.Appender.AppenderSkeleton.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <remarks>
            This implementation doesn't flush anything and always returns true
            </remarks>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_layout">
            <summary>
            The layout of this appender.
            </summary>
            <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_name">
            <summary>
            The name of this appender.
            </summary>
            <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Name" /> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_threshold">
            <summary>
            The level threshold of this appender.
            </summary>
            <remarks>
                <para>
            There is no level threshold filtering by default.
            </para>
                <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_errorHandler">
            <summary>
            It is assumed and enforced that errorHandler is never null.
            </summary>
            <remarks>
                <para>
            It is assumed and enforced that errorHandler is never null.
            </para>
                <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_headFilter">
            <summary>
            The first filter in the filter chain.
            </summary>
            <remarks>
                <para>
            Set to <c>null</c> initially.
            </para>
                <para>
            See <see cref="T:log4net.Filter.IFilter" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_tailFilter">
            <summary>
            The last filter in the filter chain.
            </summary>
            <remarks>
            See <see cref="T:log4net.Filter.IFilter" /> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_closed">
            <summary>
            Flag indicating if this appender is closed.
            </summary>
            <remarks>
            See <see cref="M:log4net.Appender.AppenderSkeleton.Close" /> for more information.
            </remarks>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_recursiveGuard">
            <summary>
            The guard prevents an appender from repeatedly calling its own DoAppend method
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.m_renderWriter">
            <summary>
            StringWriter used to render events
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferSize">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferMaxCapacity">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="F:log4net.Appender.AppenderSkeleton.declaringType">
            <summary>
            The fully qualified type of the AppenderSkeleton class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Appender.BufferingAppenderSkeleton">
            <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender" /> that 
            buffers events in a fixed size buffer.
            </summary>
            <remarks>
                <para>
            This base class should be used by appenders that need to buffer a 
            number of events before logging them. For example the <see cref="T:log4net.Appender.AdoNetAppender" /> 
            buffers events and then submits the entire contents of the buffer to 
            the underlying database in one go.
            </para>
                <para>
            Subclasses should override the <see cref="M:SendBuffer(LoggingEvent[])" />
            method to deliver the buffered events.
            </para>
                <para>The BufferingAppenderSkeleton maintains a fixed size cyclic 
            buffer of events. The size of the buffer is set using 
            the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> property.
            </para>
                <para>A <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> is used to inspect 
            each event as it arrives in the appender. If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> 
            triggers, then the current buffer is sent immediately 
            (see <see cref="M:SendBuffer(LoggingEvent[])" />). Otherwise the event 
            is stored in the buffer. For example, an evaluator can be used to 
            deliver the events immediately when an ERROR event arrives.
            </para>
                <para>
            The buffering appender can be configured in a <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode. 
            By default the appender is NOT lossy. When the buffer is full all 
            the buffered events are sent with <see cref="M:SendBuffer(LoggingEvent[])" />.
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> property is set to <c>true</c> then the 
            buffer will not be sent when it is full, and new events arriving 
            in the appender will overwrite the oldest event in the buffer. 
            In lossy mode the buffer will only be sent when the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" />
            triggers. This can be useful behavior when you need to know about 
            ERROR events but not about events with a lower level, configure an 
            evaluator that will trigger when an ERROR event arrives, the whole 
            buffer will be sent which gives a history of events leading up to
            the ERROR event.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
            <remarks>
                <para>
            Protected default constructor to allow subclassing.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
            <param name="eventMustBeFixed">the events passed through this appender must be
            fixed by the time that they arrive in the derived class' <c>SendBuffer</c> method.</param>
            <remarks>
                <para>
            Protected constructor to allow subclassing.
            </para>
                <para>
            The <paramref name="eventMustBeFixed" /> should be set if the subclass
            expects the events delivered to be fixed even if the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is set to zero, i.e. when no buffering occurs.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.Lossy">
            <summary>
            Gets or sets a value that indicates whether the appender is lossy.
            </summary>
            <value>
                <c>true</c> if the appender is lossy, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
                <para>
            This appender uses a buffer to store logging events before 
            delivering them. A triggering event causes the whole buffer
            to be send to the remote sink. If the buffer overruns before
            a triggering event then logging events could be lost. Set
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> to <c>false</c> to prevent logging events 
            from being lost.
            </para>
                <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be specified.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize">
            <summary>
            Gets or sets the size of the cyclic buffer used to hold the 
            logging events.
            </summary>
            <value>
            The size of the cyclic buffer used to hold the logging events.
            </value>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option takes a positive integer
            representing the maximum number of logging events to collect in 
            a cyclic buffer. When the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is reached,
            oldest events are deleted as new events are added to the
            buffer. By default the size of the cyclic buffer is 512 events.
            </para>
                <para>
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is set to a value less than
            or equal to 1 then no buffering will occur. The logging event
            will be delivered synchronously (depending on the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" />
            and <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> properties). Otherwise the event will
            be buffered.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator">
            <summary>
            Gets or sets the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> that causes the 
            buffer to be sent immediately.
            </summary>
            <value>
            The <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> that causes the buffer to be
            sent immediately.
            </value>
            <remarks>
                <para>
            The evaluator will be called for each event that is appended to this 
            appender. If the evaluator triggers then the current buffer will 
            immediately be sent (see <see cref="M:SendBuffer(LoggingEvent[])" />).
            </para>
                <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be specified.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator">
            <summary>
            Gets or sets the value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> to use.
            </summary>
            <value>
            The value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> to use.
            </value>
            <remarks>
                <para>
            The evaluator will be called for each event that is discarded from this 
            appender. If the evaluator triggers then the current buffer will immediately 
            be sent (see <see cref="M:SendBuffer(LoggingEvent[])" />).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.OnlyFixPartialEventData">
            <summary>
            Gets or sets a value indicating if only part of the logging event data
            should be fixed.
            </summary>
            <value>
                <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
                <para>
            Setting this property to <c>true</c> will cause only part of the
            event data to be fixed and serialized. This will improve performance.
            </para>
                <para>
            See <see cref="M:LoggingEvent.FixVolatileData(FixFlags)" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingAppenderSkeleton.Fix">
            <summary>
            Gets or sets a the fields that will be fixed in the event
            </summary>
            <value>
            The event fields that will be fixed before the event is buffered
            </value>
            <remarks>
                <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix" />
            for details.
            </para>
            </remarks>
            <seealso cref="P:log4net.Core.LoggingEvent.Fix" />
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush">
            <summary>
            Flush the currently buffered events
            </summary>
            <remarks>
                <para>
            Flushes any events that have been buffered.
            </para>
                <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode then the contents
            of the buffer will NOT be flushed to the appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush(System.Boolean)">
            <summary>
            Flush the currently buffered events
            </summary>
            <param name="flushLossyBuffer">set to <c>true</c> to flush the buffer of lossy events</param>
            <remarks>
                <para>
            Flushes events that have been buffered. If <paramref name="flushLossyBuffer" /> is
            <c>false</c> then events will only be flushed if this buffer is non-lossy mode.
            </para>
                <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode then the contents
            of the buffer will only be flushed if <paramref name="flushLossyBuffer" /> is <c>true</c>.
            In this case the contents of the buffer will be tested against the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator" /> and if triggering will be output. All other buffered
            events will be discarded.
            </para>
                <para>
            If <paramref name="flushLossyBuffer" /> is <c>true</c> then the buffer will always
            be emptied by calling this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.OnClose">
            <summary>
            Close this appender instance.
            </summary>
            <remarks>
                <para>
            Close this appender instance. If this appender is marked
            as not <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> then the remaining events in 
            the buffer must be sent when the appender is closed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method. 
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
                <para>
            Stores the <paramref name="loggingEvent" /> in the cyclic buffer.
            </para>
                <para>
            The buffer will be sent (i.e. passed to the <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" /> 
            method) if one of the following conditions is met:
            </para>
                <list type="bullet">
                    <item>
                        <description>The cyclic buffer is full and this appender is
            		marked as not lossy (see <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" />)</description>
                    </item>
                    <item>
                        <description>An <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> is set and
            		it is triggered for the <paramref name="loggingEvent" />
            		specified.</description>
                    </item>
                </list>
                <para>
            Before the event is stored in the buffer it is fixed
            (see <see cref="M:LoggingEvent.FixVolatileData(FixFlags)" />) to ensure that
            any data referenced by the event will be valid when the buffer
            is processed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendFromBuffer(log4net.Core.LoggingEvent,log4net.Util.CyclicBuffer)">
            <summary>
            Sends the contents of the buffer.
            </summary>
            <param name="firstLoggingEvent">The first logging event.</param>
            <param name="buffer">The buffer containing the events that need to be send.</param>
            <remarks>
                <para>
            The subclass must override <see cref="M:SendBuffer(LoggingEvent[])" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Sends the events.
            </summary>
            <param name="events">The events that need to be send.</param>
            <remarks>
                <para>
            The subclass must override this method to process the buffered events.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE">
            <summary>
            The default buffer size.
            </summary>
            <remarks>
            The default size of the cyclic buffer used to store events.
            This is set to 512 by default.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_bufferSize">
            <summary>
            The size of the cyclic buffer used to hold the logging events.
            </summary>
            <remarks>
            Set to <see cref="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE" /> by default.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_cb">
            <summary>
            The cyclic buffer used to store the logging events.
            </summary>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_evaluator">
            <summary>
            The triggering event evaluator that causes the buffer to be sent immediately.
            </summary>
            <remarks>
            The object that is used to determine if an event causes the entire
            buffer to be sent immediately. This field can be <c>null</c>, which 
            indicates that event triggering is not to be done. The evaluator
            can be set using the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> property. If this appender
            has the <see cref="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy" /> (<see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> property) set to 
            <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be set.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy">
            <summary>
            Indicates if the appender should overwrite events in the cyclic buffer 
            when it becomes full, or if the buffer should be flushed when the 
            buffer is full.
            </summary>
            <remarks>
            If this field is set to <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must 
            be set.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossyEvaluator">
            <summary>
            The triggering event evaluator filters discarded events.
            </summary>
            <remarks>
            The object that is used to determine if an event that is discarded should
            really be discarded or if it should be sent to the appenders. 
            This field can be <c>null</c>, which indicates that all discarded events will
            be discarded. 
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_fixFlags">
            <summary>
            Value indicating which fields in the event should be fixed
            </summary>
            <remarks>
            By default all fields are fixed
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_eventMustBeFixed">
            <summary>
            The events delivered to the subclass must be fixed.
            </summary>
        </member>
        <member name="T:log4net.Appender.BufferingForwardingAppender">
            <summary>
            Buffers events and then forwards them to attached appenders.
            </summary>
            <remarks>
                <para>
            The events are buffered in this appender until conditions are
            met to allow the appender to deliver the events to the attached 
            appenders. See <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> for the
            conditions that cause the buffer to be sent.
            </para>
                <para>The forwarding appender can be used to specify different 
            thresholds and filters for the same appender at different locations 
            within the hierarchy.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingForwardingAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.OnClose">
            <summary>
            Closes the appender and releases resources.
            </summary>
            <remarks>
                <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
                <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Send the events.
            </summary>
            <param name="events">The events that need to be send.</param>
            <remarks>
                <para>
            Forwards the events to the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
            <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
            <remarks>
                <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.BufferingForwardingAppender.Appenders">
            <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
            <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection" /> 
            is returned.
            </remarks>
            <returns>
            A collection of the appenders in this appender.
            </returns>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.GetAppender(System.String)">
            <summary>
            Looks for the appender with the specified name.
            </summary>
            <param name="name">The name of the appender to lookup.</param>
            <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
            <remarks>
                <para>
            Get the named appender attached to this buffering appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAllAppenders">
            <summary>
            Removes all previously added appenders from this appender.
            </summary>
            <remarks>
                <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
        </member>
        <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
        </member>
        <member name="F:log4net.Appender.BufferingForwardingAppender.m_appenderAttachedImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
        </member>
        <member name="T:log4net.Appender.ColoredConsoleAppender">
            <summary>
            Appends logging events to the console.
            </summary>
            <remarks>
                <para>
            ColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
                <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
                <para>
            NOTE: This appender writes directly to the application's attached console
            not to the <c>System.Console.Out</c> or <c>System.Console.Error</c><c>TextWriter</c>.
            The <c>System.Console.Out</c> and <c>System.Console.Error</c> streams can be
            programmatically redirected (for example NUnit does this to capture program output).
            This appender will ignore these redirections because it needs to use Win32
            API calls to colorize the output. To respect these redirections the <see cref="T:log4net.Appender.ConsoleAppender" />
            must be used.
            </para>
                <para>
            When configuring the colored console appender, mapping should be
            specified to map a logging level to a color. For example:
            </para>
                <code lang="XML" escaped="true">
                    <mapping>
                        <level value="ERROR" />
                        <foreColor value="White" />
                        <backColor value="Red, HighIntensity" />
                    </mapping>
                    <mapping>
                        <level value="DEBUG" />
                        <backColor value="Green" />
                    </mapping>
                </code>
                <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            combination of the following values:
            <list type="bullet"><item><term>Blue</term><description></description></item><item><term>Green</term><description></description></item><item><term>Red</term><description></description></item><item><term>White</term><description></description></item><item><term>Yellow</term><description></description></item><item><term>Purple</term><description></description></item><item><term>Cyan</term><description></description></item><item><term>HighIntensity</term><description></description></item></list></para>
            </remarks>
            <author>Rick Hobbs</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.ColoredConsoleAppender.Colors">
            <summary>
            The enum of possible color values for use with the color mapping method
            </summary>
            <remarks>
                <para>
            The following flags can be combined together to
            form the colors.
            </para>
            </remarks>
            <seealso cref="T:log4net.Appender.ColoredConsoleAppender" />
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Blue">
            <summary>
            color is blue
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Green">
            <summary>
            color is green
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Red">
            <summary>
            color is red
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.White">
            <summary>
            color is white
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Yellow">
            <summary>
            color is yellow
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Purple">
            <summary>
            color is purple
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.Cyan">
            <summary>
            color is cyan
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.Colors.HighIntensity">
            <summary>
            color is intensified
            </summary>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
            <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
                <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.AddMapping(log4net.Appender.ColoredConsoleAppender.LevelColors)">
            <summary>
            Add a mapping of level to color - done by the config file
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
                <para>
            Add a <see cref="T:log4net.Appender.ColoredConsoleAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the event to the console.
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
                <para>
            Initialize the level to color mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.m_writeToErrorStream">
            <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.m_levelMapping">
            <summary>
            Mapping from level object to color value
            </summary>
        </member>
        <member name="F:log4net.Appender.ColoredConsoleAppender.m_consoleOutputWriter">
            <summary>
            The console output stream writer to write to
            </summary>
            <remarks>
                <para>
            This writer is not thread safe.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.ColoredConsoleAppender.LevelColors">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
                <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor">
            <summary>
            The mapped foreground color for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor">
            <summary>
            The mapped background color for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped background color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ColoredConsoleAppender.LevelColors.ActivateOptions">
            <summary>
            Initialize the options for the object
            </summary>
            <remarks>
                <para>
            Combine the <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor" /> together.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.CombinedColor">
            <summary>
            The combined <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor" /> suitable for 
            setting the console color.
            </summary>
        </member>
        <member name="T:log4net.Appender.ConsoleAppender">
            <summary>
            Appends logging events to the console.
            </summary>
            <remarks>
                <para>
            ConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user.
            </para>
                <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
                <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
            <param name="layout">the layout to use for this appender</param>
            <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
            <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.ConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
                <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ConsoleAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the event to the console.
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ConsoleAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ConsoleAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.DebugAppender">
            <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Debug" /> system.
            </summary>
            <remarks>
                <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Debug" /> class for details on configuring the
            debug system.
            </para>
                <para>
            Events are written using the <see cref="M:System.Diagnostics.Debug.Write(string,string)" />
            method. The event's logger name is passed as the value for the category name to the Write method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.DebugAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" />.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.DebugAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" /> 
            with a specified layout.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.DebugAppender.ImmediateFlush">
            <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
            <remarks>
                <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
                <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.DebugAppender.Category">
            <summary>
            Formats the category parameter sent to the Debug method.
            </summary>
            <remarks>
                <para>
            Defaults to a <see cref="T:log4net.Layout.PatternLayout" /> with %logger as the pattern which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent" /> as the category parameter.
            </para>
                <para></para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.DebugAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.DebugAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug" /> system.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug" /> system.
            If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush" /> is <c>true</c> then the <see cref="M:System.Diagnostics.Debug.Flush" />
            is called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.DebugAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.DebugAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
                <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
                <para>
            The default value is <c>true</c>.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.DebugAppender.m_category">
            <summary>
            Defaults to a <see cref="T:log4net.Layout.PatternLayout" /> with %logger as the pattern.
            </summary>
        </member>
        <member name="T:log4net.Appender.EventLogAppender">
            <summary>
            Writes events to the system event log.
            </summary>
            <remarks>
                <para>
            The appender will fail if you try to write using an event source that doesn't exist unless it is running with local administrator privileges.
            See also http://logging.apache.org/log4net/release/faq.html#trouble-EventLog
            </para>
                <para>
            The <c>EventID</c> of the event log entry can be
            set using the <c>EventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
                <para>
            The <c>Category</c> of the event log entry can be
            set using the <c>Category</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
                <para>
            There is a limit of 32K characters for an event log message
            </para>
                <para>
            When configuring the EventLogAppender a mapping can be
            specified to map a logging level to an event log entry type. For example:
            </para>
                <code lang="XML">
            &lt;mapping&gt;
            	&lt;level value="ERROR" /&gt;
            	&lt;eventLogEntryType value="Error" /&gt;
            &lt;/mapping&gt;
            &lt;mapping&gt;
            	&lt;level value="DEBUG" /&gt;
            	&lt;eventLogEntryType value="Information" /&gt;
            &lt;/mapping&gt;
            </code>
                <para>
            The Level is the standard log4net logging level and eventLogEntryType can be any value
            from the <see cref="T:System.Diagnostics.EventLogEntryType" /> enum, i.e.:
            <list type="bullet"><item><term>Error</term><description>an error event</description></item><item><term>Warning</term><description>a warning event</description></item><item><term>Information</term><description>an informational event</description></item></list></para>
            </remarks>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Thomas Voss</author>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class
            with the specified <see cref="T:log4net.Layout.ILayout" />.
            </summary>
            <param name="layout">The <see cref="T:log4net.Layout.ILayout" /> to use with this appender.</param>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.LogName">
            <summary>
            The name of the log where messages will be stored.
            </summary>
            <value>
            The string name of the log where messages will be stored.
            </value>
            <remarks>
                <para>This is the name of the log as it appears in the Event Viewer
            tree. The default value is to log into the <c>Application</c>
            log, this is where most applications write their events. However
            if you need a separate log for your application (or applications)
            then you should set the <see cref="P:log4net.Appender.EventLogAppender.LogName" /> appropriately.</para>
                <para>This should not be used to distinguish your event log messages
            from those of other applications, the <see cref="P:log4net.Appender.EventLogAppender.ApplicationName" />
            property should be used to distinguish events. This property should be 
            used to group together events into a single log.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.ApplicationName">
            <summary>
            Property used to set the Application name.  This appears in the
            event logs when logging.
            </summary>
            <value>
            The string used to distinguish events from different sources.
            </value>
            <remarks>
            Sets the event log source property.
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.MachineName">
            <summary>
            This property is used to return the name of the computer to use
            when accessing the event logs.  Currently, this is the current
            computer, denoted by a dot "."
            </summary>
            <value>
            The string name of the machine holding the event log that 
            will be logged into.
            </value>
            <remarks>
            This property cannot be changed. It is currently set to '.'
            i.e. the local machine. This may be changed in future.
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.AddMapping(log4net.Appender.EventLogAppender.Level2EventLogEntryType)">
            <summary>
            Add a mapping of level to <see cref="T:System.Diagnostics.EventLogEntryType" /> - done by the config file
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
                <para>
            Add a <see cref="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType" /> mapping to this appender.
            Each mapping defines the event log entry type for a level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> used to write to the EventLog.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> used to write to the EventLog.
            </value>
            <remarks>
                <para>
            The system security context used to write to the EventLog.
            </para>
                <para>
            Unless a <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.EventId">
            <summary>
            Gets or sets the <c>EventId</c> to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
            <remarks>
                <para>
            The <c>EventID</c> of the event log entry will normally be
            set using the <c>EventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            This property provides the fallback value which defaults to 0.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.Category">
            <summary>
            Gets or sets the <c>Category</c> to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
            <remarks>
                <para>
            The <c>Category</c> of the event log entry will normally be
            set using the <c>Category</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            This property provides the fallback value which defaults to 0.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.CreateEventSource(System.String,System.String,System.String)">
            <summary>
            Create an event log source
            </summary>
            <remarks>
            Uses different API calls under NET_2_0
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" />
            method. 
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
                <para>Writes the event to the system event log using the 
            <see cref="P:log4net.Appender.EventLogAppender.ApplicationName" />.</para>
                <para>If the event has an <c>EventID</c> property (see <see cref="P:log4net.Core.LoggingEvent.Properties" />)
            set then this integer will be used as the event log event id.</para>
                <para>
            There is a limit of 32K characters for an event log message
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.GetEntryType(log4net.Core.Level)">
            <summary>
            Get the equivalent <see cref="T:System.Diagnostics.EventLogEntryType" /> for a <see cref="T:log4net.Core.Level" /><paramref name="level" /></summary>
            <param name="level">the Level to convert to an EventLogEntryType</param>
            <returns>The equivalent <see cref="T:System.Diagnostics.EventLogEntryType" /> for a <see cref="T:log4net.Core.Level" /><paramref name="level" /></returns>
            <remarks>
            Because there are fewer applicable <see cref="T:System.Diagnostics.EventLogEntryType" />
            values to use in logging levels than there are in the 
            <see cref="T:log4net.Core.Level" /> this is a one way mapping. There is
            a loss of information during the conversion.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_logName">
            <summary>
            The log name is the section in the event logs where the messages
            are stored.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_applicationName">
            <summary>
            Name of the application to use when logging.  This appears in the
            application column of the event log named by <see cref="F:log4net.Appender.EventLogAppender.m_logName" />.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_machineName">
            <summary>
            The name of the machine which holds the event log. This is
            currently only allowed to be '.' i.e. the current machine.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_levelMapping">
            <summary>
            Mapping from level object to EventLogEntryType
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_eventId">
            <summary>
            The event ID to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.m_category">
            <summary>
            The event category to use unless one is explicitly specified via the <c>LoggingEvent</c>'s properties.
            </summary>
        </member>
        <member name="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
                <para>
            Defines the mapping between a level and its event log entry type.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType">
            <summary>
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType" /> for this entry
            </summary>
            <remarks>
                <para>
            Required property.
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType" /> for this entry
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.declaringType">
            <summary>
            The fully qualified type of the EventLogAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT">
            <summary>
            The maximum size supported by default.
            </summary>
            <remarks>
            http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx
            The 32766 documented max size is two bytes shy of 32K (I'm assuming 32766 
            may leave space for a two byte null terminator of #0#0). The 32766 max 
            length is what the .NET 4.0 source code checks for, but this is WRONG! 
            Strings with a length &gt; 31839 on Windows Vista or higher can CORRUPT 
            the event log! See: System.Diagnostics.EventLogInternal.InternalWriteEvent() 
            for the use of the 32766 max size.
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER">
            <summary>
            The maximum size supported by a windows operating system that is vista
            or newer.
            </summary>
            <remarks>
            See ReportEvent API:
            	http://msdn.microsoft.com/en-us/library/aa363679(VS.85).aspx
            ReportEvent's lpStrings parameter:
            "A pointer to a buffer containing an array of 
            null-terminated strings that are merged into the message before Event Viewer 
            displays the string to the user. This parameter must be a valid pointer 
            (or NULL), even if wNumStrings is zero. Each string is limited to 31,839 characters."
            
            Going beyond the size of 31839 will (at some point) corrupt the event log on Windows
            Vista or higher! It may succeed for a while...but you will eventually run into the
            error: "System.ComponentModel.Win32Exception : A device attached to the system is
            not functioning", and the event log will then be corrupt (I was able to corrupt 
            an event log using a length of 31877 on Windows 7).
            
            The max size for Windows Vista or higher is documented here:
            	http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx.
            Going over this size may succeed a few times but the buffer will overrun and 
            eventually corrupt the log (based on testing).
            
            The maxEventMsgSize size is based on the max buffer size of the lpStrings parameter of the ReportEvent API.
            The documented max size for EventLog.WriteEntry for Windows Vista and higher is 31839, but I'm leaving room for a
            terminator of #0#0, as we cannot see the source of ReportEvent (though we could use an API monitor to examine the
            buffer, given enough time).
            </remarks>
        </member>
        <member name="F:log4net.Appender.EventLogAppender.MAX_EVENTLOG_MESSAGE_SIZE">
            <summary>
            The maximum size that the operating system supports for
            a event log message.
            </summary>
            <remarks>
            Used to determine the maximum string length that can be written
            to the operating system event log and eventually truncate a string
            that exceeds the limits.
            </remarks>
        </member>
        <member name="M:log4net.Appender.EventLogAppender.GetMaxEventLogMessageSize">
            <summary>
            This method determines the maximum event log message size allowed for
            the current environment.
            </summary>
            <returns></returns>
        </member>
        <member name="T:log4net.Appender.FileAppender">
            <summary>
            Appends logging events to a file.
            </summary>
            <remarks>
                <para>
            Logging events are sent to the file specified by
            the <see cref="P:log4net.Appender.FileAppender.File" /> property.
            </para>
                <para>
            The file can be opened in either append or overwrite mode 
            by specifying the <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property.
            If the file path is relative it is taken as relative from 
            the application base directory. The file encoding can be
            specified by setting the <see cref="P:log4net.Appender.FileAppender.Encoding" /> property.
            </para>
                <para>
            The layout's <see cref="P:log4net.Layout.ILayout.Header" /> and <see cref="P:log4net.Layout.ILayout.Footer" />
            values will be written each time the file is opened and closed
            respectively. If the <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property is <see langword="true" />
            then the file may contain multiple copies of the header and footer.
            </para>
                <para>
            This appender will first try to open the file for writing when <see cref="M:log4net.Appender.FileAppender.ActivateOptions" />
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
                <para>
            The <see cref="T:log4net.Appender.FileAppender" /> supports pluggable file locking models via
            the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> property.
            The default behavior, implemented by <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> 
            is to obtain an exclusive write lock on the file until this appender is closed.
            The alternative models only hold a
            write lock while the appender is writing a logging event (<see cref="T:log4net.Appender.FileAppender.MinimalLock" />)
            or synchronize by using a named system wide Mutex (<see cref="T:log4net.Appender.FileAppender.InterProcessLock" />).
            </para>
                <para>
            All locking strategies have issues and you should seriously consider using a different strategy that
            avoids having multiple processes logging to the same file.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Rodrigo B. de Oliveira</author>
            <author>Douglas de la Torre</author>
            <author>Niall Daley</author>
        </member>
        <member name="T:log4net.Appender.FileAppender.LockingStream">
            <summary>
            Write only <see cref="T:System.IO.Stream" /> that uses the <see cref="T:log4net.Appender.FileAppender.LockingModelBase" /> 
            to manage access to an underlying resource.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            True asynchronous writes are not supported, the implementation forces a synchronous write.
            </summary>
        </member>
        <member name="T:log4net.Appender.FileAppender.LockingModelBase">
            <summary>
            Locking model base class
            </summary>
            <remarks>
                <para>
            Base class for the locking models available to the <see cref="T:log4net.Appender.FileAppender" /> derived loggers.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the output file
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
                <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
                <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
                <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock" />
            must be called to release the lock on the output file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
                <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" /> is called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.LockingModelBase.CurrentAppender">
            <summary>
            Gets or sets the <see cref="T:log4net.Appender.FileAppender" /> for this LockingModel
            </summary>
            <value>
            The <see cref="T:log4net.Appender.FileAppender" /> for this LockingModel
            </value>
            <remarks>
                <para>
            The file appender this locking model is attached to and working on
            behalf of.
            </para>
                <para>
            The file appender is used to locate the security context and the error handler to use.
            </para>
                <para>
            The value of this property will be set before <see cref="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)" /> is
            called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.CreateStream(System.String,System.Boolean,System.IO.FileShare)">
            <summary>
            Helper method that creates a FileStream under CurrentAppender's SecurityContext.
            </summary>
            <remarks>
                <para>
            Typically called during OpenFile or AcquireLock. 
            </para>
                <para>
            If the directory portion of the <paramref name="filename" /> does not exist, it is created
            via Directory.CreateDirecctory.
            </para>
            </remarks>
            <param name="filename"></param>
            <param name="append"></param>
            <param name="fileShare"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseStream(System.IO.Stream)">
            <summary>
            Helper method to close <paramref name="stream" /> under CurrentAppender's SecurityContext.
            </summary>
            <remarks>
            Does not set <paramref name="stream" /> to null.
            </remarks>
            <param name="stream"></param>
        </member>
        <member name="T:log4net.Appender.FileAppender.ExclusiveLock">
            <summary>
            Hold an exclusive lock on the output file
            </summary>
            <remarks>
                <para>
            Open the file once for writing and hold it open until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile" /> is called. 
            Maintains an exclusive lock on the file during this time.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the file specified and prepare for logging.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
                <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
                <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
                <para>
            Does nothing. The lock is already taken
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
                <para>
            Does nothing. The lock will be released when the file is closed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.ExclusiveLock.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="T:log4net.Appender.FileAppender.MinimalLock">
            <summary>
            Acquires the file lock for each write
            </summary>
            <remarks>
                <para>
            Opens the file once for each <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" />/<see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" /> cycle, 
            thus holding the lock for the minimal amount of time. This method of locking
            is considerably slower than <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> but allows 
            other processes to move/delete the log file whilst logging continues.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Prepares to open the file when the first message is logged.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
                <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.MinimalLock.CloseFile" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
                <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
                <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" />
            must be called to release the lock on the output file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock">
            <summary>
            Release the lock on the file
            </summary>
            <remarks>
                <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" /> is called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.MinimalLock.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="T:log4net.Appender.FileAppender.InterProcessLock">
            <summary>
            Provides cross-process file locking.
            </summary>
            <author>Ron Grabowski</author>
            <author>Steve Wranovsky</author>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Open the file specified and prepare for logging.
            </summary>
            <param name="filename">The filename to use</param>
            <param name="append">Whether to append to the file, or overwrite</param>
            <param name="encoding">The encoding to use</param>
            <remarks>
                <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock" />,
            -<see cref="M:log4net.Appender.FileAppender.InterProcessLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.InterProcessLock.CloseFile" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.CloseFile">
            <summary>
            Close the file
            </summary>
            <remarks>
                <para>
            Close the file. No further writes will be made.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.AcquireLock">
            <summary>
            Acquire the lock on the file
            </summary>
            <returns>A stream that is ready to be written to.</returns>
            <remarks>
                <para>
            Does nothing. The lock is already taken
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.ReleaseLock">
            <summary>
            Releases the lock and allows others to acquire a lock.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.ActivateOptions">
            <summary>
            Initializes all resources used by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.InterProcessLock.OnClose">
            <summary>
            Disposes all resources that were initialized by this locking model.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
            <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <param name="append">flag to indicate if the file should be appended to</param>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
            <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
            <param name="layout">the layout to use with this appender</param>
            <param name="filename">the full path to the file to write to</param>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.File">
            <summary>
            Gets or sets the path to the file that logging will be written to.
            </summary>
            <value>
            The path to the file that logging will be written to.
            </value>
            <remarks>
                <para>
            If the path is relative it is taken as relative from 
            the application base directory.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.AppendToFile">
            <summary>
            Gets or sets a flag that indicates whether the file should be
            appended to or overwritten.
            </summary>
            <value>
            Indicates whether the file should be appended to or overwritten.
            </value>
            <remarks>
                <para>
            If the value is set to false then the file will be overwritten, if 
            it is set to true then the file will be appended to.
            </para>
            The default value is true.
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.Encoding">
            <summary>
            Gets or sets <see cref="P:log4net.Appender.FileAppender.Encoding" /> used to write to the file.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.FileAppender.Encoding" /> used to write to the file.
            </value>
            <remarks>
                <para>
            The default encoding set is <see cref="P:System.Text.Encoding.Default" />
            which is the encoding for the system's current ANSI code page.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> used to write to the file.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> used to write to the file.
            </value>
            <remarks>
                <para>
            Unless a <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.FileAppender.LockingModel">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to handle locking of the file.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to lock the file.
            </value>
            <remarks>
                <para>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to handle locking of the file.
            </para>
                <para>
            There are three built in locking models, <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" />, <see cref="T:log4net.Appender.FileAppender.MinimalLock" /> and <see cref="T:log4net.Appender.FileAppender.InterProcessLock" /> .
            The first locks the file from the start of logging to the end, the 
            second locks only for the minimal amount of time when logging each message
            and the last synchronizes processes using a named system wide Mutex.
            </para>
                <para>
            The default locking model is the <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ActivateOptions">
            <summary>
            Activate the options on the file appender. 
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> must be called again.
            </para>
                <para>
            This will cause the file to be opened.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.Reset">
            <summary>
            Closes any previously opened file and calls the parent's <see cref="M:log4net.Appender.TextWriterAppender.Reset" />.
            </summary>
            <remarks>
                <para>
            Resets the filename and the file stream.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.OnClose">
            <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            </summary>
        </member>
        <member name="M:log4net.Appender.FileAppender.PrepareWriter">
            <summary>
            Called to initialize the file writer
            </summary>
            <remarks>
                <para>
            Will be called for each logged message until the file is
            successfully opened.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" />
            method. 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent[])" />
            method. 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
                <para>
            Acquires the output file locks once before writing all the events to
            the stream.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.WriteFooter">
            <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </summary>
            <remarks>
                <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.WriteHeader">
            <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </summary>
            <remarks>
                <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.CloseWriter">
            <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
            <remarks>
                <para>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.CloseFile">
            <summary>
            Closes the previously opened file.
            </summary>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Layout.ILayout.Footer" /> to the file and then
            closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.SafeOpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
            <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
            <remarks>
                <para>
            Calls <see cref="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)" /> but guarantees not to throw an exception.
            Errors are passed to the <see cref="P:log4net.Appender.TextWriterAppender.ErrorHandler" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
            <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
            <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
            <remarks>
                <para>
            If there was already an opened file, then the previous file
            is closed first.
            </para>
                <para>
            This method will ensure that the directory structure
            for the <paramref name="fileName" /> specified exists.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.Stream)">
            <summary>
            Sets the quiet writer used for file output
            </summary>
            <param name="fileStream">the file stream that has been opened for writing</param>
            <remarks>
                <para>
            This implementation of <see cref="M:SetQWForFiles(Stream)" /> creates a <see cref="T:System.IO.StreamWriter" />
            over the <paramref name="fileStream" /> and passes it to the 
            <see cref="M:SetQWForFiles(TextWriter)" /> method.
            </para>
                <para>
            This method can be overridden by sub classes that want to wrap the
            <see cref="T:System.IO.Stream" /> in some way, for example to encrypt the output
            data using a <c>System.Security.Cryptography.CryptoStream</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <param name="writer">the writer over the file stream that has been opened for writing</param>
            <remarks>
                <para>
            This method can be overridden by sub classes that want to
            wrap the <see cref="T:System.IO.TextWriter" /> in some way.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.FileAppender.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
                <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_appendToFile">
            <summary>
            Flag to indicate if we should append to the file
            or overwrite the file. The default is to append.
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_fileName">
            <summary>
            The name of the log file.
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_encoding">
            <summary>
            The encoding to use for the file stream.
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_stream">
            <summary>
            The stream to log to. Has added locking semantics
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.m_lockingModel">
            <summary>
            The locking model to use
            </summary>
        </member>
        <member name="F:log4net.Appender.FileAppender.declaringType">
            <summary>
            The fully qualified type of the FileAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Appender.ForwardingAppender">
            <summary>
            This appender forwards logging events to attached appenders.
            </summary>
            <remarks>
                <para>
            The forwarding appender can be used to specify different thresholds
            and filters for the same appender at different locations within the hierarchy.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ForwardingAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.OnClose">
            <summary>
            Closes the appender and releases resources.
            </summary>
            <remarks>
                <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
                <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Forward the logging event to the attached appenders 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Delivers the logging event to all the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Forward the logging events to the attached appenders 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
                <para>
            Delivers the logging events to all the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
            <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
            <remarks>
                <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ForwardingAppender.Appenders">
            <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
            <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection" /> 
            is returned.
            </remarks>
            <returns>
            A collection of the appenders in this appender.
            </returns>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.GetAppender(System.String)">
            <summary>
            Looks for the appender with the specified name.
            </summary>
            <param name="name">The name of the appender to lookup.</param>
            <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
            <remarks>
                <para>
            Get the named appender attached to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.RemoveAllAppenders">
            <summary>
            Removes all previously added appenders from this appender.
            </summary>
            <remarks>
                <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
        </member>
        <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
        </member>
        <member name="F:log4net.Appender.ForwardingAppender.m_appenderAttachedImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
        </member>
        <member name="T:log4net.Appender.IAppender">
            <summary>
            Implement this interface for your own strategies for printing log statements.
            </summary>
            <remarks>
                <para>
            Implementors should consider extending the <see cref="T:log4net.Appender.AppenderSkeleton" />
            class which provides a default implementation of this interface.
            </para>
                <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:IOptionHandler.ActivateOptions()" /> method
            be called after the appenders properties have been configured.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.IAppender.Close">
            <summary>
            Closes the appender and releases resources.
            </summary>
            <remarks>
                <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
                <para>
            It is a programming error to append to a closed appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)">
            <summary>
            Log the logging event in Appender specific way.
            </summary>
            <param name="loggingEvent">The event to log</param>
            <remarks>
                <para>
            This method is called to log a message into this appender.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.IAppender.Name">
            <summary>
            Gets or sets the name of this appender.
            </summary>
            <value>The name of the appender.</value>
            <remarks>
                <para>The name uniquely identifies the appender.</para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.IBulkAppender">
            <summary>
            Interface for appenders that support bulk logging.
            </summary>
            <remarks>
                <para>
            This interface extends the <see cref="T:log4net.Appender.IAppender" /> interface to
            support bulk logging of <see cref="T:log4net.Core.LoggingEvent" /> objects. Appenders
            should only implement this interface if they can bulk log efficiently.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.IBulkAppender.DoAppend(log4net.Core.LoggingEvent[])">
            <summary>
            Log the array of logging events in Appender specific way.
            </summary>
            <param name="loggingEvents">The events to log</param>
            <remarks>
                <para>
            This method is called to log an array of events into this appender.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.IFlushable">
            <summary>
            Interface that can be implemented by Appenders that buffer logging data and expose a <see cref="M:log4net.Appender.IFlushable.Flush(System.Int32)" /> method.
            </summary>
        </member>
        <member name="M:log4net.Appender.IFlushable.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <remarks>
            Appenders that implement the <see cref="M:log4net.Appender.IFlushable.Flush(System.Int32)" /> method must do so in a thread-safe manner: it can be called concurrently with
            the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method.
            <para>
            Typically this is done by locking on the Appender instance, e.g.:
            <code><![CDATA[
            public bool Flush(int millisecondsTimeout)
            {
                lock(this)
                {
                    // Flush buffered logging data
                    ...
                }
            }
            ]]></code></para><para>
            The <paramref name="millisecondsTimeout" /> parameter is only relevant for appenders that process logging events asynchronously,
            such as <see cref="T:log4net.Appender.RemotingAppender" />.
            </para></remarks>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender">
            <summary>
            Logs events to a local syslog service.
            </summary>
            <remarks>
                <note>
            This appender uses the POSIX libc library functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c>.
            If these functions are not available on the local system then this appender will not work!
            </note>
                <para>
            The functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c> are specified in SUSv2 and 
            POSIX 1003.1-2001 standards. These are used to log messages to the local syslog service.
            </para>
                <para>
            This appender talks to a local syslog service. If you need to log to a remote syslog
            daemon and you cannot configure your local syslog service to do this you may be
            able to use the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> to log via UDP.
            </para>
                <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility" /> values. The facilities list is predefined
            and cannot be extended.
            </para>
                <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName" />).
            </para>
            </remarks>
            <author>Rob Lyon</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender.SyslogSeverity">
            <summary>
            syslog severities
            </summary>
            <remarks>
                <para>
            The log4net Level maps to a syslog severity using the
            <see cref="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)" /> method and the <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity" />
            class. The severity is set on <see cref="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Emergency">
            <summary>
            system is unusable
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Alert">
            <summary>
            action must be taken immediately
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Critical">
            <summary>
            critical conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Error">
            <summary>
            error conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Warning">
            <summary>
            warning conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Notice">
            <summary>
            normal but significant condition
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Informational">
            <summary>
            informational
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogSeverity.Debug">
            <summary>
            debug-level messages
            </summary>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender.SyslogFacility">
            <summary>
            syslog facilities
            </summary>
            <remarks>
                <para>
            The syslog facility defines which subsystem the logging comes from.
            This is set on the <see cref="P:log4net.Appender.LocalSyslogAppender.Facility" /> property.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Kernel">
            <summary>
            kernel messages
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User">
            <summary>
            random user-level messages
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Mail">
            <summary>
            mail system
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Daemons">
            <summary>
            system daemons
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Authorization">
            <summary>
            security/authorization messages
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Syslog">
            <summary>
            messages generated internally by syslogd
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Printer">
            <summary>
            line printer subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.News">
            <summary>
            network news subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Uucp">
            <summary>
            UUCP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Clock">
            <summary>
            clock (cron/at) daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Authorization2">
            <summary>
            security/authorization  messages (private)
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Ftp">
            <summary>
            ftp daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Ntp">
            <summary>
            NTP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Audit">
            <summary>
            log audit
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Alert">
            <summary>
            log alert
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Clock2">
            <summary>
            clock daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local0">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local1">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local2">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local3">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local4">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local5">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local6">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.Local7">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class.
            </summary>
            <remarks>
            This instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class is set up to write 
            to a local syslog service.
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.Identity">
            <summary>
            Message identity
            </summary>
            <remarks>
                <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName" />).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.Facility">
            <summary>
            Syslog facility
            </summary>
            <remarks>
            Set to one of the <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility" /> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User" />.
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)">
            <summary>
            Add a mapping of level to severity
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
                <para>
            Adds a <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity" /> to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the event to a remote syslog daemon.
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.OnClose">
            <summary>
            Close the syslog when the appender is closed
            </summary>
            <remarks>
                <para>
            Close the syslog when the appender is closed
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.GetSeverity(log4net.Core.Level)">
            <summary>
            Translates a log4net level to a syslog severity.
            </summary>
            <param name="level">A log4net level.</param>
            <returns>A syslog severity.</returns>
            <remarks>
                <para>
            Translates a log4net level to a syslog severity.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.GeneratePriority(log4net.Appender.LocalSyslogAppender.SyslogFacility,log4net.Appender.LocalSyslogAppender.SyslogSeverity)">
            <summary>
            Generate a syslog priority.
            </summary>
            <param name="facility">The syslog facility.</param>
            <param name="severity">The syslog severity.</param>
            <returns>A syslog priority.</returns>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_facility">
            <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User" />.
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_identity">
            <summary>
            The message identity
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_handleToIdentity">
            <summary>
            Marshaled handle to the identity string. We have to hold on to the
            string as the <c>openlog</c> and <c>syslog</c> APIs just hold the
            pointer to the ident and dereference it for each log message.
            </summary>
        </member>
        <member name="F:log4net.Appender.LocalSyslogAppender.m_levelMapping">
            <summary>
            Mapping from level object to syslog severity
            </summary>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender.SyslogFacility)">
            <summary>
            Open connection to system logger.
            </summary>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.syslog(System.Int32,System.String,System.String)">
            <summary>
            Generate a log message.
            </summary>
            <remarks>
                <para>
            The libc syslog method takes a format string and a variable argument list similar
            to the classic printf function. As this type of vararg list is not supported
            by C# we need to specify the arguments explicitly. Here we have specified the
            format string with a single message argument. The caller must set the format 
            string to <c>"%s"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.LocalSyslogAppender.closelog">
            <summary>
            Close descriptor used to write to system logger.
            </summary>
        </member>
        <member name="T:log4net.Appender.LocalSyslogAppender.LevelSeverity">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
            <remarks>
                <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity">
            <summary>
            The mapped syslog severity for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.ManagedColoredConsoleAppender">
            <summary>
            Appends colorful logging events to the console, using the .NET 2
            built-in capabilities.
            </summary>
            <remarks>
                <para>
            ManagedColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
                <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
                <para>
            When configuring the colored console appender, mappings should be
            specified to map logging levels to colors. For example:
            </para>
                <code lang="XML" escaped="true">
                    <mapping>
                        <level value="ERROR" />
                        <foreColor value="DarkRed" />
                        <backColor value="White" />
                    </mapping>
                    <mapping>
                        <level value="WARN" />
                        <foreColor value="Yellow" />
                    </mapping>
                    <mapping>
                        <level value="INFO" />
                        <foreColor value="White" />
                    </mapping>
                    <mapping>
                        <level value="DEBUG" />
                        <foreColor value="Blue" />
                    </mapping>
                </code>
                <para>
            The Level is the standard log4net logging level while
            ForeColor and BackColor are the values of <see cref="T:System.ConsoleColor" />
            enumeration.
            </para>
                <para>
            Based on the ColoredConsoleAppender
            </para>
            </remarks>
            <author>Rick Hobbs</author>
            <author>Nicko Cadell</author>
            <author>Pavlos Touboulidis</author>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ManagedColoredConsoleAppender" /> class.
            </summary>
            <remarks>
            The instance of the <see cref="T:log4net.Appender.ManagedColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.Target">
            <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
            <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
            <remarks>
                <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.AddMapping(log4net.Appender.ManagedColoredConsoleAppender.LevelColors)">
            <summary>
            Add a mapping of level to color - done by the config file
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
                <para>
            Add a <see cref="T:log4net.Appender.ManagedColoredConsoleAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the event to the console.
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.ManagedColoredConsoleAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
                <para>
            Initialize the level to color mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.ConsoleOut">
            <summary>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.ConsoleError">
            <summary>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.ManagedColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.m_writeToErrorStream">
            <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
        </member>
        <member name="F:log4net.Appender.ManagedColoredConsoleAppender.m_levelMapping">
            <summary>
            Mapping from level object to color value
            </summary>
        </member>
        <member name="T:log4net.Appender.ManagedColoredConsoleAppender.LevelColors">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
            <remarks>
                <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.LevelColors.ForeColor">
            <summary>
            The mapped foreground color for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.ManagedColoredConsoleAppender.LevelColors.BackColor">
            <summary>
            The mapped background color for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped background color for the specified level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.MemoryAppender">
            <summary>
            Stores logging events in an array.
            </summary>
            <remarks>
                <para>
            The memory appender stores all the logging events
            that are appended in an in-memory array.
            </para>
                <para>
            Use the <see cref="M:PopAllEvents()" /> method to get
            and clear the current list of events that have been appended.
            </para>
                <para>
            Use the <see cref="M:GetEvents()" /> method to get the current
            list of events that have been appended.  Note there is a
            race-condition when calling <see cref="M:GetEvents()" /> and
            <see cref="M:Clear()" /> in pairs, you better use <see mref="M:PopAllEvents()" /> in that case.
            </para>
                <para>
            Use the <see cref="M:Clear()" /> method to clear the
            current list of events.  Note there is a
            race-condition when calling <see cref="M:GetEvents()" /> and
            <see cref="M:Clear()" /> in pairs, you better use <see mref="M:PopAllEvents()" /> in that case.
            </para>
            </remarks>
            <author>Julian Biddle</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.MemoryAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.GetEvents">
            <summary>
            Gets the events that have been logged.
            </summary>
            <returns>The events that have been logged</returns>
            <remarks>
                <para>
            Gets the events that have been logged.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.MemoryAppender.OnlyFixPartialEventData">
            <summary>
            Gets or sets a value indicating whether only part of the logging event 
            data should be fixed.
            </summary>
            <value>
                <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
            <remarks>
                <para>
            Setting this property to <c>true</c> will cause only part of the event 
            data to be fixed and stored in the appender, hereby improving performance. 
            </para>
                <para>
            See <see cref="M:LoggingEvent.FixVolatileData(bool)" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.MemoryAppender.Fix">
            <summary>
            Gets or sets the fields that will be fixed in the event
            </summary>
            <remarks>
                <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix" />
            for details.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method. 
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
                <para>Stores the <paramref name="loggingEvent" /> in the events list.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.Clear">
            <summary>
            Clear the list of events
            </summary>
            <remarks>
            Clear the list of events
            </remarks>
        </member>
        <member name="M:log4net.Appender.MemoryAppender.PopAllEvents">
            <summary>
            Gets the events that have been logged and clears the list of events.
            </summary>
            <returns>The events that have been logged</returns>
            <remarks>
                <para>
            Gets the events that have been logged and clears the list of events.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.MemoryAppender.m_eventsList">
            <summary>
            The list of events that have been appended.
            </summary>
        </member>
        <member name="F:log4net.Appender.MemoryAppender.m_fixFlags">
            <summary>
            Value indicating which fields in the event should be fixed
            </summary>
            <remarks>
            By default all fields are fixed
            </remarks>
        </member>
        <member name="T:log4net.Appender.NetSendAppender">
            <summary>
            Logs entries by sending network messages using the 
            <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> native function.
            </summary>
            <remarks>
                <para>
            You can send messages only to names that are active 
            on the network. If you send the message to a user name, 
            that user must be logged on and running the Messenger 
            service to receive the message.
            </para>
                <para>
            The receiver will get a top most window displaying the 
            messages one at a time, therefore this appender should 
            not be used to deliver a high volume of messages.
            </para>
                <para>
            The following table lists some possible uses for this appender :
            </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Action</term>
                            <description>Property Value(s)</description>
                        </listheader>
                        <item>
                            <term>Send a message to a user account on the local machine</term>
                            <description>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of the local machine&gt;
                        </para>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;user name&gt;
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>Send a message to a user account on a remote machine</term>
                            <description>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of the remote machine&gt;
                        </para>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;user name&gt;
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>Send a message to a domain user account</term>
                            <description>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of a domain controller | uninitialized&gt;
                        </para>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;user name&gt;
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>Send a message to all the names in a workgroup or domain</term>
                            <description>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;workgroup name | domain name&gt;*
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>Send a message from the local machine to a remote machine</term>
                            <description>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Server" /> = &lt;name of the local machine | uninitialized&gt;
                        </para>
                                <para>
                                    <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> = &lt;name of the remote machine&gt;
                        </para>
                            </description>
                        </item>
                    </list>
                </para>
                <para>
                    <b>Note :</b> security restrictions apply for sending 
            network messages, see <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> 
            for more information.
            </para>
            </remarks>
            <example>
                <para>
            An example configuration section to log information 
            using this appender from the local machine, named 
            LOCAL_PC, to machine OPERATOR_PC :
            </para>
                <code lang="XML" escaped="true">
                    <appender name="NetSendAppender_Operator" type="log4net.Appender.NetSendAppender">
                        <server value="LOCAL_PC" />
                        <recipient value="OPERATOR_PC" />
                        <layout type="log4net.Layout.PatternLayout" value="%-5p %c [%x] - %m%n" />
                    </appender>
                </code>
            </example>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_server">
            <summary>
            The DNS or NetBIOS name of the server on which the function is to execute.
            </summary>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_sender">
            <summary>
            The sender of the network message.
            </summary>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_recipient">
            <summary>
            The message alias to which the message should be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.NetSendAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.#ctor">
            <summary>
            Initializes the appender.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.Sender">
            <summary>
            Gets or sets the sender of the message.
            </summary>
            <value>
            The sender of the message.
            </value>
            <remarks>
            If this property is not specified, the message is sent from the local computer.
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.Recipient">
            <summary>
            Gets or sets the message alias to which the message should be sent.
            </summary>
            <value>
            The recipient of the message.
            </value>
            <remarks>
            This property should always be specified in order to send a message.
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.Server">
            <summary>
            Gets or sets the DNS or NetBIOS name of the remote server on which the function is to execute.
            </summary>
            <value>
            DNS or NetBIOS name of the remote server on which the function is to execute.
            </value>
            <remarks>
                <para>
            For Windows NT 4.0 and earlier, the string should begin with \\.
            </para>
                <para>
            If this property is not specified, the local computer is used. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> used to call the NetSend method.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> used to call the NetSend method.
            </value>
            <remarks>
                <para>
            Unless a <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> must be called again.
            </para>
                <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was specified.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was not specified.</exception>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Sends the event using a network message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.NetSendAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends a buffer of information to a registered message alias.
            </summary>
            <param name="serverName">The DNS or NetBIOS name of the server on which the function is to execute.</param>
            <param name="msgName">The message alias to which the message buffer should be sent</param>
            <param name="fromName">The originator of the message.</param>
            <param name="buffer">The message text.</param>
            <param name="bufferSize">The length, in bytes, of the message text.</param>
            <remarks>
                <para>
            The following restrictions apply for sending network messages:
            </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Platform</term>
                            <description>Requirements</description>
                        </listheader>
                        <item>
                            <term>Windows NT</term>
                            <description>
                                <para>
                        No special group membership is required to send a network message.
                        </para>
                                <para>
                        Admin, Accounts, Print, or Server Operator group membership is required to 
                        successfully send a network message on a remote server.
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>Windows 2000 or later</term>
                            <description>
                                <para>
                        If you send a message on a domain controller that is running Active Directory, 
                        access is allowed or denied based on the access control list (ACL) for the securable 
                        object. The default ACL permits only Domain Admins and Account Operators to send a network message. 
                        </para>
                                <para>
                        On a member server or workstation, only Administrators and Server Operators can send a network message. 
                        </para>
                            </description>
                        </item>
                    </list>
                </para>
                <para>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/netmgmt/netmgmt/security_requirements_for_the_network_management_functions.asp">Security Requirements for the Network Management Functions</a>.
            </para>
            </remarks>
            <returns>
                <para>
            If the function succeeds, the return value is zero.
            </para>
            </returns>
        </member>
        <member name="T:log4net.Appender.OutputDebugStringAppender">
            <summary>
            Appends log events to the OutputDebugString system.
            </summary>
            <remarks>
                <para>
            OutputDebugStringAppender appends log events to the
            OutputDebugString system.
            </para>
                <para>
            The string is passed to the native <c>OutputDebugString</c> 
            function.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.OutputDebugStringAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write the logging event to the output debug string API
            </summary>
            <param name="loggingEvent">the event to log</param>
            <remarks>
                <para>
            Write the logging event to the output debug string API
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.OutputDebugStringAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.OutputDebugStringAppender.OutputDebugString(System.String)">
            <summary>
            Stub for OutputDebugString native method
            </summary>
            <param name="message">the string to output</param>
            <remarks>
                <para>
            Stub for OutputDebugString native method
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender">
            <summary>
            Logs events to a remote syslog daemon.
            </summary>
            <remarks>
                <para>
            The BSD syslog protocol is used to remotely log to
            a syslog daemon. The syslogd listens for for messages
            on UDP port 514.
            </para>
                <para>
            The syslog UDP protocol is not authenticated. Most syslog daemons
            do not accept remote log messages because of the security implications.
            You may be able to use the LocalSyslogAppender to talk to a local
            syslog service.
            </para>
                <para>
            There is an RFC 3164 that claims to document the BSD Syslog Protocol.
            This RFC can be seen here: http://www.faqs.org/rfcs/rfc3164.html.
            This appender generates what the RFC calls an "Original Device Message",
            i.e. does not include the TIMESTAMP or HOSTNAME fields. By observation
            this format of message will be accepted by all current syslog daemon
            implementations. The daemon will attach the current time and the source
            hostname or IP address to any messages received.
            </para>
                <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility" /> values. The facilities list is predefined
            and cannot be extended.
            </para>
                <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain" />).
            </para>
            </remarks>
            <author>Rob Lyon</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.DefaultSyslogPort">
            <summary>
            Syslog port 514
            </summary>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogSeverity">
            <summary>
            syslog severities
            </summary>
            <remarks>
                <para>
            The syslog severities.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Emergency">
            <summary>
            system is unusable
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Alert">
            <summary>
            action must be taken immediately
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Critical">
            <summary>
            critical conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Error">
            <summary>
            error conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Warning">
            <summary>
            warning conditions
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Notice">
            <summary>
            normal but significant condition
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Informational">
            <summary>
            informational
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogSeverity.Debug">
            <summary>
            debug-level messages
            </summary>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility">
            <summary>
            syslog facilities
            </summary>
            <remarks>
                <para>
            The syslog facilities
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Kernel">
            <summary>
            kernel messages
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User">
            <summary>
            random user-level messages
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Mail">
            <summary>
            mail system
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Daemons">
            <summary>
            system daemons
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Authorization">
            <summary>
            security/authorization messages
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Syslog">
            <summary>
            messages generated internally by syslogd
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Printer">
            <summary>
            line printer subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.News">
            <summary>
            network news subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Uucp">
            <summary>
            UUCP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Clock">
            <summary>
            clock (cron/at) daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Authorization2">
            <summary>
            security/authorization  messages (private)
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Ftp">
            <summary>
            ftp daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Ntp">
            <summary>
            NTP subsystem
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Audit">
            <summary>
            log audit
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Alert">
            <summary>
            log alert
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Clock2">
            <summary>
            clock daemon
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local0">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local1">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local2">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local3">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local4">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local5">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local6">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.Local7">
            <summary>
            reserved for local use
            </summary>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class.
            </summary>
            <remarks>
            This instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class is set up to write 
            to a remote syslog daemon.
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemoteSyslogAppender.Identity">
            <summary>
            Message identity
            </summary>
            <remarks>
                <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain" />).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemoteSyslogAppender.Facility">
            <summary>
            Syslog facility
            </summary>
            <remarks>
            Set to one of the <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility" /> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User" />.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.AddMapping(log4net.Appender.RemoteSyslogAppender.LevelSeverity)">
            <summary>
            Add a mapping of level to severity
            </summary>
            <param name="mapping">The mapping to add</param>
            <remarks>
                <para>
            Add a <see cref="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity" /> mapping to this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the event to a remote syslog daemon.
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.ActivateOptions">
            <summary>
            Initialize the options for this appender
            </summary>
            <remarks>
                <para>
            Initialize the level to syslog severity mappings set on this appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.GetSeverity(log4net.Core.Level)">
            <summary>
            Translates a log4net level to a syslog severity.
            </summary>
            <param name="level">A log4net level.</param>
            <returns>A syslog severity.</returns>
            <remarks>
                <para>
            Translates a log4net level to a syslog severity.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemoteSyslogAppender.GeneratePriority(log4net.Appender.RemoteSyslogAppender.SyslogFacility,log4net.Appender.RemoteSyslogAppender.SyslogSeverity)">
            <summary>
            Generate a syslog priority.
            </summary>
            <param name="facility">The syslog facility.</param>
            <param name="severity">The syslog severity.</param>
            <returns>A syslog priority.</returns>
            <remarks>
                <para>
            Generate a syslog priority.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.m_facility">
            <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User" />.
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.m_identity">
            <summary>
            The message identity
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.m_levelMapping">
            <summary>
            Mapping from level object to syslog severity
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.c_renderBufferSize">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Appender.RemoteSyslogAppender.c_renderBufferMaxCapacity">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity">
            <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
            <remarks>
                <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemoteSyslogAppender.LevelSeverity.Severity">
            <summary>
            The mapped syslog severity for the specified level
            </summary>
            <remarks>
                <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RemotingAppender">
            <summary>
            Delivers logging events to a remote logging sink. 
            </summary>
            <remarks>
                <para>
            This Appender is designed to deliver events to a remote sink. 
            That is any object that implements the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            interface. It delivers the events using .NET remoting. The
            object to deliver events to is specified by setting the
            appenders <see cref="P:log4net.Appender.RemotingAppender.Sink" /> property.</para>
                <para>
            The RemotingAppender buffers events before sending them. This allows it to 
            make more efficient use of the remoting infrastructure.</para>
                <para>
            Once the buffer is full the events are still not sent immediately. 
            They are scheduled to be sent using a pool thread. The effect is that 
            the send occurs asynchronously. This is very important for a 
            number of non obvious reasons. The remoting infrastructure will 
            flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool" />
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool" /> thread is available then
            the events will block in the thread pool manager until a thread is available.</para>
                <para>
            Because the events are sent asynchronously using pool threads it is possible to close 
            this appender before all the queued events have been sent.
            When closing the appender attempts to wait until all the queued events have been sent, but 
            this will timeout after 30 seconds regardless.</para>
                <para>
            If this appender is being closed because the <see cref="E:System.AppDomain.ProcessExit" />
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit" />
            event handler is allowed to run for. If the runtime terminates the threads before
            the queued events have been sent then they will be lost. To ensure that all events
            are sent the appender must be closed before the application exits. See 
            <see cref="M:log4net.Core.LoggerManager.Shutdown" /> for details on how to shutdown
            log4net programmatically.</para>
            </remarks>
            <seealso cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemotingAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RemotingAppender.Sink">
            <summary>
            Gets or sets the URL of the well-known object that will accept 
            the logging events.
            </summary>
            <value>
            The well-known URL of the remote sink.
            </value>
            <remarks>
                <para>
            The URL of the remoting sink that will accept logging events.
            The sink must implement the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            interface.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
            <remarks>
            The events are not sent immediately. They are scheduled to be sent
            using a pool thread. The effect is that the send occurs asynchronously.
            This is very important for a number of non obvious reasons. The remoting
            infrastructure will flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool" />
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool" /> thread is available then
            the events will block in the thread pool manager until a thread is available.
            </remarks>
            <param name="events">The events to send.</param>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.OnClose">
            <summary>
            Override base class close.
            </summary>
            <remarks>
                <para>
            This method waits while there are queued work items. The events are
            sent asynchronously using <see cref="T:System.Threading.ThreadPool" /> work items. These items
            will be sent once a thread pool thread is available to send them, therefore
            it is possible to close the appender before all the queued events have been
            sent.</para>
                <para>
            This method attempts to wait until all the queued events have been sent, but this 
            method will timeout after 30 seconds regardless.</para>
                <para>
            If the appender is being closed because the <see cref="E:System.AppDomain.ProcessExit" />
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit" />
            event handler is allowed to run for.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.BeginAsyncSend">
            <summary>
            A work item is being queued into the thread pool
            </summary>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.EndAsyncSend">
            <summary>
            A work item from the thread pool has completed
            </summary>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.SendBufferCallback(System.Object)">
            <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
            <remarks>
            This method is designed to be used with the <see cref="T:System.Threading.ThreadPool" />.
            This method expects to be passed an array of <see cref="T:log4net.Core.LoggingEvent" />
            objects in the state param.
            </remarks>
            <param name="state">the logging events to send</param>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_sinkUrl">
            <summary>
            The URL of the remote sink.
            </summary>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_sinkObj">
            <summary>
            The local proxy (.NET remoting) for the remote logging sink.
            </summary>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_queuedCallbackCount">
            <summary>
            The number of queued callbacks currently waiting or executing
            </summary>
        </member>
        <member name="F:log4net.Appender.RemotingAppender.m_workQueueEmptyEvent">
            <summary>
            Event used to signal when there are no queued work items
            </summary>
            <remarks>
            This event is set when there are no queued work items. In this
            state it is safe to close the appender.
            </remarks>
        </member>
        <member name="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink">
            <summary>
            Interface used to deliver <see cref="T:log4net.Core.LoggingEvent" /> objects to a remote sink.
            </summary>
            <remarks>
            This interface must be implemented by a remoting sink
            if the <see cref="T:log4net.Appender.RemotingAppender" /> is to be used
            to deliver logging events to the sink.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(log4net.Core.LoggingEvent[])">
            <summary>
            Delivers logging events to the remote sink
            </summary>
            <param name="events">Array of events to log.</param>
            <remarks>
                <para>
            Delivers logging events to the remote sink
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender">
            <summary>
            Appender that rolls log files based on size or date or both.
            </summary>
            <remarks>
                <para>
            RollingFileAppender can roll log files based on size or date or both
            depending on the setting of the <see cref="P:log4net.Appender.RollingFileAppender.RollingStyle" /> property.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Size" /> the log file will be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" />.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Date" /> the log file will be rolled
            once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern" /> property
            is crossed.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" /> the log file will be
            rolled once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern" /> property
            is crossed, but within a date boundary the file will also be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" />.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once" /> the log file will be rolled when
            the appender is configured. This effectively means that the log file can be
            rolled once per program execution.
            </para>
                <para>
            A of few additional optional features have been added:
            <list type="bullet"><item>Attach date pattern for current log file <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /></item><item>Backup number increments for newer files <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /></item><item>Infinite number of backups by file size <see cref="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups" /></item></list></para>
                <note>
                    <para>
            For large or infinite numbers of backup files a <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> 
            greater than zero is highly recommended, otherwise all the backup files need
            to be renamed each time a new backup is created.
            </para>
                    <para>
            When Date/Time based rolling is used setting <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> 
            to <see langword="true" /> will reduce the number of file renamings to few or none.
            </para>
                </note>
                <note type="caution">
                    <para>
            Changing <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> or <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> without clearing
            the log file directory of backup files will cause unexpected and unwanted side effects.  
            </para>
                </note>
                <para>
            If Date/Time based rolling is enabled this appender will attempt to roll existing files
            in the directory without a Date/Time tag based on the last write date of the base log file.
            The appender only rolls the log file when a message is logged. If Date/Time based rolling 
            is enabled then the appender will not roll the log file at the Date/Time boundary but
            at the point when the next message is logged after the boundary has been crossed.
            </para>
                <para>
            The <see cref="T:log4net.Appender.RollingFileAppender" /> extends the <see cref="T:log4net.Appender.FileAppender" /> and
            has the same behavior when opening the log file.
            The appender will first try to open the file for writing when <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
                <para>
            When rolling a backup file necessitates deleting an older backup file the
            file to be deleted is moved to a temporary name before being deleted.
            </para>
                <note type="caution">
                    <para>
            A maximum number of backup files when rolling on date/time boundaries is not supported.
            </para>
                </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
            <author>Edward Smit</author>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollingMode">
            <summary>
            Style of rolling to use
            </summary>
            <remarks>
                <para>
            Style of rolling to use
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Once">
            <summary>
            Roll files once per program execution
            </summary>
            <remarks>
                <para>
            Roll files once per program execution.
            Well really once each time this appender is
            configured.
            </para>
                <para>
            Setting this option also sets <c>AppendToFile</c> to
            <c>false</c> on the <c>RollingFileAppender</c>, otherwise
            this appender would just be a normal file appender.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Size">
            <summary>
            Roll files based only on the size of the file
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Date">
            <summary>
            Roll files based only on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollingMode.Composite">
            <summary>
            Roll files based on both the size and date of the file
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.RollPoint">
            <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
            <remarks>
                <para>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.InvalidRollPoint">
            <summary>
            Roll the log not based on the date
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfMinute">
            <summary>
            Roll the log for each minute
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfHour">
            <summary>
            Roll the log for each hour
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.HalfDay">
            <summary>
            Roll the log twice a day (midday and midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfDay">
            <summary>
            Roll the log each day (midnight)
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfWeek">
            <summary>
            Roll the log each week
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.RollPoint.TopOfMonth">
            <summary>
            Roll the log each month
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RollingFileAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.Finalize">
            <summary>
            Cleans up all resources used by this appender.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.DateTimeStrategy">
            <summary>
            Gets or sets the strategy for determining the current date and time. The default
            implementation is to use LocalDateTime which internally calls through to DateTime.Now. 
            DateTime.UtcNow may be used on frameworks newer than .NET 1.0 by specifying
            <see cref="T:log4net.Appender.RollingFileAppender.UniversalDateTime" />.
            </summary>
            <value>
            An implementation of the <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> interface which returns the current date and time.
            </value>
            <remarks>
                <para>
            Gets or sets the <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> used to return the current date and time.
            </para>
                <para>
            There are two built strategies for determining the current date and time, 
            <see cref="T:log4net.Appender.RollingFileAppender.LocalDateTime" />
            and <see cref="T:log4net.Appender.RollingFileAppender.UniversalDateTime" />.
            </para>
                <para>
            The default strategy is <see cref="T:log4net.Appender.RollingFileAppender.LocalDateTime" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.DatePattern">
            <summary>
            Gets or sets the date pattern to be used for generating file names
            when rolling over on date.
            </summary>
            <value>
            The date pattern to be used for generating file names when rolling 
            over on date.
            </value>
            <remarks>
                <para>
            Takes a string in the same format as expected by 
            <see cref="T:log4net.DateFormatter.SimpleDateFormatter" />.
            </para>
                <para>
            This property determines the rollover schedule when rolling over
            on date.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Gets or sets the maximum number of backup files that are kept before
            the oldest is erased.
            </summary>
            <value>
            The maximum number of backup files that are kept before the oldest is
            erased.
            </value>
            <remarks>
                <para>
            If set to zero, then there will be no backup files and the log file 
            will be truncated when it reaches <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize" />.  
            </para>
                <para>
            If a negative number is supplied then no deletions will be made.  Note 
            that this could result in very slow performance as a large number of 
            files are rolled over unless <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> is used.
            </para>
                <para>
            The maximum applies to <b>each</b> time based group of files and 
            <b>not</b> the total.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaxFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
                <para>
            This property is equivalent to <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" /> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64" /> argument from the setter taking a <see cref="T:System.String" /> 
            argument.
            </para>
                <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.MaximumFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
                <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
                <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
                <para>
            The default maximum file size is 10MB.
            </para>
                <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize" /> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.CountDirection">
            <summary>
            Gets or sets the rolling file count direction. 
            </summary>
            <value>
            The rolling file count direction.
            </value>
            <remarks>
                <para>
            Indicates if the current file is the lowest numbered file or the
            highest numbered file.
            </para>
                <para>
            By default newer files have lower numbers (<see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &lt; 0),
            i.e. log.1 is most recent, log.5 is the 5th backup, etc...
            </para>
                <para>
                    <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 does the opposite i.e.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 to reduce 
            rollover costs.
            </para>
                <para>The default file count direction is -1.</para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.RollingStyle">
            <summary>
            Gets or sets the rolling style.
            </summary>
            <value>The rolling style.</value>
            <remarks>
                <para>
            The default rolling style is <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" />.
            </para>
                <para>
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once" /> this appender's
            <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property is set to <c>false</c>, otherwise
            the appender would append to a single file rather than rolling
            the file each time it is opened.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.PreserveLogFileNameExtension">
            <summary>
            Gets or sets a value indicating whether to preserve the file name extension when rolling.
            </summary>
            <value>
                <c>true</c> if the file name extension should be preserved.
            </value>
            <remarks>
                <para>
            By default file.log is rolled to file.log.yyyy-MM-dd or file.log.curSizeRollBackup.
            However, under Windows the new file name will loose any program associations as the
            extension is changed. Optionally file.log can be renamed to file.yyyy-MM-dd.log or
            file.curSizeRollBackup.log to maintain any program associations.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.StaticLogFileName">
            <summary>
            Gets or sets a value indicating whether to always log to
            the same file.
            </summary>
            <value>
                <c>true</c> if always should be logged to the same file, otherwise <c>false</c>.
            </value>
            <remarks>
                <para>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formatted datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup).
            </para>
                <para>
            This will make time based rollovers with a large number of backups 
            much faster as the appender it won't have to rename all the backups!
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.declaringType">
            <summary>
            The fully qualified type of the RollingFileAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overridden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write out a logging event.
            </summary>
            <param name="loggingEvent">the event to write to file.</param>
            <remarks>
                <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Write out an array of logging events.
            </summary>
            <param name="loggingEvents">the events to write to file.</param>
            <remarks>
                <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.AdjustFileBeforeAppend">
            <summary>
            Performs any required rolling before outputting the next event
            </summary>
            <remarks>
                <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            Creates and opens the file for logging.  If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" />
            is false then the fully qualified name is determined and used.
            </summary>
            <param name="fileName">the name of the file to open</param>
            <param name="append">true to append to existing file</param>
            <remarks>
                <para>This method will ensure that the directory structure
            for the <paramref name="fileName" /> specified exists.</para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetNextOutputFileName(System.String)">
            <summary>
            Get the current output file name
            </summary>
            <param name="fileName">the base file name</param>
            <returns>the output file name</returns>
            <remarks>
            The output file name is based on the base fileName specified.
            If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> is set then the output 
            file name is the same as the base file passed in. Otherwise
            the output file depends on the date pattern, on the count
            direction or both.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.DetermineCurSizeRollBackups">
            <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetWildcardPatternForFile(System.String)">
            <summary>
            Generates a wildcard pattern that can be used to find all files
            that are similar to the base file name.
            </summary>
            <param name="baseFileName"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetExistingFiles(System.String)">
            <summary>
            Builds a list of filenames for all files matching the base filename plus a file
            pattern.
            </summary>
            <param name="baseFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverIfDateBoundaryCrossing">
            <summary>
            Initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ExistingInit">
            <summary>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />.
            </summary>
            <remarks>
                <para>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />.
            The following is done
            <list type="bullet"><item>determine curSizeRollBackups (only within the current roll point)</item><item>initiates a roll over if needed for crossing a date boundary since the last run.</item></list></para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
            <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
            <param name="baseFile"></param>
            <param name="curFileName"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.GetBackUpIndex(System.String)">
            <summary>
            Attempts to extract a number from the end of the file name that indicates
            the number of the times the file has been rolled over.
            </summary>
            <remarks>
            Certain date pattern extensions like yyyyMMdd will be parsed as valid backup indexes.
            </remarks>
            <param name="curFileName"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
            <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
            <param name="baseFile"></param>
            <param name="arrayFiles"></param>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ComputeCheckPeriod(System.String)">
            <summary>
            Calculates the RollPoint for the datePattern supplied.
            </summary>
            <param name="datePattern">the date pattern to calculate the check period for</param>
            <returns>The RollPoint that is most accurate for the date pattern supplied</returns>
            <remarks>
            Essentially the date pattern is examined to determine what the
            most suitable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected would be
            and hourly roll point as minutes could not be detected.
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> must be called again.
            </para>
                <para>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:log4net.Appender.RollingFileAppender.ExistingInit" /> to initialize
            the current number of backups.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.CombinePath(System.String,System.String)">
            <summary></summary>
            <param name="path1"></param>
            <param name="path2">.1, .2, .3, etc.</param>
            <returns></returns>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverTime(System.Boolean)">
            <summary>
            Rollover the file(s) to date/time tagged file(s).
            </summary>
            <param name="fileIsOpen">set to true if the file to be rolled is currently open</param>
            <remarks>
                <para>
            Rollover the file(s) to date/time tagged file(s).
            Resets curSizeRollBackups. 
            If fileIsOpen is set then the new file is opened (through SafeOpenFile).
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollFile(System.String,System.String)">
            <summary>
            Renames file <paramref name="fromFile" /> to file <paramref name="toFile" />.
            </summary>
            <param name="fromFile">Name of existing file to roll.</param>
            <param name="toFile">New name for file.</param>
            <remarks>
                <para>
            Renames file <paramref name="fromFile" /> to file <paramref name="toFile" />. It
            also checks for existence of target file and deletes if it does.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.FileExists(System.String)">
            <summary>
            Test if a file exists at a specified path
            </summary>
            <param name="path">the path to the file</param>
            <returns>true if the file exists</returns>
            <remarks>
                <para>
            Test if a file exists at a specified path
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.DeleteFile(System.String)">
            <summary>
            Deletes the specified file if it exists.
            </summary>
            <param name="fileName">The file to delete.</param>
            <remarks>
                <para>
            Delete a file if is exists.
            The file is first moved to a new filename then deleted.
            This allows the file to be removed even when it cannot
            be deleted, but it still can be moved.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverSize">
            <summary>
            Implements file roll base on file size.
            </summary>
            <remarks>
                <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.
            </para>
                <para>
            A new file is created to receive further log output.
            </para>
                <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
                <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.RollOverRenameFiles(System.String)">
            <summary>
            Implements file roll.
            </summary>
            <param name="baseFileName">the base name to rename</param>
            <remarks>
                <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. 
            </para>
                <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
                <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
                <para>
            This is called by <see cref="M:log4net.Appender.RollingFileAppender.RollOverSize" /> to rename the files.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime,log4net.Appender.RollingFileAppender.RollPoint)">
            <summary>
            Get the start time of the next window for the current rollpoint
            </summary>
            <param name="currentDateTime">the current date</param>
            <param name="rollPoint">the type of roll point we are working with</param>
            <returns>the start time for the next roll point an interval after the currentDateTime date</returns>
            <remarks>
                <para>
            Returns the date of the next roll point after the currentDateTime date passed to the method.
            </para>
                <para>
            The basic strategy is to subtract the time parts that are less significant
            than the rollpoint from the current time. This should roll the time back to
            the start of the time window for the current rollpoint. Then we add 1 window
            worth of time and get the start time of the next window for the rollpoint.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_dateTime">
            <summary>
            This object supplies the current date/time.  Allows test code to plug in
            a method to control this class when testing date/time based rolling. The default
            implementation uses the underlying value of DateTime.Now.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_datePattern">
            <summary>
            The date pattern. By default, the pattern is set to <c>".yyyy-MM-dd"</c> 
            meaning daily rollover.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_scheduledFilename">
            <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_nextCheck">
            <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_now">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollPoint">
            <summary>
            The type of rolling done
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups">
            <summary>
            There is zero backup files by default
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_curSizeRollBackups">
            <summary>
            How many sized based backups have been made so far
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_countDirection">
            <summary>
            The rolling file count direction. 
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollingStyle">
            <summary>
            The rolling mode used in this appender.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollDate">
            <summary>
            Cache flag set if we are rolling by date.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_rollSize">
            <summary>
            Cache flag set if we are rolling by size.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_staticLogFileName">
            <summary>
            Value indicating whether to always log to the same file.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_preserveLogFileNameExtension">
            <summary>
            Value indicating whether to preserve the file name extension when rolling.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_baseFileName">
            <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.m_mutexForRolling">
            <summary>
            A mutex that is used to lock rolling of files.
            </summary>
        </member>
        <member name="F:log4net.Appender.RollingFileAppender.s_date1970">
            <summary>
            The 1st of January 1970 in UTC
            </summary>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.IDateTime">
            <summary>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender" />.
            </summary>
            <remarks>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender" />.
            Used primarily to allow test classes to plug themselves in so they can
            supply test date/times.
            </remarks>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.IDateTime.Now">
            <summary>
            Gets the <i>current</i> time.
            </summary>
            <value>The <i>current</i> time.</value>
            <remarks>
                <para>
            Gets the <i>current</i> time.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.LocalDateTime">
            <summary>
            Default implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> that returns the current time.
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.LocalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
                <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.RollingFileAppender.UniversalDateTime">
            <summary>
            Implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> that returns the current time as the coordinated universal time (UTC).
            </summary>
        </member>
        <member name="P:log4net.Appender.RollingFileAppender.UniversalDateTime.Now">
            <summary>
            Gets the <b>current</b> time.
            </summary>
            <value>The <b>current</b> time.</value>
            <remarks>
                <para>
            Gets the <b>current</b> time.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.SmtpAppender">
            <summary>
            Send an e-mail when a specific logging event occurs, typically on errors 
            or fatal errors.
            </summary>
            <remarks>
                <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option. The
            <see cref="T:log4net.Appender.SmtpAppender" /> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
                <note type="caution">
            Authentication and setting the server Port are only available on the MS .NET 1.1 runtime.
            For these features to be enabled you need to ensure that you are using a version of
            the log4net assembly that is built against the MS .NET 1.1 framework and that you are
            running the your application on the MS .NET 1.1 runtime. On all other platforms only sending
            unauthenticated messages to a server listening on port 25 (the default) is supported.
            </note>
                <para>
            Authentication is supported by setting the <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> property to
            either <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> or <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" />.
            If using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> authentication then the <see cref="P:log4net.Appender.SmtpAppender.Username" />
            and <see cref="P:log4net.Appender.SmtpAppender.Password" /> properties must also be set.
            </para>
                <para>
            To set the SMTP server port use the <see cref="P:log4net.Appender.SmtpAppender.Port" /> property. The default port is 25.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.To">
            <summary>
            Gets or sets a comma- or semicolon-delimited list of recipient e-mail addresses (use semicolon on .NET 1.1 and comma for later versions).
            </summary>
            <value>
                <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
                <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </value>
            <remarks>
                <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
                <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Cc">
            <summary>
            Gets or sets a comma- or semicolon-delimited list of recipient e-mail addresses 
            that will be carbon copied (use semicolon on .NET 1.1 and comma for later versions).
            </summary>
            <value>
                <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
                <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </value>
            <remarks>
                <para>
            For .NET 1.1 (System.Web.Mail): A semicolon-delimited list of e-mail addresses.
            </para>
                <para>
            For .NET 2.0 (System.Net.Mail): A comma-delimited list of e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Bcc">
            <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses
            that will be blind carbon copied.
            </summary>
            <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
            <remarks>
                <para>
            A semicolon-delimited list of recipient e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.From">
            <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
            <value>
            The e-mail address of the sender.
            </value>
            <remarks>
                <para>
            The e-mail address of the sender.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Subject">
            <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
            <value>
            The subject line of the e-mail message.
            </value>
            <remarks>
                <para>
            The subject line of the e-mail message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.SmtpHost">
            <summary>
            Gets or sets the name of the SMTP relay mail server to use to send 
            the e-mail messages.
            </summary>
            <value>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </value>
            <remarks>
                <para>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.LocationInfo">
            <summary>
            Obsolete
            </summary>
            <remarks>
            Use the BufferingAppenderSkeleton Fix methods instead 
            </remarks>
            <remarks>
                <para>
            Obsolete property.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Authentication">
            <summary>
            The mode to use to authentication with the SMTP server
            </summary>
            <remarks>
                <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
                <para>
            Valid Authentication mode values are: <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None" />, 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, and <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" />. 
            The default value is <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None" />. When using 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> you must specify the <see cref="P:log4net.Appender.SmtpAppender.Username" /> 
            and <see cref="P:log4net.Appender.SmtpAppender.Password" /> to use to authenticate.
            When using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" /> the Windows credentials for the current
            thread, if impersonating, or the process will be used to authenticate. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Username">
            <summary>
            The username to use to authenticate with the SMTP server
            </summary>
            <remarks>
                <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
                <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username" /> and <see cref="P:log4net.Appender.SmtpAppender.Password" /> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, 
            otherwise the username will be ignored. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Password">
            <summary>
            The password to use to authenticate with the SMTP server
            </summary>
            <remarks>
                <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
                <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username" /> and <see cref="P:log4net.Appender.SmtpAppender.Password" /> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, 
            otherwise the password will be ignored. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Port">
            <summary>
            The port on which the SMTP server is listening
            </summary>
            <remarks>
                <note type="caution">Server Port is only available on the MS .NET 1.1 runtime.</note>
                <para>
            The port on which the SMTP server is listening. The default
            port is <c>25</c>. The Port can only be changed when running on
            the MS .NET 1.1 runtime.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.Priority">
            <summary>
            Gets or sets the priority of the e-mail message
            </summary>
            <value>
            One of the <see cref="T:System.Net.Mail.MailPriority" /> values.
            </value>
            <remarks>
                <para>
            Sets the priority of the e-mails generated by this
            appender. The default priority is <see cref="F:System.Net.Mail.MailPriority.Normal" />.
            </para>
                <para>
            If you are using this appender to report errors then
            you may want to set the priority to <see cref="F:System.Net.Mail.MailPriority.High" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.EnableSsl">
            <summary>
            Enable or disable use of SSL when sending e-mail message
            </summary>
            <remarks>
            This is available on MS .NET 2.0 runtime and higher
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.ReplyTo">
            <summary>
            Gets or sets the reply-to e-mail address.
            </summary>
            <remarks>
            This is available on MS .NET 2.0 runtime and higher
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.SubjectEncoding">
            <summary>
            Gets or sets the subject encoding to be used.
            </summary>
            <remarks>
            The default encoding is the operating system's current ANSI codepage.
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.BodyEncoding">
            <summary>
            Gets or sets the body encoding to be used.
            </summary>
            <remarks>
            The default encoding is the operating system's current ANSI codepage.
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
            <param name="events">The logging events to send.</param>
        </member>
        <member name="P:log4net.Appender.SmtpAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.SendEmail(System.String)">
            <summary>
            Send the email message
            </summary>
            <param name="messageBody">the body text to include in the mail</param>
        </member>
        <member name="T:log4net.Appender.SmtpAppender.SmtpAuthentication">
            <summary>
            Values for the <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> property.
            </summary>
            <remarks>
                <para>
            SMTP authentication modes.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None">
            <summary>
            No authentication
            </summary>
        </member>
        <member name="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic">
            <summary>
            Basic authentication.
            </summary>
            <remarks>
            Requires a username and password to be supplied
            </remarks>
        </member>
        <member name="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm">
            <summary>
            Integrated authentication
            </summary>
            <remarks>
            Uses the Windows credentials from the current thread or process to authenticate.
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpAppender.MaybeTrimSeparators(System.String)">
            <summary>
              trims leading and trailing commas or semicolons
            </summary>
        </member>
        <member name="T:log4net.Appender.SmtpPickupDirAppender">
            <summary>
            Send an email when a specific logging event occurs, typically on errors 
            or fatal errors. Rather than sending via smtp it writes a file into the
            directory specified by <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir" />. This allows services such
            as the IIS SMTP agent to manage sending the messages.
            </summary>
            <remarks>
                <para>
            The configuration for this appender is identical to that of the <c>SMTPAppender</c>,
            except that instead of specifying the <c>SMTPAppender.SMTPHost</c> you specify
            <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir" />.
            </para>
                <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option. The
            <see cref="T:log4net.Appender.SmtpPickupDirAppender" /> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
            </remarks>
            <author>Niall Daley</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.To">
            <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses.
            </summary>
            <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
            <remarks>
                <para>
            A semicolon-delimited list of e-mail addresses.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.From">
            <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
            <value>
            The e-mail address of the sender.
            </value>
            <remarks>
                <para>
            The e-mail address of the sender.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.Subject">
            <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
            <value>
            The subject line of the e-mail message.
            </value>
            <remarks>
                <para>
            The subject line of the e-mail message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.PickupDir">
            <summary>
            Gets or sets the path to write the messages to.
            </summary>
            <remarks>
                <para>
            Gets or sets the path to write the messages to. This should be the same
            as that used by the agent sending the messages.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.FileExtension">
            <summary>
            Gets or sets the file extension for the generated files
            </summary>
            <value>
            The file extension for the generated files
            </value>
            <remarks>
                <para>
            The file extension for the generated files
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> used to write to the pickup directory.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> used to write to the pickup directory.
            </value>
            <remarks>
                <para>
            Unless a <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
            <param name="events">The logging events to send.</param>
            <remarks>
                <para>
            Sends the contents of the cyclic buffer as an e-mail message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions">
            <summary>
            Activate the options on this appender. 
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.SmtpPickupDirAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.SmtpPickupDirAppender.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
                <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.SmtpPickupDirAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="T:log4net.Appender.TelnetAppender">
            <summary>
            Appender that allows clients to connect via Telnet to receive log messages
            </summary>
            <remarks>
                <para>
            The TelnetAppender accepts socket connections and streams logging messages
            back to the client.  
            The output is provided in a telnet-friendly way so that a log can be monitored 
            over a TCP/IP socket.
            This allows simple remote monitoring of application logging.
            </para>
                <para>
            The default <see cref="P:log4net.Appender.TelnetAppender.Port" /> is 23 (the telnet port).
            </para>
            </remarks>
            <author>Keith Long</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TelnetAppender.declaringType">
            <summary>
            The fully qualified type of the TelnetAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="P:log4net.Appender.TelnetAppender.Port">
            <summary>
            Gets or sets the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender" /> will listen for connections.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender" /> will listen for connections.
            </value>
            <remarks>
                <para>
            The default value is 23 (the telnet port).
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> 
            or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.OnClose">
            <summary>
            Overrides the parent method to close the socket handler
            </summary>
            <remarks>
                <para>
            Closes all the outstanding connections.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TelnetAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> must be called again.
            </para>
                <para>
            Create the socket handler and wait for connections
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to each connected client.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the logging event to each connected client.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.TelnetAppender.SocketHandler">
            <summary>
            Helper class to manage connected clients
            </summary>
            <remarks>
                <para>
            The SocketHandler class is used to accept connections from
            clients.  It is threaded so that clients can connect/disconnect
            asynchronously.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient">
            <summary>
            Class that represents a client connected to this handler
            </summary>
            <remarks>
                <para>
            Class that represents a client connected to this handler
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create this <see cref="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient" /> for the specified <see cref="T:System.Net.Sockets.Socket" /></summary>
            <param name="socket">the client's socket</param>
            <remarks>
                <para>
            Opens a stream writer on the socket.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Send(System.String)">
            <summary>
            Write a string to the client
            </summary>
            <param name="message">string to send</param>
            <remarks>
                <para>
            Write a string to the client
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Dispose">
            <summary>
            Cleanup the clients connection
            </summary>
            <remarks>
                <para>
            Close the socket connection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.#ctor(System.Int32)">
            <summary>
            Opens a new server port on <paramref ref="port" /></summary>
            <param name="port">the local port to listen on for connections</param>
            <remarks>
                <para>
            Creates a socket handler on the specified local server port.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Send(System.String)">
            <summary>
            Sends a string message to each of the connected clients
            </summary>
            <param name="message">the text to send</param>
            <remarks>
                <para>
            Sends a string message to each of the connected clients
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.AddClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
            <summary>
            Add a client to the internal clients list
            </summary>
            <param name="client">client to add</param>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.RemoveClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
            <summary>
            Remove a client from the internal clients list
            </summary>
            <param name="client">client to remove</param>
        </member>
        <member name="P:log4net.Appender.TelnetAppender.SocketHandler.HasConnections">
            <summary>
            Test if this handler has active connections
            </summary>
            <value>
                <c>true</c> if this handler has active connections
            </value>
            <remarks>
                <para>
            This property will be <c>true</c> while this handler has
            active connections, that is at least one connection that 
            the handler will attempt to send a message to.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.OnConnect(System.IAsyncResult)">
            <summary>
            Callback used to accept a connection on the server socket
            </summary>
            <param name="asyncResult">The result of the asynchronous operation</param>
            <remarks>
                <para>
            On connection adds to the list of connections 
            if there are two many open connections you will be disconnected
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Dispose">
            <summary>
            Close all network connections
            </summary>
            <remarks>
                <para>
            Make sure we close all network connections
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Appender.TextWriterAppender">
            <summary>
            Sends logging events to a <see cref="T:System.IO.TextWriter" />.
            </summary>
            <remarks>
                <para>
            An Appender that writes to a <see cref="T:System.IO.TextWriter" />.
            </para>
                <para>
            This appender may be used stand alone if initialized with an appropriate
            writer, however it is typically used as a base class for an appender that
            can open a <see cref="T:System.IO.TextWriter" /> to write to.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Douglas de la Torre</author>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and
            sets the output destination to a new <see cref="T:System.IO.StreamWriter" /> initialized 
            with the specified <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <param name="os">The <see cref="T:System.IO.Stream" /> to output to.</param>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and sets
            the output destination to the specified <see cref="T:System.IO.StreamWriter" />.
            </summary>
            <param name="layout">The layout to use with this appender</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> to output to</param>
            <remarks>
            The <see cref="T:System.IO.TextWriter" /> must have been previously opened.
            </remarks>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ImmediateFlush">
            <summary>
            Gets or set whether the appender will flush at the end 
            of each append operation.
            </summary>
            <value>
                <para>
            The default behavior is to flush at the end of each 
            append operation.
            </para>
                <para>
            If this option is set to <c>false</c>, then the underlying 
            stream can defer persisting the logging event to a later 
            time.
            </para>
            </value>
            <remarks>
            Avoiding the flush operation at the end of each append results in
            a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.Writer">
            <summary>
            Sets the <see cref="T:System.IO.TextWriter" /> where the log output will go.
            </summary>
            <remarks>
                <para>
            The specified <see cref="T:System.IO.TextWriter" /> must be open and writable.
            </para>
                <para>
            The <see cref="T:System.IO.TextWriter" /> will be closed when the appender 
            instance is closed.
            </para>
                <para>
                    <b>Note:</b> Logging to an unopened <see cref="T:System.IO.TextWriter" /> will fail.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.PreAppendCheck">
            <summary>
            This method determines if there is a sense in attempting to append.
            </summary>
            <remarks>
                <para>
            This method checks if an output target has been set and if a
            layout has been set. 
            </para>
            </remarks>
            <returns>
                <c>false</c> if any of the preconditions fail.</returns>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" />
            method. 
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
                <para>
            The format of the output will depend on the appender's layout.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent[])" />
            method. 
            </summary>
            <param name="loggingEvents">The array of events to log.</param>
            <remarks>
                <para>
            This method writes all the bulk logged events to the output writer
            before flushing the stream.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.OnClose">
            <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            </summary>
            <remarks>
            Closed appenders cannot be reused.
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.ErrorHandler">
            <summary>
            Gets or set the <see cref="T:log4net.Core.IErrorHandler" /> and the underlying 
            <see cref="T:log4net.Util.QuietTextWriter" />, if any, for this appender. 
            </summary>
            <value>
            The <see cref="T:log4net.Core.IErrorHandler" /> for this appender.
            </value>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter">
            <summary>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
            <remarks>
                <para>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.CloseWriter">
            <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
            <remarks>
                <para>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Reset">
            <summary>
            Clears internal references to the underlying <see cref="T:System.IO.TextWriter" /> 
            and other variables.
            </summary>
            <remarks>
                <para>
            Subclasses can override this method for an alternate closing behavior.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteFooter">
            <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </summary>
            <remarks>
                <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.WriteHeader">
            <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </summary>
            <remarks>
                <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.PrepareWriter">
            <summary>
            Called to allow a subclass to lazily initialize the writer
            </summary>
            <remarks>
                <para>
            This method is called when an event is logged and the <see cref="P:log4net.Appender.TextWriterAppender.Writer" /> or
            <see cref="P:log4net.Appender.TextWriterAppender.QuietWriter" /> have not been set. This allows a subclass to
            attempt to initialize the writer multiple times.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TextWriterAppender.QuietWriter">
            <summary>
            Gets or sets the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </summary>
            <value>
            The <see cref="T:log4net.Util.QuietTextWriter" /> where logging events are written.
            </value>
            <remarks>
                <para>
            This is the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_qtw">
            <summary>
            This is the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </summary>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying <see cref="T:System.IO.TextWriter" /> 
            or output stream will be flushed at the end of each append operation.
            </summary>
            <remarks>
                <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logging events are not actually persisted if and when the application 
            crashes.
            </para>
                <para>
            The default value is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TextWriterAppender.declaringType">
            <summary>
            The fully qualified type of the TextWriterAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Appender.TextWriterAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.Appender.TraceAppender">
            <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Trace" /> system.
            </summary>
            <remarks>
                <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Trace" /> class for details on configuring the
            trace system.
            </para>
                <para>
            Events are written using the <c>System.Diagnostics.Trace.Write(string,string)</c>
            method. The event's logger name is the default value for the category parameter 
            of the Write method. 
            </para>
                <para>
                    <b>Compact Framework</b>
                    <br />
            The Compact Framework does not support the <see cref="T:System.Diagnostics.Trace" />
            class for any operation except <c>Assert</c>. When using the Compact Framework this
            appender will write to the <see cref="T:System.Diagnostics.Debug" /> system rather than
            the Trace system. This appender will therefore behave like the <see cref="T:log4net.Appender.DebugAppender" />.
            </para>
            </remarks>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" />.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TraceAppender.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" /> 
            with a specified layout.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <remarks>
                <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppender.ImmediateFlush">
            <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
            <remarks>
                <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
                <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppender.Category">
            <summary>
            The category parameter sent to the Trace method.
            </summary>
            <remarks>
                <para>
            Defaults to %logger which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent" /> as the category parameter.
            </para>
                <para></para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TraceAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace" /> system.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace" /> system.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TraceAppender.m_immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
                <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TraceAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
                <para>
            The default value is <c>true</c>.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TraceAppender.m_category">
            <summary>
            Defaults to %logger
            </summary>
        </member>
        <member name="M:log4net.Appender.TraceAppender.Flush(System.Int32)">
            <summary>
            Flushes any buffered log data.
            </summary>
            <param name="millisecondsTimeout">The maximum time to wait for logging events to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.Appender.UdpAppender">
            <summary>
             Sends logging events as connectionless UDP datagrams to a remote host or a 
             multicast group using an <see cref="T:System.Net.Sockets.UdpClient" />.
             </summary>
            <remarks>
                <para>
             UDP guarantees neither that messages arrive, nor that they arrive in the correct order.
             </para>
                <para>
             To view the logging results, a custom application can be developed that listens for logging 
             events.
             </para>
                <para>
             When decoding events send via this appender remember to use the same encoding
             to decode the events as was used to send the events. See the <see cref="P:log4net.Appender.UdpAppender.Encoding" />
             property to specify the encoding to use.
             </para>
            </remarks>
            <example>
             This example shows how to log receive logging events that are sent 
             on IP address 244.0.0.1 and port 8080 to the console. The event is 
             encoded in the packet as a unicode string and it is decoded as such. 
             <code lang="C#">
             IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);
             UdpClient udpClient;
             byte[] buffer;
             string loggingEvent;
             
             try 
             {
                 udpClient = new UdpClient(8080);
                 
                 while(true) 
                 {
                     buffer = udpClient.Receive(ref remoteEndPoint);
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer);
                     Console.WriteLine(loggingEvent);
                 }
             } 
             catch(Exception e) 
             {
                 Console.WriteLine(e.ToString());
             }
             </code><code lang="Visual Basic">
             Dim remoteEndPoint as IPEndPoint
             Dim udpClient as UdpClient
             Dim buffer as Byte()
             Dim loggingEvent as String
             
             Try 
                 remoteEndPoint = new IPEndPoint(IPAddress.Any, 0)
                 udpClient = new UdpClient(8080)
            
                 While True
                     buffer = udpClient.Receive(ByRef remoteEndPoint)
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer)
                     Console.WriteLine(loggingEvent)
                 Wend
             Catch e As Exception
                 Console.WriteLine(e.ToString())
             End Try
             </code><para>
             An example configuration section to log information using this appender to the 
             IP 224.0.0.1 on port 8080:
             </para><code lang="XML" escaped="true"><appender name="UdpAppender" type="log4net.Appender.UdpAppender"><remoteAddress value="224.0.0.1" /><remotePort value="8080" /><layout type="log4net.Layout.PatternLayout" value="%-5level %logger [%ndc] - %message%newline" /></appender></code></example>
            <author>Gert Driesen</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Appender.UdpAppender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.UdpAppender" /> class.
            </summary>
            <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RemoteAddress">
            <summary>
            Gets or sets the IP address of the remote host or multicast group to which
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
            <value>
            The IP address of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
            <remarks>
                <para>
            Multicast addresses are identified by IP class <b>D</b> addresses (in the range 224.0.0.0 to
            239.255.255.255).  Multicast packets can pass across different networks through routers, so
            it is possible to use multicasts in an Internet scenario as long as your network provider 
            supports multicasting.
            </para>
                <para>
            Hosts that want to receive particular multicast messages must register their interest by joining
            the multicast group.  Multicast messages are not sent to networks where no host has joined
            the multicast group.  Class <b>D</b> IP addresses are used for multicast groups, to differentiate
            them from normal host addresses, allowing nodes to easily detect if a message is of interest.
            </para>
                <para>
            Static multicast addresses that are needed globally are assigned by IANA.  A few examples are listed in the table below:
            </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>IP Address</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>224.0.0.1</term>
                            <description>
                                <para>
                        Sends a message to all system on the subnet.
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>224.0.0.2</term>
                            <description>
                                <para>
                        Sends a message to all routers on the subnet.
                        </para>
                            </description>
                        </item>
                        <item>
                            <term>224.0.0.12</term>
                            <description>
                                <para>
                        The DHCP server answers messages on the IP address 224.0.0.12, but only on a subnet.
                        </para>
                            </description>
                        </item>
                    </list>
                </para>
                <para>
            A complete list of actually reserved multicast addresses and their owners in the ranges
            defined by RFC 3171 can be found at the <A href="http://www.iana.org/assignments/multicast-addresses">IANA web site</A>. 
            </para>
                <para>
            The address range 239.0.0.0 to 239.255.255.255 is reserved for administrative scope-relative 
            addresses.  These addresses can be reused with other local groups.  Routers are typically 
            configured with filters to prevent multicast traffic in this range from flowing outside
            of the local network.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RemotePort">
            <summary>
            Gets or sets the TCP port number of the remote host or multicast group to which 
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
            <remarks>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will send messages to this TCP port number
            on the remote host or multicast group.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="P:log4net.Appender.UdpAppender.LocalPort">
            <summary>
            Gets or sets the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
            <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </value>
            <remarks>
                <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will bind to this port for sending messages.
            </para>
                <para>
            Setting the value to 0 (the default) will cause the udp client not to bind to
            a local port.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="P:log4net.Appender.UdpAppender.Encoding">
            <summary>
            Gets or sets <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </summary>
            <value>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </value>
            <remarks>
                <para>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </summary>
            <value>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </value>
            <remarks>
                <see cref="T:log4net.Appender.UdpAppender" /> creates a <see cref="T:System.Net.Sockets.UdpClient" /> to send logging events 
            over a network.  Classes deriving from <see cref="T:log4net.Appender.UdpAppender" /> can use this
            property to get or set this <see cref="T:System.Net.Sockets.UdpClient" />.  Use the underlying <see cref="T:System.Net.Sockets.UdpClient" />
            returned from <see cref="P:log4net.Appender.UdpAppender.Client" /> if you require access beyond that which 
            <see cref="T:log4net.Appender.UdpAppender" /> provides.
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RemoteEndPoint">
            <summary>
            Gets or sets the cached remote endpoint to which the logging events should be sent.
            </summary>
            <value>
            The cached remote endpoint to which the logging events will be sent.
            </value>
            <remarks>
            The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method will initialize the remote endpoint 
            with the values of the <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> and <see cref="P:log4net.Appender.UdpAppender.RemotePort" />
            properties.
            </remarks>
        </member>
        <member name="M:log4net.Appender.UdpAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set.
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> must be called again.
            </para>
                <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was specified or 
            an invalid remote or local TCP port number was specified.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was not specified.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The TCP port number assigned to <see cref="P:log4net.Appender.UdpAppender.LocalPort" /> or <see cref="P:log4net.Appender.UdpAppender.RemotePort" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        </member>
        <member name="M:log4net.Appender.UdpAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            This method is called by the <see cref="M:AppenderSkeleton.DoAppend(LoggingEvent)" /> method.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Sends the event using an UDP datagram.
            </para>
                <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.UdpAppender.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.UdpAppender.OnClose">
            <summary>
            Closes the UDP connection and releases all resources associated with 
            this <see cref="T:log4net.Appender.UdpAppender" /> instance.
            </summary>
            <remarks>
                <para>
            Disables the underlying <see cref="T:System.Net.Sockets.UdpClient" /> and releases all managed 
            and unmanaged resources associated with the <see cref="T:log4net.Appender.UdpAppender" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.UdpAppender.InitializeClientConnection">
            <summary>
            Initializes the underlying  <see cref="T:System.Net.Sockets.UdpClient" /> connection.
            </summary>
            <remarks>
                <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> is initialized and binds to the 
            port number from which you intend to communicate.
            </para>
                <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_remoteAddress">
            <summary>
            The IP address of the remote host or multicast group to which 
            the logging event will be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_remotePort">
            <summary>
            The TCP port number of the remote host or multicast group to 
            which the logging event will be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_remoteEndPoint">
            <summary>
            The cached remote endpoint to which the logging events will be sent.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_localPort">
            <summary>
            The TCP port number from which the <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_client">
            <summary>
            The <see cref="T:System.Net.Sockets.UdpClient" /> instance that will be used for sending the 
            logging events.
            </summary>
        </member>
        <member name="F:log4net.Appender.UdpAppender.m_encoding">
            <summary>
            The encoding to use for the packet.
            </summary>
        </member>
        <member name="T:log4net.Config.AliasDomainAttribute">
            <summary>
            Assembly level attribute that specifies a domain to alias to this assembly's repository.
            </summary>
            <remarks>
                <para>
                    <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
                </para>
                <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.DomainAttribute" />,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
                <para>
            An assembly can alias another assembly's domain to its repository by
            specifying this attribute with the name of the target domain.
            </para>
                <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required domains.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.AliasDomainAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasDomainAttribute" /> class with 
            the specified domain to alias to this assembly's repository.
            </summary>
            <param name="name">The domain to alias to this assemby's repository.</param>
            <remarks>
                <para>
            Obsolete. Use <see cref="T:log4net.Config.AliasRepositoryAttribute" /> instead of <see cref="T:log4net.Config.AliasDomainAttribute" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.AliasRepositoryAttribute">
            <summary>
            Assembly level attribute that specifies a repository to alias to this assembly's repository.
            </summary>
            <remarks>
                <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.RepositoryAttribute" />,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
                <para>
            An assembly can alias another assembly's repository to its repository by
            specifying this attribute with the name of the target repository.
            </para>
                <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required repositories.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.AliasRepositoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </summary>
            <param name="name">The repository to alias to this assemby's repository.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.AliasRepositoryAttribute.Name">
            <summary>
            Gets or sets the repository to alias to this assemby's repository.
            </summary>
            <value>
            The repository to alias to this assemby's repository.
            </value>
            <remarks>
                <para>
            The name of the repository to alias to this assemby's repository.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.BasicConfigurator">
            <summary>
            Use this class to quickly configure a <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </summary>
            <remarks>
                <para>
            Allows very simple programmatic configuration of log4net.
            </para>
                <para>
            Only one appender can be configured using this configurator.
            The appender is set at the root of the hierarchy and all logging
            events will be delivered to that appender.
            </para>
                <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions()" /> method
            be called after the appenders properties have been configured.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Config.BasicConfigurator.declaringType">
            <summary>
            The fully qualified type of the BasicConfigurator class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.BasicConfigurator" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure">
            <summary>
            Initializes the log4net system with a default configuration.
            </summary>
            <remarks>
                <para>
            Initializes the log4net logging system using a <see cref="T:log4net.Appender.ConsoleAppender" />
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout" /> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern" />
            layout style.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender[])">
            <summary>
            Initializes the log4net system using the specified appenders.
            </summary>
            <param name="appenders">The appenders to use to log all logging events.</param>
            <remarks>
                <para>
            Initializes the log4net system using the specified appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender)">
            <summary>
            Initializes the log4net system using the specified appender.
            </summary>
            <param name="appender">The appender to use to log all logging events.</param>
            <remarks>
                <para>
            Initializes the log4net system using the specified appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository)">
            <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> with a default configuration.
            </summary>
            <param name="repository">The repository to configure.</param>
            <remarks>
                <para>
            Initializes the specified repository using a <see cref="T:log4net.Appender.ConsoleAppender" />
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout" /> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern" />
            layout style.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender)">
            <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="appender">The appender to use to log all logging events.</param>
            <remarks>
                <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender[])">
            <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appenders.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="appenders">The appenders to use to log all logging events.</param>
            <remarks>
                <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.ConfiguratorAttribute">
            <summary>
            Base class for all log4net configuration attributes.
            </summary>
            <remarks>
            This is an abstract class that must be extended by 
            specific configurators. This attribute allows the
            configurator to be parameterized by an assembly level
            attribute.
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.ConfiguratorAttribute.#ctor(System.Int32)">
            <summary>
            Constructor used by subclasses.
            </summary>
            <param name="priority">the ordering priority for this configurator</param>
            <remarks>
                <para>
            The <paramref name="priority" /> is used to order the configurator
            attributes before they are invoked. Higher priority configurators are executed
            before lower priority ones.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.ConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
            <remarks>
                <para>
            Abstract method implemented by a subclass. When this method is called
            the subclass should configure the <paramref name="targetRepository" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.ConfiguratorAttribute.CompareTo(System.Object)">
            <summary>
            Compare this instance to another ConfiguratorAttribute
            </summary>
            <param name="obj">the object to compare to</param>
            <returns>see <see cref="M:System.IComparable.CompareTo(System.Object)" /></returns>
            <remarks>
                <para>
            Compares the priorities of the two <see cref="T:log4net.Config.ConfiguratorAttribute" /> instances.
            Sorts by priority in descending order. Objects with the same priority are
            randomly ordered.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.DomainAttribute">
            <summary>
            Assembly level attribute that specifies the logging domain for the assembly.
            </summary>
            <remarks>
                <para>
                    <b>DomainAttribute is obsolete. Use RepositoryAttribute instead of DomainAttribute.</b>
                </para>
                <para>
            Assemblies are mapped to logging domains. Each domain has its own
            logging repository. This attribute specified on the assembly controls
            the configuration of the domain. The <see cref="P:log4net.Config.RepositoryAttribute.Name" /> property specifies the name
            of the domain that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" />
            specifies the type of the repository objects to create for the domain. If 
            this attribute is not specified and a <see cref="P:log4net.Config.RepositoryAttribute.Name" /> is not specified
            then the assembly will be part of the default shared logging domain.
            </para>
                <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.DomainAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class.
            </summary>
            <remarks>
                <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.DomainAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class 
            with the name of the domain.
            </summary>
            <param name="name">The name of the domain.</param>
            <remarks>
                <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.DOMConfigurator">
            <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository" /> using an Xml tree.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure">
            <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository)">
            <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using settings
            stored in the application's configuration file.
            </summary>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
            <param name="repository">The repository to configure.</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified XML 
            element.
            </summary>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
            <param name="repository">The repository to configure.</param>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            Configures log4net using the specified configuration file.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
                <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
                <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
                <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
                <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
                <code lang="XML" escaped="true">
                    <configuration>
                        <appSettings>
                            <add key="log4net-config-file" value="log.config" />
                        </appSettings>
                    </configuration>
                </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.Stream)">
            <summary>
            Configures log4net using the specified configuration file.
            </summary>
            <param name="configStream">A stream to load the XML configuration from.</param>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
                <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
                <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
                <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
                <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
                <code lang="XML" escaped="true">
                    <configuration>
                        <appSettings>
                            <add key="log4net-config-file" value="log.config" />
                        </appSettings>
                    </configuration>
                </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configStream">The stream to load the XML configuration from.</param>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
                <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)" />
        </member>
        <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
                    <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
                </para>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
                <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)" />
        </member>
        <member name="T:log4net.Config.DOMConfiguratorAttribute">
            <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />.
            </summary>
            <remarks>
                <para>
                    <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
                </para>
                <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
                <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:XmlConfigurator.Configure()" />
            methods.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="T:log4net.Config.Log4NetConfigurationSectionHandler">
            <summary>
            Class to register for the log4net section of the configuration file
            </summary>
            <remarks>
            The log4net section of the configuration file needs to have a section
            handler registered. This is the section handler used. It simply returns
            the XML element that is the root of the section.
            </remarks>
            <example>
            Example of registering the log4net section handler :
            <code lang="XML" escaped="true"><configuration><configSections><section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" /></configSections><log4net>
            		log4net configuration XML goes here
            	</log4net></configuration></code></example>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Parses the configuration section.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">The configuration context when called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference.</param>
            <param name="section">The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</param>
            <returns>The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</returns>
            <remarks>
                <para>
            Returns the <see cref="T:System.Xml.XmlNode" /> containing the configuration data,
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.PluginAttribute">
            <summary>
            Assembly level attribute that specifies a plugin to attach to 
            the repository.
            </summary>
            <remarks>
                <para>
            Specifies the type of a plugin to create and attach to the
            assembly's repository. The plugin type must implement the
            <see cref="T:log4net.Plugin.IPlugin" /> interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.PluginAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
            <param name="typeName">The type name of plugin to create.</param>
            <remarks>
                <para>
            Create the attribute with the plugin type specified.
            </para>
                <para>
            Where possible use the constructor that takes a <see cref="T:System.Type" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.PluginAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
            <param name="type">The type of plugin to create.</param>
            <remarks>
                <para>
            Create the attribute with the plugin type specified.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.PluginAttribute.Type">
            <summary>
            Gets or sets the type for the plugin.
            </summary>
            <value>
            The type for the plugin.
            </value>
            <remarks>
                <para>
            The type for the plugin.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.PluginAttribute.TypeName">
            <summary>
            Gets or sets the type name for the plugin.
            </summary>
            <value>
            The type name for the plugin.
            </value>
            <remarks>
                <para>
            The type name for the plugin.
            </para>
                <para>
            Where possible use the <see cref="P:log4net.Config.PluginAttribute.Type" /> property instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.PluginAttribute.CreatePlugin">
            <summary>
            Creates the plugin object defined by this attribute.
            </summary>
            <remarks>
                <para>
            Creates the instance of the <see cref="T:log4net.Plugin.IPlugin" /> object as 
            specified by this attribute.
            </para>
            </remarks>
            <returns>The plugin object.</returns>
        </member>
        <member name="M:log4net.Config.PluginAttribute.ToString">
            <summary>
            Returns a representation of the properties of this object.
            </summary>
            <remarks>
                <para>
            Overrides base class <see cref="M:Object.ToString()" /> method to 
            return a representation of the properties of this object.
            </para>
            </remarks>
            <returns>A representation of the properties of this object</returns>
        </member>
        <member name="T:log4net.Config.RepositoryAttribute">
            <summary>
            Assembly level attribute that specifies the logging repository for the assembly.
            </summary>
            <remarks>
                <para>
            Assemblies are mapped to logging repository. This attribute specified 
            on the assembly controls
            the configuration of the repository. The <see cref="P:log4net.Config.RepositoryAttribute.Name" /> property specifies the name
            of the repository that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" />
            specifies the type of the <see cref="T:log4net.Repository.ILoggerRepository" /> object 
            to create for the assembly. If this attribute is not specified or a <see cref="P:log4net.Config.RepositoryAttribute.Name" /> 
            is not specified then the assembly will be part of the default shared logging repository.
            </para>
                <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.RepositoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class.
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.RepositoryAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class 
            with the name of the repository.
            </summary>
            <param name="name">The name of the repository.</param>
            <remarks>
                <para>
            Initialize the attribute with the name for the assembly's repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.RepositoryAttribute.Name">
            <summary>
            Gets or sets the name of the logging repository.
            </summary>
            <value>
            The string name to use as the name of the repository associated with this
            assembly.
            </value>
            <remarks>
                <para>
            This value does not have to be unique. Several assemblies can share the
            same repository. They will share the logging configuration of the repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.RepositoryAttribute.RepositoryType">
            <summary>
            Gets or sets the type of repository to create for this assembly.
            </summary>
            <value>
            The type of repository to create for this assembly.
            </value>
            <remarks>
                <para>
            The type of the repository to create for the assembly.
            The type must implement the <see cref="T:log4net.Repository.ILoggerRepository" />
            interface.
            </para>
                <para>
            This will be the type of repository created when 
            the repository is created. If multiple assemblies reference the
            same repository then the repository is only created once using the
            <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" /> of the first assembly to call into the 
            repository.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Config.SecurityContextProviderAttribute">
            <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Core.SecurityContextProvider" />.
            </summary>
            <remarks>
                <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
                <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:XmlConfigurator.Configure()" />
            methods.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Config.SecurityContextProviderAttribute.#ctor(System.Type)">
            <summary>
            Construct provider attribute with type specified
            </summary>
            <param name="providerType">the type of the provider to use</param>
            <remarks>
                <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider" />
            class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.SecurityContextProviderAttribute.ProviderType">
            <summary>
            Gets or sets the type of the provider to use.
            </summary>
            <value>
            the type of the provider to use.
            </value>
            <remarks>
                <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider" />
            class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.SecurityContextProviderAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the SecurityContextProvider
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
            <remarks>
                <para>
            Creates a provider instance from the <see cref="P:log4net.Config.SecurityContextProviderAttribute.ProviderType" /> specified.
            Sets this as the default security context provider <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Config.SecurityContextProviderAttribute.declaringType">
            <summary>
            The fully qualified type of the SecurityContextProviderAttribute class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Config.XmlConfigurator">
            <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
            <remarks>
                <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository" /> using an Xml tree.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository)">
            <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using settings
            stored in the application's configuration file.
            </summary>
            <remarks>
                <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
                <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> for an example.
            </para>
            </remarks>
            <param name="repository">The repository to configure.</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure">
            <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
            <remarks>
                <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
                <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> for an example.
            </para>
            </remarks>
            <seealso cref="T:log4net.Config.Log4NetConfigurationSectionHandler" />
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
            <remarks>
                <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </para>
            </remarks>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            Configures log4net using the specified configuration file.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
                <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
                <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler" />, for example:
            <code lang="XML" escaped="true"><configSections><section name="log4net" type="System.Configuration.IgnoreSectionHandler" /></configSections></code></para>
                <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
                <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
                <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
                <code lang="XML" escaped="true">
                    <configuration>
                        <appSettings>
                            <add key="log4net-config-file" value="log.config" />
                        </appSettings>
                    </configuration>
                </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.Uri)">
            <summary>
            Configures log4net using the specified configuration URI.
            </summary>
            <param name="configUri">A URI to load the XML configuration from.</param>
            <remarks>
                <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
                <para>
            The <see cref="T:System.Net.WebRequest" /> must support the URI scheme specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.Stream)">
            <summary>
            Configures log4net using the specified configuration data stream.
            </summary>
            <param name="configStream">A stream to load the XML configuration from.</param>
            <remarks>
                <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
                <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified XML 
            element.
            </summary>
            <remarks>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
            <param name="repository">The repository to configure.</param>
            <param name="element">The element to parse.</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
                <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler" />, for example:
            <code lang="XML" escaped="true"><configSections><section name="log4net" type="System.Configuration.IgnoreSectionHandler" /></configSections></code></para>
                <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
                <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
                <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
                <code lang="XML" escaped="true">
                    <configuration>
                        <appSettings>
                            <add key="log4net-config-file" value="log.config" />
                        </appSettings>
                    </configuration>
                </code>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Uri)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            URI.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configUri">A URI to load the XML configuration from.</param>
            <remarks>
                <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The <see cref="T:System.Net.WebRequest" /> must support the URI scheme specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configStream">The stream to load the XML configuration from.</param>
            <remarks>
                <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            Note that this method will NOT close the stream parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
                <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)" />
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The XML file to load the configuration from.</param>
            <remarks>
                <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
                <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
                <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:Configure(FileInfo)" />.
            </para>
            </remarks>
            <seealso cref="M:Configure(FileInfo)" />
        </member>
        <member name="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler">
            <summary>
            Class used to watch config files.
            </summary>
            <remarks>
                <para>
            Uses the <see cref="T:System.IO.FileSystemWatcher" /> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis" /> time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher" />
            change notifications arrive while the timer is waiting it
            is reset and waits again for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis" /> to
            elapse.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_configFile">
            <summary>
            Holds the FileInfo used to configure the XmlConfigurator
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_repository">
            <summary>
            Holds the repository being configured.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis">
            <summary>
            The default amount of time to wait after receiving notification
            before reloading the config file.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.m_watcher">
            <summary>
            Watches file for changes. This object should be disposed when no longer
            needed to free system handles on the watched resources.
            </summary>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.#ctor(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class to
            watch a specified config file used to configure a repository.
            </summary>
            <param name="repository">The repository to configure.</param>
            <param name="configFile">The configuration file to watch.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" />.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher" /> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
                <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" />.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher" /> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
                <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
            <summary>
            Called by the timer when the configuration has been updated.
            </summary>
            <param name="state">null</param>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.Dispose">
            <summary>
            Release the handles held by the watcher and timer.
            </summary>
        </member>
        <member name="M:log4net.Config.XmlConfigurator.InternalConfigureFromXml(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            Configures the specified repository using a <c>log4net</c> element.
            </summary>
            <param name="repository">The hierarchy to configure.</param>
            <param name="element">The element to parse.</param>
            <remarks>
                <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </para>
                <para>
            This method is ultimately called by one of the Configure methods 
            to load the configuration from an <see cref="T:System.Xml.XmlElement" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.m_repositoryName2ConfigAndWatchHandler">
            <summary>
            Maps repository names to ConfigAndWatchHandler instances to allow a particular
            ConfigAndWatchHandler to dispose of its FileSystemWatcher when a repository is 
            reconfigured.
            </summary>
        </member>
        <member name="F:log4net.Config.XmlConfigurator.declaringType">
            <summary>
            The fully qualified type of the XmlConfigurator class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Config.XmlConfiguratorAttribute">
            <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />.
            </summary>
            <remarks>
                <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
                <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:XmlConfigurator.Configure()" />
            methods.
            </para>
                <para>
            If neither of the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> or <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />
            properties are set the configuration is loaded from the application's .config file.
            If set the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> property takes priority over the
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> property. The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> property
            specifies a path to a file to load the config from. The path is relative to the
            application's base directory; <see cref="P:System.AppDomain.BaseDirectory" />.
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> property is used as a postfix to the assembly file name.
            The config file must be located in the  application's base directory; <see cref="P:System.AppDomain.BaseDirectory" />.
            For example in a console application setting the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> to
            <c>config</c> has the same effect as not specifying the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> or 
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> properties.
            </para>
                <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.Watch" /> property can be set to cause the <see cref="T:log4net.Config.XmlConfigurator" />
            to watch the configuration file for changes.
            </para>
                <note>
                    <para>
            Log4net will only look for assembly level configuration attributes once.
            When using the log4net assembly level attributes to control the configuration 
            of log4net you must ensure that the first call to any of the 
            <see cref="T:log4net.Core.LoggerManager" /> methods is made from the assembly with the configuration
            attributes. 
            </para>
                    <para>
            If you cannot guarantee the order in which log4net calls will be made from 
            different assemblies you must use programmatic configuration instead, i.e.
            call the <see cref="M:XmlConfigurator.Configure()" /> method directly.
            </para>
                </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile">
            <summary>
            Gets or sets the filename of the configuration file.
            </summary>
            <value>
            The filename of the configuration file.
            </value>
            <remarks>
                <para>
            If specified, this is the name of the configuration file to use with
            the <see cref="T:log4net.Config.XmlConfigurator" />. This file path is relative to the
            <b>application base</b> directory (<see cref="P:System.AppDomain.BaseDirectory" />).
            </para>
                <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension">
            <summary>
            Gets or sets the extension of the configuration file.
            </summary>
            <value>
            The extension of the configuration file.
            </value>
            <remarks>
                <para>
            If specified this is the extension for the configuration file.
            The path to the config file is built by using the <b>application 
            base</b> directory (<see cref="P:System.AppDomain.BaseDirectory" />),
            the <b>assembly file name</b> and the config file extension.
            </para>
                <para>
            If the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> is set to <c>MyExt</c> then
            possible config file names would be: <c>MyConsoleApp.exe.MyExt</c> or
            <c>MyClassLibrary.dll.MyExt</c>.
            </para>
                <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Config.XmlConfiguratorAttribute.Watch">
            <summary>
            Gets or sets a value indicating whether to watch the configuration file.
            </summary>
            <value>
                <c>true</c> if the configuration should be watched, <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            If this flag is specified and set to <c>true</c> then the framework
            will watch the configuration file and will reload the config each time 
            the file is modified.
            </para>
                <para>
            The config file can only be watched if it is loaded from local disk.
            In a No-Touch (Smart Client) deployment where the application is downloaded
            from a web server the config file may not reside on the local disk
            and therefore it may not be able to watch it.
            </para>
                <note>
            Watching configuration is not supported on the SSCLI.
            </note>
            </remarks>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
            <remarks>
                <para>
            Configure the repository using the <see cref="T:log4net.Config.XmlConfigurator" />.
            The <paramref name="targetRepository" /> specified must extend the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />
            class otherwise the <see cref="T:log4net.Config.XmlConfigurator" /> will not be able to
            configure it.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetRepository" /> does not extend <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.</exception>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Attempt to load configuration from the local file system
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            Configure the specified repository using a <see cref="T:System.IO.FileInfo" /></summary>
            <param name="targetRepository">The repository to configure.</param>
            <param name="configFile">the FileInfo pointing to the config file</param>
        </member>
        <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromUri(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Attempt to load configuration from a URI
            </summary>
            <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
            <param name="targetRepository">The repository to configure.</param>
        </member>
        <member name="F:log4net.Config.XmlConfiguratorAttribute.declaringType">
            <summary>
            The fully qualified type of the XmlConfiguratorAttribute class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Core.CompactRepositorySelector">
            <summary>
            The implementation of the <see cref="T:log4net.Core.IRepositorySelector" /> interface suitable
            for use with the compact framework
            </summary>
            <remarks>
                <para>
            This <see cref="T:log4net.Core.IRepositorySelector" /> implementation is a simple
            mapping between repository name and <see cref="T:log4net.Repository.ILoggerRepository" />
            object.
            </para>
                <para>
            The .NET Compact Framework 1.0 does not support retrieving assembly
            level attributes therefore unlike the <c>DefaultRepositorySelector</c>
            this selector does not examine the calling assembly for attributes.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.#ctor(System.Type)">
            <summary>
            Create a new repository selector
            </summary>
            <param name="defaultRepositoryType">the type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
            <remarks>
                <para>
            Create an new compact repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">throw if <paramref name="defaultRepositoryType" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">throw if <paramref name="defaultRepositoryType" /> does not implement <see cref="T:log4net.Repository.ILoggerRepository" /></exception>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Get the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly
            </summary>
            <param name="assembly">not used</param>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
            <remarks>
                <para>
            The <paramref name="assembly" /> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
                <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.String)">
            <summary>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository" /></summary>
            <param name="repositoryName">the name of the repository to lookup</param>
            <returns>The named <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
            <remarks>
                <para>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository" />. The default 
            repository is <c>log4net-default-repository</c>. Other repositories 
            must be created using the <see cref="M:CreateRepository(string, Type)" />.
            If the named repository does not exist an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName" /> is null</exception>
            <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName" /> does not exist</exception>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new repository for the assembly specified 
            </summary>
            <param name="assembly">not used</param>
            <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
            <returns>the repository created</returns>
            <remarks>
                <para>
            The <paramref name="assembly" /> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
                <para>
            If the <paramref name="repositoryType" /> is <c>null</c> then the
            default repository type specified to the constructor is used.
            </para>
                <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Create a new repository for the repository specified
            </summary>
            <param name="repositoryName">the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" /></param>
            <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.
            If this param is null then the default repository type is used.</param>
            <returns>the repository created</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(string)" /> with the
            same repository specified will return the same repository instance.
            </para>
                <para>
            If the named repository already exists an exception will be thrown.
            </para>
                <para>
            If <paramref name="repositoryType" /> is <c>null</c> then the default 
            repository type specified to the constructor is used.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName" /> is null</exception>
            <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName" /> already exists</exception>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns>
                <c>true</c> if the repository exists</returns>
            <remarks>
                <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(string, Type)" />
            to create a new repository and <see cref="M:GetRepository(string)" /> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.GetAllRepositories">
            <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository" /> objects
            </summary>
            <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository" /> objects</returns>
            <remarks>
                <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.CompactRepositorySelector.declaringType">
            <summary>
            The fully qualified type of the CompactRepositorySelector class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
                <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CompactRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
            <summary>
            Notify the registered listeners that the repository has been created
            </summary>
            <param name="repository">The repository that has been created</param>
            <remarks>
                <para>
            Raises the <event cref="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">LoggerRepositoryCreatedEvent</event>
            event.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.DefaultRepositorySelector">
            <summary>
            The default implementation of the <see cref="T:log4net.Core.IRepositorySelector" /> interface.
            </summary>
            <remarks>
                <para>
            Uses attributes defined on the calling assembly to determine how to
            configure the hierarchy for the repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
                <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.#ctor(System.Type)">
            <summary>
            Creates a new repository selector.
            </summary>
            <param name="defaultRepositoryType">The type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
            <remarks>
                <para>
            Create an new repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="defaultRepositoryType" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="defaultRepositoryType" /> does not implement <see cref="T:log4net.Repository.ILoggerRepository" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
            <param name="repositoryAssembly">The assembly use to lookup the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <remarks>
                <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and the repository 
            to create can be overridden by specifying the <see cref="T:log4net.Config.RepositoryAttribute" /> 
            attribute on the <paramref name="repositoryAssembly" />.
            </para>
                <para>
            The default values are to use the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> 
            implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically configured using 
            any <see cref="T:log4net.Config.ConfiguratorAttribute" /> attributes defined on
            the <paramref name="repositoryAssembly" />.
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the assembly</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.String)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified repository.
            </summary>
            <param name="repositoryName">The repository to use to lookup the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified repository.</returns>
            <remarks>
                <para>
            Returns the named repository. If <paramref name="repositoryName" /> is <c>null</c>
            a <see cref="T:System.ArgumentNullException" /> is thrown. If the repository 
            does not exist a <see cref="T:log4net.Core.LogException" /> is thrown.
            </para>
                <para>
            Use <see cref="M:CreateRepository(string, Type)" /> to create a repository.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="repositoryName" /> is <see langword="null" />.</exception>
            <exception cref="T:log4net.Core.LogException">
                <paramref name="repositoryName" /> does not exist.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new repository for the assembly specified 
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <returns>The repository created.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
                <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the 
            <paramref name="repositoryAssembly" />.  The default values are to use the 
            <paramref name="repositoryType" /> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute" /> 
            attributes defined on the <paramref name="repositoryAssembly" />.
            </para>
                <para>
            If a repository for the <paramref name="repositoryAssembly" /> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType" />.
            Also the <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new repository for the assembly specified.
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <param name="repositoryName">The name to assign to the created repository</param>
            <param name="readAssemblyAttributes">Set to <c>true</c> to read and apply the assembly attributes</param>
            <returns>The repository created.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
                <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the 
            <paramref name="repositoryAssembly" />.  The default values are to use the 
            <paramref name="repositoryType" /> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute" /> 
            attributes defined on the <paramref name="repositoryAssembly" />.
            </para>
                <para>
            If a repository for the <paramref name="repositoryAssembly" /> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType" />.
            Also the <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a new repository for the specified repository.
            </summary>
            <param name="repositoryName">The repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.
            If this param is <see langword="null" /> then the default repository type is used.</param>
            <returns>The new repository.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(string)" /> with the
            same repository specified will return the same repository instance.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="repositoryName" /> is <see langword="null" />.</exception>
            <exception cref="T:log4net.Core.LogException">
                <paramref name="repositoryName" /> already exists.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns>
                <c>true</c> if the repository exists</returns>
            <remarks>
                <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(string, Type)" />
            to create a new repository and <see cref="M:GetRepository(string)" /> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetAllRepositories">
            <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository" /> objects
            </summary>
            <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository" /> objects</returns>
            <remarks>
                <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.AliasRepository(System.String,log4net.Repository.ILoggerRepository)">
            <summary>
            Aliases a repository to an existing repository.
            </summary>
            <param name="repositoryAlias">The repository to alias.</param>
            <param name="repositoryTarget">The repository that the repository is aliased to.</param>
            <remarks>
                <para>
            The repository specified will be aliased to the repository when created. 
            The repository must not already exist.
            </para>
                <para>
            When the repository is created it must utilize the same repository type as 
            the repository it is aliased to, otherwise the aliasing will fail.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="repositoryAlias" /> is <see langword="null" />.</para>
                <para>-or-</para>
                <para>
                    <paramref name="repositoryTarget" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
            <summary>
            Notifies the registered listeners that the repository has been created.
            </summary>
            <param name="repository">The repository that has been created.</param>
            <remarks>
                <para>
            Raises the <see cref="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent" /> event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
            <summary>
            Gets the repository name and repository type for the specified assembly.
            </summary>
            <param name="assembly">The assembly that has a <see cref="T:log4net.Config.RepositoryAttribute" />.</param>
            <param name="repositoryName">in/out param to hold the repository name to use for the assembly, caller should set this to the default value before calling.</param>
            <param name="repositoryType">in/out param to hold the type of the repository to create for the assembly, caller should set this to the default value before calling.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="assembly" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.ConfigureRepository(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the repository using information from the assembly.
            </summary>
            <param name="assembly">The assembly containing <see cref="T:log4net.Config.ConfiguratorAttribute" />
            attributes which define the configuration for the repository.</param>
            <param name="repository">The repository to configure.</param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="assembly" /> is <see langword="null" />.</para>
                <para>-or-</para>
                <para>
                    <paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.LoadPlugins(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined plugins on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to add the plugins to.</param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="assembly" /> is <see langword="null" />.</para>
                <para>-or-</para>
                <para>
                    <paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.DefaultRepositorySelector.LoadAliases(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined aliases on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to alias to.</param>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="assembly" /> is <see langword="null" />.</para>
                <para>-or-</para>
                <para>
                    <paramref name="repository" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="F:log4net.Core.DefaultRepositorySelector.declaringType">
            <summary>
            The fully qualified type of the DefaultRepositorySelector class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Core.ErrorCode">
            <summary>
            Defined error codes that can be passed to the <see cref="M:IErrorHandler.Error(string, Exception, ErrorCode)" /> method.
            </summary>
            <remarks>
                <para>
            Values passed to the <see cref="M:IErrorHandler.Error(string, Exception, ErrorCode)" /> method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.ErrorCode.GenericFailure">
            <summary>
            A general error
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.WriteFailure">
            <summary>
            Error while writing output
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.FlushFailure">
            <summary>
            Failed to flush file
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.CloseFailure">
            <summary>
            Failed to close file
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.FileOpenFailure">
            <summary>
            Unable to open output file
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.MissingLayout">
            <summary>
            No layout specified
            </summary>
        </member>
        <member name="F:log4net.Core.ErrorCode.AddressParseFailure">
            <summary>
            Failed to parse address
            </summary>
        </member>
        <member name="T:log4net.Core.ExceptionEvaluator">
            <summary>
            An evaluator that triggers on an Exception type
            </summary>
            <remarks>
                <para>
            This evaluator will trigger if the type of the Exception
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to a Type in <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.    /// 
            </para>
            </remarks>
            <author>Drew Schaeffer</author>
        </member>
        <member name="F:log4net.Core.ExceptionEvaluator.m_type">
            <summary>
            The type that causes the trigger to fire.
            </summary>
        </member>
        <member name="F:log4net.Core.ExceptionEvaluator.m_triggerOnSubclass">
            <summary>
            Causes subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" /> to cause the trigger to fire.
            </summary>
        </member>
        <member name="M:log4net.Core.ExceptionEvaluator.#ctor">
            <summary>
            Default ctor to allow dynamic creation through a configurator.
            </summary>
        </member>
        <member name="M:log4net.Core.ExceptionEvaluator.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructs an evaluator and initializes to trigger on <paramref name="exType" /></summary>
            <param name="exType">the type that triggers this evaluator.</param>
            <param name="triggerOnSubClass">If true, this evaluator will trigger on subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.</param>
        </member>
        <member name="P:log4net.Core.ExceptionEvaluator.ExceptionType">
            <summary>
            The type that triggers this evaluator.
            </summary>
        </member>
        <member name="P:log4net.Core.ExceptionEvaluator.TriggerOnSubclass">
            <summary>
            If true, this evaluator will trigger on subclasses of <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.
            </summary>
        </member>
        <member name="M:log4net.Core.ExceptionEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the logging event Exception 
            Type is <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />. 
            Otherwise it returns <c>false</c></returns>
            <remarks>
                <para>
            This evaluator will trigger if the Exception Type of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is <see cref="P:log4net.Core.ExceptionEvaluator.ExceptionType" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IAppenderAttachable">
            <summary>
            Interface for attaching appenders to objects.
            </summary>
            <remarks>
                <para>
            Interface for attaching, removing and retrieving appenders.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Attaches an appender.
            </summary>
            <param name="appender">The appender to add.</param>
            <remarks>
                <para>
            Add the specified appender. The implementation may
            choose to allow or deny duplicate appenders.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.IAppenderAttachable.Appenders">
            <summary>
            Gets all attached appenders.
            </summary>
            <value>
            A collection of attached appenders.
            </value>
            <remarks>
                <para>
            Gets a collection of attached appenders.
            If there are no attached appenders the
            implementation should return an empty 
            collection rather than <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.GetAppender(System.String)">
            <summary>
            Gets an attached appender with the specified name.
            </summary>
            <param name="name">The name of the appender to get.</param>
            <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
            <remarks>
                <para>
            Returns an attached appender with the <paramref name="name" /> specified.
            If no appender with the specified name is found <c>null</c> will be
            returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.RemoveAllAppenders">
            <summary>
            Removes all attached appenders.
            </summary>
            <remarks>
                <para>
            Removes and closes all attached appenders
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
                <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
                <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IErrorHandler">
            <summary>
            Appenders may delegate their error handling to an <see cref="T:log4net.Core.IErrorHandler" />.
            </summary>
            <remarks>
                <para>
            Error handling is a particularly tedious to get right because by
            definition errors are hard to predict and to reproduce. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
            <summary>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </summary>
            <param name="message">The message associated with the error.</param>
            <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
            <param name="errorCode">The error code associated with the error.</param>
            <remarks>
                <para>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception)">
            <summary>
            Prints the error message passed as a parameter.
            </summary>
            <param name="message">The message associated with the error.</param>
            <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
            <remarks>
                <para>
            See <see cref="M:Error(string,Exception,ErrorCode)" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IErrorHandler.Error(System.String)">
            <summary>
            Prints the error message passed as a parameter.
            </summary>
            <param name="message">The message associated with the error.</param>
            <remarks>
                <para>
            See <see cref="M:Error(string,Exception,ErrorCode)" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IFixingRequired">
            <summary>
            Interface for objects that require fixing.
            </summary>
            <remarks>
                <para>
            Interface that indicates that the object requires fixing before it
            can be taken outside the context of the appender's 
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </para>
                <para>
            When objects that implement this interface are stored 
            in the context properties maps <see cref="T:log4net.GlobalContext" /><see cref="P:log4net.GlobalContext.Properties" /> and <see cref="T:log4net.ThreadContext" /><see cref="P:log4net.ThreadContext.Properties" /> are fixed 
            (see <see cref="P:log4net.Core.LoggingEvent.Fix" />) the <see cref="M:log4net.Core.IFixingRequired.GetFixedObject" />
            method will be called.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.IFixingRequired.GetFixedObject">
            <summary>
            Get a portable version of this object
            </summary>
            <returns>the portable instance of this object</returns>
            <remarks>
                <para>
            Get a portable instance object that represents the current
            state of this object. The portable object can be stored
            and logged from any thread with identical results.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.ILogger">
            <summary>
            Interface that all loggers implement
            </summary>
            <remarks>
                <para>
            This interface supports logging events and testing if a level
            is enabled for logging.
            </para>
                <para>
            These methods will not throw exceptions. Note to implementor, ensure
            that the implementation of these methods cannot allow an exception
            to be thrown to the caller.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="P:log4net.Core.ILogger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
            <value>
            The name of the logger.
            </value>
            <remarks>
                <para>
            The name of this logger
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.ILogger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            This generic form is intended to be used by wrappers.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">the exception to log, including its stack trace. Pass <c>null</c> to not log an exception.</param>
            <remarks>
                <para>
            Generates a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" /> and <paramref name="exception" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.ILogger.Log(log4net.Core.LoggingEvent)">
            <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
                <para>
            Logs the specified logging event through this logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.ILogger.IsEnabledFor(log4net.Core.Level)">
            <summary>
            Checks if this logger is enabled for a given <see cref="T:log4net.Core.Level" /> passed as parameter.
            </summary>
            <param name="level">The level to check.</param>
            <returns>
                <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
            Test if this logger is going to log events of the specified <paramref name="level" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.ILogger.Repository">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.ILoggerWrapper">
            <summary>
            Base interface for all wrappers
            </summary>
            <remarks>
                <para>
            Base interface for all wrappers.
            </para>
                <para>
            All wrappers must implement this interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="P:log4net.Core.ILoggerWrapper.Logger">
            <summary>
            Get the implementation behind this wrapper object.
            </summary>
            <value>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this object.
            </value>
            <remarks>
                <para>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this
            object. The <c>Logger</c> object may not 
            be the same object as this object because of logger decorators.
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IOptionHandler">
            <summary>
            Interface used to delay activate a configured object.
            </summary>
            <remarks>
                <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
                <para>
            If a component implements this interface then the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions" /> method 
            must be called by the container after its all the configured properties have been set 
            and before the component can be used.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.IOptionHandler.ActivateOptions">
            <summary>
            Activate the options that were previously set with calls to properties.
            </summary>
            <remarks>
                <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
                <para>
            If a component implements this interface then this method must be called
            after its properties have been set before the component can be used.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggerRepositoryCreationEventHandler">
            <summary>
            Delegate used to handle logger repository creation event notifications
            </summary>
            <param name="sender">The <see cref="T:log4net.Core.IRepositorySelector" /> which created the repository.</param>
            <param name="e">The <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> event args
            that holds the <see cref="T:log4net.Repository.ILoggerRepository" /> instance that has been created.</param>
            <remarks>
                <para>
            Delegate used to handle logger repository creation event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggerRepositoryCreationEventArgs">
            <summary>
            Provides data for the <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent" /> event.
            </summary>
            <remarks>
                <para>
            A <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent" /> 
            event is raised every time a <see cref="T:log4net.Repository.ILoggerRepository" /> is created.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerRepositoryCreationEventArgs.m_repository">
            <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created
            </summary>
        </member>
        <member name="M:log4net.Core.LoggerRepositoryCreationEventArgs.#ctor(log4net.Repository.ILoggerRepository)">
            <summary>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            </summary>
            <param name="repository">the <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created</param>
            <remarks>
                <para>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggerRepositoryCreationEventArgs.LoggerRepository">
            <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </value>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.IRepositorySelector">
            <summary>
            Interface used by the <see cref="T:log4net.LogManager" /> to select the <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.LogManager" /> uses a <see cref="T:log4net.Core.IRepositorySelector" /> 
            to specify the policy for selecting the correct <see cref="T:log4net.Repository.ILoggerRepository" /> 
            to return to the caller.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
            <param name="assembly">The assembly to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository" /></param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the assembly.</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </para>
                <para>
            How the association between <see cref="T:System.Reflection.Assembly" /> and <see cref="T:log4net.Repository.ILoggerRepository" />
            is made is not defined. The implementation may choose any method for
            this association. The results of this method must be repeatable, i.e.
            when called again with the same arguments the result must be the
            save value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.String)">
            <summary>
            Gets the named <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
            <param name="repositoryName">The name to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <returns>The named <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
            <remarks>
            Lookup a named <see cref="T:log4net.Repository.ILoggerRepository" />. This is the repository created by
            calling <see cref="M:CreateRepository(string,Type)" />.
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a new repository for the assembly specified.
            </summary>
            <param name="assembly">The assembly to use to create the domain to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <returns>The repository created.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the domain
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
                <para>
            How the association between <see cref="T:System.Reflection.Assembly" /> and <see cref="T:log4net.Repository.ILoggerRepository" />
            is made is not defined. The implementation may choose any method for
            this association.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a new repository with the name specified.
            </summary>
            <param name="repositoryName">The name to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
            <returns>The repository created.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the name
            specified such that a call to <see cref="M:GetRepository(string)" /> with the
            same name will return the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns>
                <c>true</c> if the repository exists</returns>
            <remarks>
                <para>
            Test if a named repository exists. Use <see cref="M:CreateRepository(Assembly, Type)" />
            to create a new repository and <see cref="M:GetRepository(Assembly)" /> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.IRepositorySelector.GetAllRepositories">
            <summary>
            Gets an array of all currently defined repositories.
            </summary>
            <returns>
            An array of the <see cref="T:log4net.Repository.ILoggerRepository" /> instances created by 
            this <see cref="T:log4net.Core.IRepositorySelector" />.</returns>
            <remarks>
                <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
                <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.ITriggeringEventEvaluator">
            <summary>
            Test if an <see cref="T:log4net.Core.LoggingEvent" /> triggers an action
            </summary>
            <remarks>
                <para>
            Implementations of this interface allow certain appenders to decide
            when to perform an appender specific action.
            </para>
                <para>
            The action or behavior triggered is defined by the implementation.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.ITriggeringEventEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Test if this event triggers the action
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>
                <c>true</c> if this event triggers the action, otherwise <c>false</c></returns>
            <remarks>
                <para>
            Return <c>true</c> if this event triggers the action
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.Level">
            <summary>
            Defines the default set of levels recognized by the system.
            </summary>
            <remarks>
                <para>
            Each <see cref="T:log4net.Core.LoggingEvent" /> has an associated <see cref="T:log4net.Core.Level" />.
            </para>
                <para>
            Levels have a numeric <see cref="P:log4net.Core.Level.Value" /> that defines the relative 
            ordering between levels. Two Levels with the same <see cref="P:log4net.Core.Level.Value" /> 
            are deemed to be equivalent.
            </para>
                <para>
            The levels that are recognized by log4net are set for each <see cref="T:log4net.Repository.ILoggerRepository" />
            and each repository can have different levels defined. The levels are stored
            in the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" /> on the repository. Levels are
            looked up by name from the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />.
            </para>
                <para>
            When logging at level INFO the actual level used is not <see cref="F:log4net.Core.Level.Info" /> but
            the value of <c>LoggerRepository.LevelMap["INFO"]</c>. The default value for this is
            <see cref="F:log4net.Core.Level.Info" />, but this can be changed by reconfiguring the level map.
            </para>
                <para>
            Each level has a <see cref="P:log4net.Core.Level.DisplayName" /> in addition to its <see cref="P:log4net.Core.Level.Name" />. The 
            <see cref="P:log4net.Core.Level.DisplayName" /> is the string that is written into the output log. By default
            the display name is the same as the level name, but this can be used to alias levels
            or to localize the log output.
            </para>
                <para>
            Some of the predefined levels recognized by the system are:
            </para>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.Off" />.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.Fatal" />.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.Error" />.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.Warn" />.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.Info" />.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.Debug" />.</description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.Level.All" />.</description>
                    </item>
                </list>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="level">Integer value for this level, higher values represent more severe levels.</param>
            <param name="levelName">The string name of this level.</param>
            <param name="displayName">The display name for this level. This may be localized or otherwise different from the name</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="level">Integer value for this level, higher values represent more severe levels.</param>
            <param name="levelName">The string name of this level.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.Level.Name">
            <summary>
            Gets the name of this level.
            </summary>
            <value>
            The name of this level.
            </value>
            <remarks>
                <para>
            Gets the name of this level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.Level.Value">
            <summary>
            Gets the value of this level.
            </summary>
            <value>
            The value of this level.
            </value>
            <remarks>
                <para>
            Gets the value of this level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.Level.DisplayName">
            <summary>
            Gets the display name of this level.
            </summary>
            <value>
            The display name of this level.
            </value>
            <remarks>
                <para>
            Gets the display name of this level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.ToString">
            <summary>
            Returns the <see cref="T:System.String" /> representation of the current 
            <see cref="T:log4net.Core.Level" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> representation of the current <see cref="T:log4net.Core.Level" />.
            </returns>
            <remarks>
                <para>
            Returns the level <see cref="P:log4net.Core.Level.Name" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.Equals(System.Object)">
            <summary>
            Compares levels.
            </summary>
            <param name="o">The object to compare against.</param>
            <returns>
                <c>true</c> if the objects are equal.</returns>
            <remarks>
                <para>
            Compares the levels of <see cref="T:log4net.Core.Level" /> instances, and 
            defers to base class if the target object is not a <see cref="T:log4net.Core.Level" />
            instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.GetHashCode">
            <summary>
            Returns a hash code
            </summary>
            <returns>A hash code for the current <see cref="T:log4net.Core.Level" />.</returns>
            <remarks>
                <para>
            Returns a hash code suitable for use in hashing algorithms and data 
            structures like a hash table.
            </para>
                <para>
            Returns the hash code of the level <see cref="P:log4net.Core.Level.Value" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an 
            indication of their relative values.
            </summary>
            <param name="r">A <see cref="T:log4net.Core.Level" /> instance or <see langword="null" /> to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            values compared. The return value has these meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>This instance is less than <paramref name="r" />.</description></item><item><term>Zero</term><description>This instance is equal to <paramref name="r" />.</description></item><item><term>Greater than zero</term><description><para>This instance is greater than <paramref name="r" />.</para><para>-or-</para><para><paramref name="r" /> is <see langword="null" />.</para></description></item></list></returns>
            <remarks>
                <para>
                    <paramref name="r" /> must be an instance of <see cref="T:log4net.Core.Level" /> 
            or <see langword="null" />; otherwise, an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <paramref name="r" /> is not a <see cref="T:log4net.Core.Level" />.</exception>
        </member>
        <member name="M:log4net.Core.Level.op_GreaterThan(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
                <c>true</c> if <paramref name="l" /> is greater than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_LessThan(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
                <c>true</c> if <paramref name="l" /> is less than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_GreaterThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
                <c>true</c> if <paramref name="l" /> is greater than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_LessThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /></param>
            <param name="r">A <see cref="T:log4net.Core.Level" /></param>
            <returns>
                <c>true</c> if <paramref name="l" /> is less than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_Equality(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have the same value.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <returns>
                <c>true</c> if the value of <paramref name="l" /> is the same as the 
            value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.op_Inequality(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have different values.
            </summary>
            <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
            <returns>
                <c>true</c> if the value of <paramref name="l" /> is different from
            the value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.Level.Compare(log4net.Core.Level,log4net.Core.Level)">
            <summary>
            Compares two specified <see cref="T:log4net.Core.Level" /> instances.
            </summary>
            <param name="l">The first <see cref="T:log4net.Core.Level" /> to compare.</param>
            <param name="r">The second <see cref="T:log4net.Core.Level" /> to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            two values compared. The return value has these meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description><paramref name="l" /> is less than <paramref name="r" />.</description></item><item><term>Zero</term><description><paramref name="l" /> is equal to <paramref name="r" />.</description></item><item><term>Greater than zero</term><description><paramref name="l" /> is greater than <paramref name="r" />.</description></item></list></returns>
            <remarks>
                <para>
            Compares two levels.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.Level.Off">
            <summary>
            The <see cref="F:log4net.Core.Level.Off" /> level designates a higher level than all the rest.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Log4Net_Debug">
            <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Emergency">
            <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Fatal">
            <summary>
            The <see cref="F:log4net.Core.Level.Fatal" /> level designates very severe error events 
            that will presumably lead the application to abort.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Alert">
            <summary>
            The <see cref="F:log4net.Core.Level.Alert" /> level designates very severe error events. 
            Take immediate action, alerts.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Critical">
            <summary>
            The <see cref="F:log4net.Core.Level.Critical" /> level designates very severe error events. 
            Critical condition, critical.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Severe">
            <summary>
            The <see cref="F:log4net.Core.Level.Severe" /> level designates very severe error events.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Error">
            <summary>
            The <see cref="F:log4net.Core.Level.Error" /> level designates error events that might 
            still allow the application to continue running.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Warn">
            <summary>
            The <see cref="F:log4net.Core.Level.Warn" /> level designates potentially harmful 
            situations.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Notice">
            <summary>
            The <see cref="F:log4net.Core.Level.Notice" /> level designates informational messages 
            that highlight the progress of the application at the highest level.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Info">
            <summary>
            The <see cref="F:log4net.Core.Level.Info" /> level designates informational messages that 
            highlight the progress of the application at coarse-grained level.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Debug">
            <summary>
            The <see cref="F:log4net.Core.Level.Debug" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Fine">
            <summary>
            The <see cref="F:log4net.Core.Level.Fine" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Trace">
            <summary>
            The <see cref="F:log4net.Core.Level.Trace" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Finer">
            <summary>
            The <see cref="F:log4net.Core.Level.Finer" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Verbose">
            <summary>
            The <see cref="F:log4net.Core.Level.Verbose" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.Finest">
            <summary>
            The <see cref="F:log4net.Core.Level.Finest" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
        </member>
        <member name="F:log4net.Core.Level.All">
            <summary>
            The <see cref="F:log4net.Core.Level.All" /> level designates the lowest level possible.
            </summary>
        </member>
        <member name="T:log4net.Core.LevelCollection">
            <summary>
            A strongly-typed collection of <see cref="T:log4net.Core.Level" /> objects.
            </summary>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Core.LevelCollection.ILevelCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
        </member>
        <member name="P:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
                <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.ReadOnly(log4net.Core.LevelCollection)">
            <summary>
            Creates a read-only wrapper for a <c>LevelCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            A <c>LevelCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>LevelCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <c>LevelCollection</c>.
            </summary>
            <param name="c">The <c>LevelCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.Level[])">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level" /> array.
            </summary>
            <param name="a">The <see cref="T:log4net.Core.Level" /> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level" /> collection.
            </summary>
            <param name="col">The <see cref="T:log4net.Core.Level" /> collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:log4net.Core.LevelCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
        </member>
        <member name="F:log4net.Core.LevelCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
        </member>
        <member name="P:log4net.Core.LevelCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>LevelCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[])">
            <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level" /> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Core.Level" /> array to copy to.</param>
        </member>
        <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[],System.Int32)">
            <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level" /> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Core.Level" /> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:log4net.Core.LevelCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>false, because the backing type is an array, which is never thread-safe.</returns>
        </member>
        <member name="P:log4net.Core.LevelCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:log4net.Core.LevelCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:log4net.Core.Level" /> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.Add(log4net.Core.Level)">
            <summary>
            Adds a <see cref="T:log4net.Core.Level" /> to the end of the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level" /> to be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.Clear">
            <summary>
            Removes all elements from the <c>LevelCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
            <returns>A new <see cref="T:log4net.Core.LevelCollection" /> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.Contains(log4net.Core.Level)">
            <summary>
            Determines whether a given <see cref="T:log4net.Core.Level" /> is in the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level" /> to check for.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> is found in the <c>LevelCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.IndexOf(log4net.Core.Level)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Core.Level" />
            in the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level" /> to locate in the <c>LevelCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>LevelCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.Insert(System.Int32,log4net.Core.Level)">
            <summary>
            Inserts an element into the <c>LevelCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The <see cref="T:log4net.Core.Level" /> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.Remove(log4net.Core.Level)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Core.Level" /> from the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Core.Level" /> to remove from the <c>LevelCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Core.Level" /> was not found in the <c>LevelCollection</c>.
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>LevelCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
            </exception>
        </member>
        <member name="P:log4net.Core.LevelCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:log4net.Core.LevelCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="M:log4net.Core.LevelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>LevelCollection</c>.
            </summary>
            <returns>An <see cref="T:log4net.Core.LevelCollection.Enumerator" /> for the entire <c>LevelCollection</c>.</returns>
        </member>
        <member name="P:log4net.Core.LevelCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>LevelCollection</c> can contain.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.LevelCollection)">
            <summary>
            Adds the elements of another <c>LevelCollection</c> to the current <c>LevelCollection</c>.
            </summary>
            <param name="x">The <c>LevelCollection</c> whose elements should be added to the end of the current <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.Level[])">
            <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level" /> array to the current <c>LevelCollection</c>.
            </summary>
            <param name="x">The <see cref="T:log4net.Core.Level" /> array whose elements should be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level" /> collection to the current <c>LevelCollection</c>.
            </summary>
            <param name="col">The <see cref="T:log4net.Core.Level" /> collection whose elements should be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:log4net.Core.LevelCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="i" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="i" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
            </exception>
        </member>
        <member name="T:log4net.Core.LevelCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.Enumerator.#ctor(log4net.Core.LevelCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:log4net.Core.LevelCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Core.LevelCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
                <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Core.LevelCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:log4net.Core.LevelEvaluator">
            <summary>
            An evaluator that triggers at a threshold level
            </summary>
            <remarks>
                <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.LevelEvaluator.m_threshold">
            <summary>
            The threshold for triggering
            </summary>
        </member>
        <member name="M:log4net.Core.LevelEvaluator.#ctor">
            <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off" /> threshold.
            </summary>
            <remarks>
                <para>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off" /> threshold.
            </para>
                <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelEvaluator.#ctor(log4net.Core.Level)">
            <summary>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level" /> threshold.
            </summary>
            <param name="threshold">the threshold to trigger at</param>
            <remarks>
                <para>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level" /> threshold.
            </para>
                <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LevelEvaluator.Threshold">
            <summary>
            the threshold to trigger at
            </summary>
            <value>
            The <see cref="T:log4net.Core.Level" /> that will cause this evaluator to trigger
            </value>
            <remarks>
                <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the event level
            is equal or higher than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />. 
            Otherwise it returns <c>false</c></returns>
            <remarks>
                <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:IsTriggeringEvent(LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LevelMap">
            <summary>
            Mapping between string name and Level object
            </summary>
            <remarks>
                <para>
            Mapping between string name and <see cref="T:log4net.Core.Level" /> object.
            This mapping is held separately for each <see cref="T:log4net.Repository.ILoggerRepository" />.
            The level name is case insensitive.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.LevelMap.m_mapName2Level">
            <summary>
            Mapping from level name to Level object. The
            level name is case insensitive
            </summary>
        </member>
        <member name="M:log4net.Core.LevelMap.#ctor">
            <summary>
            Construct the level map
            </summary>
            <remarks>
                <para>
            Construct the level map.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.Clear">
            <summary>
            Clear the internal maps of all levels
            </summary>
            <remarks>
                <para>
            Clear the internal maps of all levels
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LevelMap.Item(System.String)">
            <summary>
            Lookup a <see cref="T:log4net.Core.Level" /> by name
            </summary>
            <param name="name">The name of the Level to lookup</param>
            <returns>a Level from the map with the name specified</returns>
            <remarks>
                <para>
            Returns the <see cref="T:log4net.Core.Level" /> from the
            map with the name specified. If the no level is
            found then <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32)">
            <summary>
            Create a new Level and add it to the map
            </summary>
            <param name="name">the string to display for the Level</param>
            <param name="value">the level value to give to the Level</param>
            <remarks>
                <para>
            Create a new Level and add it to the map
            </para>
            </remarks>
            <seealso cref="M:Add(string,int,string)" />
        </member>
        <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32,System.String)">
            <summary>
            Create a new Level and add it to the map
            </summary>
            <param name="name">the string to display for the Level</param>
            <param name="value">the level value to give to the Level</param>
            <param name="displayName">the display name to give to the Level</param>
            <remarks>
                <para>
            Create a new Level and add it to the map
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.Add(log4net.Core.Level)">
            <summary>
            Add a Level to the map
            </summary>
            <param name="level">the Level to add</param>
            <remarks>
                <para>
            Add a Level to the map
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LevelMap.AllLevels">
            <summary>
            Return all possible levels as a list of Level objects.
            </summary>
            <returns>all possible levels as a list of Level objects</returns>
            <remarks>
                <para>
            Return all possible levels as a list of Level objects.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LevelMap.LookupWithDefault(log4net.Core.Level)">
            <summary>
            Lookup a named level from the map
            </summary>
            <param name="defaultLevel">the name of the level to lookup is taken from this level. 
            If the level is not set on the map then this level is added</param>
            <returns>the level in the map with the name specified</returns>
            <remarks>
                <para>
            Lookup a named level from the map. The name of the level to lookup is taken
            from the <see cref="P:log4net.Core.Level.Name" /> property of the <paramref name="defaultLevel" />
            argument.
            </para>
                <para>
            If no level with the specified name is found then the 
            <paramref name="defaultLevel" /> argument is added to the level map
            and returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LocationInfo">
            <summary>
            The internal representation of caller location information.
            </summary>
            <remarks>
                <para>
            This class uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
                <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
                <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
                <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
                <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LocationInfo.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class based on the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="className">The fully qualified class name.</param>
            <param name="methodName">The method name.</param>
            <param name="fileName">The file name.</param>
            <param name="lineNumber">The line number of the method within the file.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class with the specified data.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.ClassName">
            <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
            <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
            <remarks>
                <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.FileName">
            <summary>
            Gets the file name of the caller.
            </summary>
            <value>
            The file name of the caller.
            </value>
            <remarks>
                <para>
            Gets the file name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
            <value>
            The line number of the caller.
            </value>
            <remarks>
                <para>
            Gets the line number of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.MethodName">
            <summary>
            Gets the method name of the caller.
            </summary>
            <value>
            The method name of the caller.
            </value>
            <remarks>
                <para>
            Gets the method name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.FullInfo">
            <summary>
            Gets all available caller information
            </summary>
            <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></value>
            <remarks>
                <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LocationInfo.StackFrames">
            <summary>
            Gets the stack frames from the stack trace of the caller making the log request
            </summary>
        </member>
        <member name="F:log4net.Core.LocationInfo.declaringType">
            <summary>
            The fully qualified type of the LocationInfo class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.LocationInfo.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:log4net.Core.LogException">
            <summary>
            Exception base type for log4net.
            </summary>
            <remarks>
                <para>
            This type extends <see cref="T:System.ApplicationException" />. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LogException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class with
            the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggerManager">
            <summary>
            Static manager that controls the creation of repositories
            </summary>
            <remarks>
                <para>
            Static manager that controls the creation of repositories
            </para>
                <para>
            This class is used by the wrapper managers (e.g. <see cref="T:log4net.LogManager" />)
            to provide access to the <see cref="T:log4net.Core.ILogger" /> objects.
            </para>
                <para>
            This manager also holds the <see cref="T:log4net.Core.IRepositorySelector" /> that is used to
            lookup and create repositories. The selector can be set either programmatically using
            the <see cref="P:log4net.Core.LoggerManager.RepositorySelector" /> property, or by setting the <c>log4net.RepositorySelector</c>
            AppSetting in the applications config file to the fully qualified type name of the
            selector to use. 
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LoggerManager.#ctor">
            <summary>
            Private constructor to prevent instances. Only static methods should be used.
            </summary>
            <remarks>
                <para>
            Private constructor to prevent instances. Only static methods should be used.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.#cctor">
            <summary>
            Hook the shutdown event
            </summary>
            <remarks>
                <para>
            On the full .NET runtime, the static constructor hooks up the 
            <c>AppDomain.ProcessExit</c> and <c>AppDomain.DomainUnload</c>&gt; events. 
            These are used to shutdown the log4net system as the application exits.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.RegisterAppDomainEvents">
            <summary>
            Register for ProcessExit and DomainUnload events on the AppDomain
            </summary>
            <remarks>
                <para>
            This needs to be in a separate method because the events make
            a LinkDemand for the ControlAppDomain SecurityPermission. Because
            this is a LinkDemand it is demanded at JIT time. Therefore we cannot
            catch the exception in the method itself, we have to catch it in the
            caller.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.String)">
            <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <param name="repository">the repository to lookup in</param>
            <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetRepository(System.String)">
            <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <param name="repository">the repository to lookup in</param>
            <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
            <remarks>
                <para>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified repository.
            </returns>
            <remarks>
                <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified assembly's repository.
            </returns>
            <remarks>
                <para>
            If the named logger exists (in the specified assembly's repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <returns>All the defined loggers.</returns>
            <remarks>
                <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <returns>All the defined loggers.</returns>
            <remarks>
                <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
                <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
                <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
                <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
                <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <param name="type">The <paramref name="type" /> of which the fullname will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
                <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
            <param name="repositoryAssembly">the assembly to use to lookup the repository</param>
            <param name="type">The <paramref name="type" /> of which the fullname will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
            <remarks>
                <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.Shutdown">
            <summary>
            Shuts down the log4net system.
            </summary>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
                <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.String)">
            <summary>
            Shuts down the repository for the repository specified.
            </summary>
            <param name="repository">The repository to shutdown.</param>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the <paramref name="repository" /> specified.
            </para>
                <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.Reflection.Assembly)">
            <summary>
            Shuts down the repository for the repository specified.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the repository. The repository is looked up using
            the <paramref name="repositoryAssembly" /> specified.
            </para>
                <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.String)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <param name="repository">The repository to reset.</param>
            <remarks>
                <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.Reflection.Assembly)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
            <remarks>
                <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
            </remarks>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateDomain(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetAllRepositories">
            <summary>
            Gets an array of all currently defined repositories.
            </summary>
            <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository" /> objects.</returns>
            <remarks>
                <para>
            Gets an array of all currently defined repositories.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggerManager.RepositorySelector">
            <summary>
            Gets or sets the repository selector used by the <see cref="T:log4net.LogManager" />.
            </summary>
            <value>
            The repository selector used by the <see cref="T:log4net.LogManager" />.
            </value>
            <remarks>
                <para>
            The repository selector (<see cref="T:log4net.Core.IRepositorySelector" />) is used by 
            the <see cref="T:log4net.LogManager" /> to create and select repositories 
            (<see cref="T:log4net.Repository.ILoggerRepository" />).
            </para>
                <para>
            The caller to <see cref="T:log4net.LogManager" /> supplies either a string name 
            or an assembly (if not supplied the assembly is inferred using 
            <see cref="M:Assembly.GetCallingAssembly()" />).
            </para>
                <para>
            This context is used by the selector to lookup a specific repository.
            </para>
                <para>
            For the full .NET Framework, the default repository is <c>DefaultRepositorySelector</c>;
            for the .NET Compact Framework <c>CompactRepositorySelector</c> is the default
            repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.GetVersionInfo">
            <summary>
            Internal method to get pertinent version info.
            </summary>
            <returns>A string of version info.</returns>
        </member>
        <member name="M:log4net.Core.LoggerManager.OnDomainUnload(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.AppDomain.DomainUnload" /> event fires
            </summary>
            <param name="sender">the <see cref="T:System.AppDomain" /> that is exiting</param>
            <param name="e">null</param>
            <remarks>
                <para>
            Called when the <see cref="E:System.AppDomain.DomainUnload" /> event fires.
            </para>
                <para>
            When the event is triggered the log4net system is <see cref="M:Shutdown()" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggerManager.OnProcessExit(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.AppDomain.ProcessExit" /> event fires
            </summary>
            <param name="sender">the <see cref="T:System.AppDomain" /> that is exiting</param>
            <param name="e">null</param>
            <remarks>
                <para>
            Called when the <see cref="E:System.AppDomain.ProcessExit" /> event fires.
            </para>
                <para>
            When the event is triggered the log4net system is <see cref="M:Shutdown()" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerManager.declaringType">
            <summary>
            The fully qualified type of the LoggerManager class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerManager.s_repositorySelector">
            <summary>
            Initialize the default repository selector
            </summary>
        </member>
        <member name="T:log4net.Core.LoggerWrapperImpl">
            <summary>
            Implementation of the <see cref="T:log4net.Core.ILoggerWrapper" /> interface.
            </summary>
            <remarks>
                <para>
            This class should be used as the base for all wrapper implementations.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LoggerWrapperImpl.#ctor(log4net.Core.ILogger)">
            <summary>
            Constructs a new wrapper for the specified logger.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <remarks>
                <para>
            Constructs a new wrapper for the specified logger.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggerWrapperImpl.Logger">
            <summary>
            Gets the implementation behind this wrapper object.
            </summary>
            <value>
            The <see cref="T:log4net.Core.ILogger" /> object that this object is implementing.
            </value>
            <remarks>
                <para>
            The <c>Logger</c> object may not be the same object as this object 
            because of logger decorators.
            </para>
                <para>
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggerWrapperImpl.m_logger">
            <summary>
            The logger that this object is wrapping
            </summary>
        </member>
        <member name="T:log4net.Core.LoggingEventData">
            <summary>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent" /></summary>
            <remarks>
                <para>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent" /></para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.LoggingEventData.LoggerName">
            <summary>
            The logger name.
            </summary>
            <remarks>
                <para>
            The logger name.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Level">
            <summary>
            Level of logging event.
            </summary>
            <remarks>
                <para>
            Level of logging event. Level cannot be Serializable
            because it is a flyweight.  Due to its special serialization it
            cannot be declared final either.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Message">
            <summary>
            The application supplied message.
            </summary>
            <remarks>
                <para>
            The application supplied message of logging event.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.ThreadName">
            <summary>
            The name of thread
            </summary>
            <remarks>
                <para>
            The name of thread in which this logging event was generated
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.TimeStamp">
            <summary>
            Gets or sets the local time the event was logged
            </summary>
            <remarks>
                <para>
            Prefer using the <see cref="P:log4net.Core.LoggingEventData.TimeStampUtc" /> setter, since local time can be ambiguous.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEventData.TimeStampUtc">
            <summary>
            Gets or sets the UTC time the event was logged
            </summary>
            <remarks>
                <para>
            The TimeStamp is stored in the UTC time zone.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.LocationInfo">
            <summary>
            Location information for the caller.
            </summary>
            <remarks>
                <para>
            Location information for the caller.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.UserName">
            <summary>
            String representation of the user
            </summary>
            <remarks>
                <para>
            String representation of the user's windows name,
            like DOMAIN\username
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Identity">
            <summary>
            String representation of the identity.
            </summary>
            <remarks>
                <para>
            String representation of the current thread's principal identity.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.ExceptionString">
            <summary>
            The string representation of the exception
            </summary>
            <remarks>
                <para>
            The string representation of the exception
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Domain">
            <summary>
            String representation of the AppDomain.
            </summary>
            <remarks>
                <para>
            String representation of the AppDomain.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEventData.Properties">
            <summary>
            Additional event specific properties
            </summary>
            <remarks>
                <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.FixFlags">
            <summary>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix" /> property
            </summary>
            <remarks>
                <para>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix" /> property
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.FixFlags.Mdc">
            <summary>
            Fix the MDC
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Ndc">
            <summary>
            Fix the NDC
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Message">
            <summary>
            Fix the rendered message
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.ThreadName">
            <summary>
            Fix the thread name
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.LocationInfo">
            <summary>
            Fix the callers location information
            </summary>
            <remarks>
            CAUTION: Very slow to generate
            </remarks>
        </member>
        <member name="F:log4net.Core.FixFlags.UserName">
            <summary>
            Fix the callers windows user name
            </summary>
            <remarks>
            CAUTION: Slow to generate
            </remarks>
        </member>
        <member name="F:log4net.Core.FixFlags.Domain">
            <summary>
            Fix the domain friendly name
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Identity">
            <summary>
            Fix the callers principal name
            </summary>
            <remarks>
            CAUTION: May be slow to generate
            </remarks>
        </member>
        <member name="F:log4net.Core.FixFlags.Exception">
            <summary>
            Fix the exception text
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Properties">
            <summary>
            Fix the event properties. Active properties must implement <see cref="T:log4net.Core.IFixingRequired" /> in order to be eligible for fixing.
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.None">
            <summary>
            No fields fixed
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.All">
            <summary>
            All fields fixed
            </summary>
        </member>
        <member name="F:log4net.Core.FixFlags.Partial">
            <summary>
            Partial fields fixed
            </summary>
            <remarks>
                <para>
            This set of partial fields gives good performance. The following fields are fixed:
            </para>
                <list type="bullet">
                    <item>
                        <description>
                            <see cref="F:log4net.Core.FixFlags.Message" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.FixFlags.ThreadName" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.FixFlags.Exception" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.FixFlags.Domain" />
                        </description>
                    </item>
                    <item>
                        <description>
                            <see cref="F:log4net.Core.FixFlags.Properties" />
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:log4net.Core.LoggingEvent">
            <summary>
            The internal representation of logging events. 
            </summary>
            <remarks>
                <para>
            When an affirmative decision is made to log then a 
            <see cref="T:log4net.Core.LoggingEvent" /> instance is created. This instance 
            is passed around to the different log4net components.
            </para>
                <para>
            This class is of concern to those wishing to extend log4net.
            </para>
                <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()" />. There is a performance penalty
            for incurred by calling <see cref="M:FixVolatileData()" /> but it
            is essential to maintaining data consistency.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Douglas de la Torre</author>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,System.String,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class
            from the supplied parameters.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="repository">The repository this event is logged in.</param>
            <param name="loggerName">The name of the logger of this event.</param>
            <param name="level">The level of this event.</param>
            <param name="message">The message of this event.</param>
            <param name="exception">The exception for this event.</param>
            <remarks>
                <para>
            Except <see cref="P:log4net.Core.LoggingEvent.TimeStamp" />, <see cref="P:log4net.Core.LoggingEvent.Level" /> and <see cref="P:log4net.Core.LoggingEvent.LoggerName" />, 
            all fields of <c>LoggingEvent</c> are filled when actually needed. Call
            <see cref="M:FixVolatileData()" /> to cache all data locally
            to prevent inconsistencies.
            </para>
                <para>This method is called by the log4net framework
            to create a logging event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData,log4net.Core.FixFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="repository">The repository this event is logged in.</param>
            <param name="data">Data used to initialize the logging event.</param>
            <param name="fixedData">The fields in the <paranref name="data" /> struct that have already been fixed.</param>
            <remarks>
                <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
                <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
                <para>
            The <paramref name="fixedData" /> parameter should be used to specify which fields in the
            <paramref name="data" /> struct have been preset. Fields not specified in the <paramref name="fixedData" />
            will be captured from the environment if requested or fixed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="repository">The repository this event is logged in.</param>
            <param name="data">Data used to initialize the logging event.</param>
            <remarks>
                <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
                <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
                <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix" /> flags to <see cref="F:log4net.Core.FixFlags.All" />,
            this assumes that all the data relating to this event is passed in via the <paramref name="data" />
            parameter and no other data should be captured from the environment.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(log4net.Core.LoggingEventData)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
            <param name="data">Data used to initialize the logging event.</param>
            <remarks>
                <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
                <para>
            Use the <see cref="M:GetLoggingEventData(FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
                <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix" /> flags to <see cref="F:log4net.Core.FixFlags.All" />,
            this assumes that all the data relating to this event is passed in via the <paramref name="data" />
            parameter and no other data should be captured from the environment.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.StartTime">
            <summary>
            Gets the time when the current process started.
            </summary>
            <value>
            This is the time when this process started.
            </value>
            <remarks>
                <para>
            The TimeStamp is stored internally in UTC and converted to the local time zone for this computer.
            </para>
                <para>
            Tries to get the start time for the current process.
            Failing that it returns the time of the first call to
            this property.
            </para>
                <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating and therefore
            without the process start time being reset.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.StartTimeUtc">
            <summary>
            Gets the UTC time when the current process started.
            </summary>
            <value>
            This is the UTC time when this process started.
            </value>
            <remarks>
                <para>
            Tries to get the start time for the current process.
            Failing that it returns the time of the first call to
            this property.
            </para>
                <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating and therefore
            without the process start time being reset.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Level">
            <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </summary>
            <value>
            The <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </value>
            <remarks>
                <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.TimeStamp">
            <summary>
            Gets the time of the logging event.
            </summary>
            <value>
            The time of the logging event.
            </value>
            <remarks>
                <para>
            The TimeStamp is stored in UTC and converted to the local time zone for this computer.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.TimeStampUtc">
            <summary>
            Gets UTC the time of the logging event.
            </summary>
            <value>
            The UTC time of the logging event.
            </value>
        </member>
        <member name="P:log4net.Core.LoggingEvent.LoggerName">
            <summary>
            Gets the name of the logger that logged the event.
            </summary>
            <value>
            The name of the logger that logged the event.
            </value>
            <remarks>
                <para>
            Gets the name of the logger that logged the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.LocationInformation">
            <summary>
            Gets the location information for this logging event.
            </summary>
            <value>
            The location information for this logging event.
            </value>
            <remarks>
                <para>
            The collected information is cached for future use.
            </para>
                <para>
            See the <see cref="T:log4net.Core.LocationInfo" /> class for more information on
            supported frameworks and the different behavior in Debug and
            Release builds.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.MessageObject">
            <summary>
            Gets the message object used to initialize this event.
            </summary>
            <value>
            The message object used to initialize this event.
            </value>
            <remarks>
                <para>
            Gets the message object used to initialize this event.
            Note that this event may not have a valid message object.
            If the event is serialized the message object will not 
            be transferred. To get the text of the message the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property must be used 
            not this property.
            </para>
                <para>
            If there is no defined message object for this event then
            null will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.ExceptionObject">
            <summary>
            Gets the exception object used to initialize this event.
            </summary>
            <value>
            The exception object used to initialize this event.
            </value>
            <remarks>
                <para>
            Gets the exception object used to initialize this event.
            Note that this event may not have a valid exception object.
            If the event is serialized the exception object will not 
            be transferred. To get the text of the exception the
            <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" /> method must be used 
            not this property.
            </para>
                <para>
            If there is no defined exception object for this event then
            null will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Repository">
            <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this event was created in.
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this event was created in.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.EnsureRepository(log4net.Repository.ILoggerRepository)">
            <summary>
            Ensure that the repository is set.
            </summary>
            <param name="repository">the value for the repository</param>
        </member>
        <member name="P:log4net.Core.LoggingEvent.RenderedMessage">
            <summary>
            Gets the message, rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
            <value>
            The message rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </value>
            <remarks>
                <para>
            The collected information is cached for future use.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)">
            <summary>
            Write the rendered message to a TextWriter
            </summary>
            <param name="writer">the writer to write the message to</param>
            <remarks>
                <para>
            Unlike the <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property this method
            does store the message data in the internal cache. Therefore 
            if called only once this method should be faster than the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property, however if the message is
            to be accessed multiple times then the property will be more efficient.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.ThreadName">
            <summary>
            Gets the name of the current thread.  
            </summary>
            <value>
            The name of the current thread, or the thread ID when 
            the name is not available.
            </value>
            <remarks>
                <para>
            The collected information is cached for future use.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.UserName">
            <summary>
            Gets the name of the current user.
            </summary>
            <value>
            The name of the current user, or <c>NOT AVAILABLE</c> when the 
            underlying runtime has no support for retrieving the name of the 
            current user.
            </value>
            <remarks>
                <para>
            Calls <c>WindowsIdentity.GetCurrent().Name</c> to get the name of
            the current windows user.
            </para>
                <para>
            To improve performance, we could cache the string representation of 
            the name, and reuse that as long as the identity stayed constant.  
            Once the identity changed, we would need to re-assign and re-render 
            the string.
            </para>
                <para>
            However, the <c>WindowsIdentity.GetCurrent()</c> call seems to 
            return different objects every time, so the current implementation 
            doesn't do this type of caching.
            </para>
                <para>
            Timing for these operations:
            </para>
                <list type="table">
                    <listheader>
                        <term>Method</term>
                        <description>Results</description>
                    </listheader>
                    <item>
                        <term>
                            <c>WindowsIdentity.GetCurrent()</c>
                        </term>
                        <description>10000 loops, 00:00:00.2031250 seconds</description>
                    </item>
                    <item>
                        <term>
                            <c>WindowsIdentity.GetCurrent().Name</c>
                        </term>
                        <description>10000 loops, 00:00:08.0468750 seconds</description>
                    </item>
                </list>
                <para>
            This means we could speed things up almost 40 times by caching the 
            value of the <c>WindowsIdentity.GetCurrent().Name</c> property, since 
            this takes (8.04-0.20) = 7.84375 seconds.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Identity">
            <summary>
            Gets the identity of the current thread principal.
            </summary>
            <value>
            The string name of the identity of the current thread principal.
            </value>
            <remarks>
                <para>
            Calls <c>System.Threading.Thread.CurrentPrincipal.Identity.Name</c> to get
            the name of the current thread principal.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Domain">
            <summary>
            Gets the AppDomain friendly name.
            </summary>
            <value>
            The AppDomain friendly name.
            </value>
            <remarks>
                <para>
            Gets the AppDomain friendly name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Properties">
            <summary>
            Additional event specific properties.
            </summary>
            <value>
            Additional event specific properties.
            </value>
            <remarks>
                <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
                <para>
            This property is for events that have been added directly to
            this event. The aggregate properties (which include these
            event properties) can be retrieved using <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)" />
            and <see cref="M:log4net.Core.LoggingEvent.GetProperties" />.
            </para>
                <para>
            Once the properties have been fixed <see cref="P:log4net.Core.LoggingEvent.Fix" /> this property
            returns the combined cached properties. This ensures that updates to
            this property are always reflected in the underlying storage. When
            returning the combined properties there may be more keys in the
            Dictionary than expected.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LoggingEvent.Fix">
            <summary>
            The fixed fields in this event
            </summary>
            <value>
            The set of fields that are fixed in this event
            </value>
            <remarks>
                <para>
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <remarks>
                <para>
            The data in this event must be fixed before it can be serialized.
            </para>
                <para>
            The <see cref="M:FixVolatileData()" /> method must be called during the
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method call if this event 
            is to be used outside that method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData">
            <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
            <returns>The <see cref="T:log4net.Core.LoggingEventData" /> for this event.</returns>
            <remarks>
                <para>
            A new <see cref="T:log4net.Core.LoggingEvent" /> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData" /> instance.
            </para>
                <para>
            Does a <see cref="F:log4net.Core.FixFlags.Partial" /> fix of the data
            in the logging event before returning the event data.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)">
            <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
            <param name="fixFlags">The set of data to ensure is fixed in the LoggingEventData</param>
            <returns>The <see cref="T:log4net.Core.LoggingEventData" /> for this event.</returns>
            <remarks>
                <para>
            A new <see cref="T:log4net.Core.LoggingEvent" /> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData" /> instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetExceptionStrRep">
            <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
            <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
            <remarks>
                <para>
                    <b>Obsolete. Use <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" /> instead.</b>
                </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetExceptionString">
            <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
            <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
            <remarks>
                <para>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.FixVolatileData">
            <summary>
            Fix instance fields that hold volatile data.
            </summary>
            <remarks>
                <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()" />. There is a performance penalty
            incurred by calling <see cref="M:FixVolatileData()" /> but it
            is essential to maintaining data consistency.
            </para>
                <para>
            Calling <see cref="M:FixVolatileData()" /> is equivalent to
            calling <see cref="M:FixVolatileData(bool)" /> passing the parameter
            <c>false</c>.
            </para>
                <para>
            See <see cref="M:FixVolatileData(bool)" /> for more
            information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)">
            <summary>
            Fixes instance fields that hold volatile data.
            </summary>
            <param name="fastButLoose">Set to <c>true</c> to not fix data that takes a long time to fix.</param>
            <remarks>
                <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:FixVolatileData()" />. There is a performance penalty
            for incurred by calling <see cref="M:FixVolatileData()" /> but it
            is essential to maintaining data consistency.
            </para>
                <para>
            The <paramref name="fastButLoose" /> param controls the data that
            is fixed. Some of the data that can be fixed takes a long time to 
            generate, therefore if you do not require those settings to be fixed
            they can be ignored by setting the <paramref name="fastButLoose" /> param
            to <c>true</c>. This setting will ignore the <see cref="P:log4net.Core.LoggingEvent.LocationInformation" />
            and <see cref="P:log4net.Core.LoggingEvent.UserName" /> settings.
            </para>
                <para>
            Set <paramref name="fastButLoose" /> to <c>false</c> to ensure that all 
            settings are fixed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.FixVolatileData(log4net.Core.FixFlags)">
            <summary>
            Fix the fields specified by the <see cref="T:log4net.Core.FixFlags" /> parameter
            </summary>
            <param name="flags">the fields to fix</param>
            <remarks>
                <para>
            Only fields specified in the <paramref name="flags" /> will be fixed.
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.LookupProperty(System.String)">
            <summary>
            Lookup a composite property in this event
            </summary>
            <param name="key">the key for the property to lookup</param>
            <returns>the value for the property</returns>
            <remarks>
                <para>
            This event has composite properties that combine together properties from
            several different contexts in the following order:
            <list type="definition"><item><term>this events properties</term><description>
            		This event has <see cref="P:log4net.Core.LoggingEvent.Properties" /> that can be set. These 
            		properties are specific to this event only.
            		</description></item><item><term>the thread properties</term><description>
            		The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            		thread. These properties are shared by all events logged on this thread.
            		</description></item><item><term>the global properties</term><description>
            		The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            		properties are shared by all the threads in the AppDomain.
            		</description></item></list></para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LoggingEvent.GetProperties">
            <summary>
            Get all the composite properties in this event
            </summary>
            <returns>the <see cref="T:log4net.Util.PropertiesDictionary" /> containing all the properties</returns>
            <remarks>
                <para>
            See <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)" /> for details of the composite properties 
            stored by the event.
            </para>
                <para>
            This method returns a single <see cref="T:log4net.Util.PropertiesDictionary" /> containing all the
            properties defined for this event.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_data">
            <summary>
            The internal logging event data.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_compositeProperties">
            <summary>
            The internal logging event data.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_eventProperties">
            <summary>
            The internal logging event data.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_callerStackBoundaryDeclaringType">
            <summary>
            The fully qualified Type of the calling 
            logger class in the stack frame (i.e. the declaring type of the method).
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_message">
            <summary>
            The application supplied message of logging event.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_thrownException">
            <summary>
            The exception that was thrown.
            </summary>
            <remarks>
            This is not serialized. The string representation
            is serialized instead.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_repository">
            <summary>
            The repository that generated the logging event
            </summary>
            <remarks>
            This is not serialized.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_fixFlags">
            <summary>
            The fix state for this event
            </summary>
            <remarks>
            These flags indicate which fields have been fixed.
            Not serialized.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.m_cacheUpdatable">
            <summary>
            Indicated that the internal cache is updateable (ie not fixed)
            </summary>
            <remarks>
            This is a seperate flag to m_fixFlags as it allows incrementel fixing and simpler
            changes in the caching strategy.
            </remarks>
        </member>
        <member name="F:log4net.Core.LoggingEvent.HostNameProperty">
            <summary>
            The key into the Properties map for the host name value.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.IdentityProperty">
            <summary>
            The key into the Properties map for the thread identity value.
            </summary>
        </member>
        <member name="F:log4net.Core.LoggingEvent.UserNameProperty">
            <summary>
            The key into the Properties map for the user name value.
            </summary>
        </member>
        <member name="T:log4net.Core.LogImpl">
            <summary>
            Implementation of <see cref="T:log4net.ILog" /> wrapper interface.
            </summary>
            <remarks>
                <para>
            This implementation of the <see cref="T:log4net.ILog" /> interface
            forwards to the <see cref="T:log4net.Core.ILogger" /> held by the base class.
            </para>
                <para>
            This logger has methods to allow the caller to log at the following
            levels:
            </para>
                <list type="definition">
                    <item>
                        <term>DEBUG</term>
                        <description>
                The <see cref="M:Debug(object)" /> and <see cref="M:DebugFormat(string, object[])" /> methods log messages
                at the <c>DEBUG</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Debug" />. The <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" />
                property tests if this level is enabled for logging.
                </description>
                    </item>
                    <item>
                        <term>INFO</term>
                        <description>
                The <see cref="M:Info(object)" /> and <see cref="M:InfoFormat(string, object[])" /> methods log messages
                at the <c>INFO</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Info" />. The <see cref="P:log4net.Core.LogImpl.IsInfoEnabled" />
                property tests if this level is enabled for logging.
                </description>
                    </item>
                    <item>
                        <term>WARN</term>
                        <description>
                The <see cref="M:Warn(object)" /> and <see cref="M:WarnFormat(string, object[])" /> methods log messages
                at the <c>WARN</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Warn" />. The <see cref="P:log4net.Core.LogImpl.IsWarnEnabled" />
                property tests if this level is enabled for logging.
                </description>
                    </item>
                    <item>
                        <term>ERROR</term>
                        <description>
                The <see cref="M:Error(object)" /> and <see cref="M:ErrorFormat(string, object[])" /> methods log messages
                at the <c>ERROR</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Error" />. The <see cref="P:log4net.Core.LogImpl.IsErrorEnabled" />
                property tests if this level is enabled for logging.
                </description>
                    </item>
                    <item>
                        <term>FATAL</term>
                        <description>
                The <see cref="M:Fatal(object)" /> and <see cref="M:FatalFormat(string, object[])" /> methods log messages
                at the <c>FATAL</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Fatal" />. The <see cref="P:log4net.Core.LogImpl.IsFatalEnabled" />
                property tests if this level is enabled for logging.
                </description>
                    </item>
                </list>
                <para>
            The values for these levels and their semantic meanings can be changed by 
            configuring the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" /> for the repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.LogImpl.#ctor(log4net.Core.ILogger)">
            <summary>
            Construct a new wrapper for the specified logger.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <remarks>
                <para>
            Construct a new wrapper for the specified logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ReloadLevels(log4net.Repository.ILoggerRepository)">
            <summary>
            Virtual method called when the configuration of the repository changes
            </summary>
            <param name="repository">the repository holding the levels</param>
            <remarks>
                <para>
            Virtual method called when the configuration of the repository changes
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Debug(System.Object)">
            <summary>
            Logs a message object with the <c>DEBUG</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <c>DEBUG</c> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Debug(object,Exception)" /> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Debug(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>DEBUG</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Logs a message object with the <c>DEBUG</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> passed
            as a parameter.
            </para>
                <para>
            See the <see cref="M:Debug(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:DebugFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Info(System.Object)">
            <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <c>INFO</c> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Info(object,Exception)" /> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
                <para>
            See the <see cref="M:Info(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Info(object)" />
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:InfoFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Warn(System.Object)">
            <summary>
            Logs a message object with the <c>WARN</c> level.
            </summary>
            <param name="message">the message object to log</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <c>WARN</c> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Warn(object,Exception)" /> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Warn(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>WARN</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Logs a message object with the <c>WARN</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
                <para>
            See the <see cref="M:Warn(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)" />
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:WarnFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Error(System.Object)">
            <summary>
            Logs a message object with the <c>ERROR</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <c>ERROR</c> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Error(object,Exception)" /> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Error(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>ERROR</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Logs a message object with the <c>ERROR</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
                <para>
            See the <see cref="M:Error(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Error(object)" />
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:ErrorFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Fatal(System.Object)">
            <summary>
            Logs a message object with the <c>FATAL</c> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <c>FATAL</c> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:Fatal(object,Exception)" /> form instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>FATAL</c> level
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Logs a message object with the <c>FATAL</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
                <para>
            See the <see cref="M:Fatal(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)" />
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:FatalFormat(IFormatProvider,string,object[])" /> method.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <see cref="M:String.Format(IFormatProvider, string, object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LogImpl.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <c>DEBUG</c>
            level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <c>DEBUG</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
                <para>
            For some <c>log</c> Logger object, when you write:
            </para>
                <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
                <para>
            You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
                <para>
            If you are worried about speed, then you should write:
            </para>
                <code lang="C#">
            if (log.IsDebugEnabled())
            { 
             log.Debug("This is entry number: " + i );
            }
            </code>
                <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.LogImpl.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <c>INFO</c> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <c>INFO</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples 
            of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.Core.LogImpl.IsDebugEnabled" />
        </member>
        <member name="P:log4net.Core.LogImpl.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <c>WARN</c> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <c>WARN</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples 
            of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="P:log4net.Core.LogImpl.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <c>ERROR</c> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <c>ERROR</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="P:log4net.Core.LogImpl.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <c>FATAL</c> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <c>FATAL</c> events,
            <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples of using this method.
            </para>
            </remarks>
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Core.LogImpl.LoggerRepositoryConfigurationChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the <see cref="E:log4net.Repository.ILoggerRepository.ConfigurationChanged" /> event
            </summary>
            <param name="sender">the repository</param>
            <param name="e">Empty</param>
        </member>
        <member name="F:log4net.Core.LogImpl.ThisDeclaringType">
            <summary>
            The fully qualified name of this declaring type not the type of any subclass.
            </summary>
        </member>
        <member name="T:log4net.Core.MethodItem">
            <summary>
            provides method information without actually referencing a System.Reflection.MethodBase
            as that would require that the containing assembly is loaded.
            </summary>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor">
            <summary>
            constructs a method item for an unknown method.
            </summary>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor(System.String)">
            <summary>
            constructs a method item from the name of the method.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor(System.String,System.String[])">
            <summary>
            constructs a method item from the name of the method and its parameters.
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:log4net.Core.MethodItem.#ctor(System.Reflection.MethodBase)">
            <summary>
            constructs a method item from a method base by determining the method name and its parameters.
            </summary>
            <param name="methodBase"></param>
        </member>
        <member name="P:log4net.Core.MethodItem.Name">
            <summary>
            Gets the method name of the caller making the logging 
            request.
            </summary>
            <value>
            The method name of the caller making the logging 
            request.
            </value>
            <remarks>
                <para>
            Gets the method name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.MethodItem.Parameters">
            <summary>
            Gets the method parameters of the caller making
            the logging request.
            </summary>
            <value>
            The method parameters of the caller making
            the logging request
            </value>
            <remarks>
                <para>
            Gets the method parameters of the caller making
            the logging request.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Core.MethodItem.declaringType">
            <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.MethodItem.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:log4net.Core.SecurityContext">
            <summary>
            A SecurityContext used by log4net when interacting with protected resources
            </summary>
            <remarks>
                <para>
            A SecurityContext used by log4net when interacting with protected resources
            for example with operating system services. This can be used to impersonate
            a principal that has been granted privileges on the system resources.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Core.SecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate this SecurityContext
            </summary>
            <param name="state">State supplied by the caller</param>
            <returns>An <see cref="T:System.IDisposable" /> instance that will
            revoke the impersonation of this SecurityContext, or <c>null</c></returns>
            <remarks>
                <para>
            Impersonate this security context. Further calls on the current
            thread should now be made in the security context provided
            by this object. When the <see cref="T:System.IDisposable" /> result 
            <see cref="M:System.IDisposable.Dispose" /> method is called the security
            context of the thread should be reverted to the state it was in
            before <see cref="M:log4net.Core.SecurityContext.Impersonate(System.Object)" /> was called.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.SecurityContextProvider">
            <summary>
            The <see cref="T:log4net.Core.SecurityContextProvider" /> providers default <see cref="T:log4net.Core.SecurityContext" /> instances.
            </summary>
            <remarks>
                <para>
            A configured component that interacts with potentially protected system
            resources uses a <see cref="T:log4net.Core.SecurityContext" /> to provide the elevated
            privileges required. If the <see cref="T:log4net.Core.SecurityContext" /> object has
            been not been explicitly provided to the component then the component
            will request one from this <see cref="T:log4net.Core.SecurityContextProvider" />.
            </para>
                <para>
            By default the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is
            an instance of <see cref="T:log4net.Core.SecurityContextProvider" /> which returns only
            <see cref="T:log4net.Util.NullSecurityContext" /> objects. This is a reasonable default
            where the privileges required are not know by the system.
            </para>
                <para>
            This default behavior can be overridden by subclassing the <see cref="T:log4net.Core.SecurityContextProvider" />
            and overriding the <see cref="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)" /> method to return
            the desired <see cref="T:log4net.Core.SecurityContext" /> objects. The default provider
            can be replaced by programmatically setting the value of the 
            <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> property.
            </para>
                <para>
            An alternative is to use the <c>log4net.Config.SecurityContextProviderAttribute</c>
            This attribute can be applied to an assembly in the same way as the
            <c>log4net.Config.XmlConfiguratorAttribute"</c>. The attribute takes
            the type to use as the <see cref="T:log4net.Core.SecurityContextProvider" /> as an argument.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Core.SecurityContextProvider.s_defaultProvider">
            <summary>
            The default provider
            </summary>
        </member>
        <member name="P:log4net.Core.SecurityContextProvider.DefaultProvider">
            <summary>
            Gets or sets the default SecurityContextProvider
            </summary>
            <value>
            The default SecurityContextProvider
            </value>
            <remarks>
                <para>
            The default provider is used by configured components that
            require a <see cref="T:log4net.Core.SecurityContext" /> and have not had one
            given to them.
            </para>
                <para>
            By default this is an instance of <see cref="T:log4net.Core.SecurityContextProvider" />
            that returns <see cref="T:log4net.Util.NullSecurityContext" /> objects.
            </para>
                <para>
            The default provider can be set programmatically by setting
            the value of this property to a sub class of <see cref="T:log4net.Core.SecurityContextProvider" />
            that has the desired behavior.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.SecurityContextProvider.#ctor">
            <summary>
            Protected default constructor to allow subclassing
            </summary>
            <remarks>
                <para>
            Protected default constructor to allow subclassing
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)">
            <summary>
            Create a SecurityContext for a consumer
            </summary>
            <param name="consumer">The consumer requesting the SecurityContext</param>
            <returns>An impersonation context</returns>
            <remarks>
                <para>
            The default implementation is to return a <see cref="T:log4net.Util.NullSecurityContext" />.
            </para>
                <para>
            Subclasses should override this method to provide their own
            behavior.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.StackFrameItem">
            <summary>
            provides stack frame information without actually referencing a System.Diagnostics.StackFrame
            as that would require that the containing assembly is loaded.
            </summary>
        </member>
        <member name="M:log4net.Core.StackFrameItem.#ctor(System.Diagnostics.StackFrame)">
            <summary>
            returns a stack frame item from a stack frame. This 
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="P:log4net.Core.StackFrameItem.ClassName">
            <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
            <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
            <remarks>
                <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.FileName">
            <summary>
            Gets the file name of the caller.
            </summary>
            <value>
            The file name of the caller.
            </value>
            <remarks>
                <para>
            Gets the file name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.LineNumber">
            <summary>
            Gets the line number of the caller.
            </summary>
            <value>
            The line number of the caller.
            </value>
            <remarks>
                <para>
            Gets the line number of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.Method">
            <summary>
            Gets the method name of the caller.
            </summary>
            <value>
            The method name of the caller.
            </value>
            <remarks>
                <para>
            Gets the method name of the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.StackFrameItem.FullInfo">
            <summary>
            Gets all available caller information
            </summary>
            <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></value>
            <remarks>
                <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></para>
            </remarks>
        </member>
        <member name="F:log4net.Core.StackFrameItem.declaringType">
            <summary>
            The fully qualified type of the StackFrameItem class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Core.StackFrameItem.NA">
            <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
        </member>
        <member name="T:log4net.Core.TimeEvaluator">
            <summary>
            An evaluator that triggers after specified number of seconds.
            </summary>
            <remarks>
                <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
            </remarks>
            <author>Robert Sevcik</author>
        </member>
        <member name="F:log4net.Core.TimeEvaluator.m_interval">
            <summary>
            The time threshold for triggering in seconds. Zero means it won't trigger at all.
            </summary>
        </member>
        <member name="F:log4net.Core.TimeEvaluator.m_lastTimeUtc">
            <summary>
            The UTC time of last check. This gets updated when the object is created and when the evaluator triggers.
            </summary>
        </member>
        <member name="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL">
            <summary>
            The default time threshold for triggering in seconds. Zero means it won't trigger at all.
            </summary>
        </member>
        <member name="M:log4net.Core.TimeEvaluator.#ctor">
            <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL" /> time threshold in seconds.
            </summary>
            <remarks>
                <para>
            Create a new evaluator using the <see cref="F:log4net.Core.TimeEvaluator.DEFAULT_INTERVAL" /> time threshold in seconds.
            </para>
                <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.TimeEvaluator.#ctor(System.Int32)">
            <summary>
            Create a new evaluator using the specified time threshold in seconds.
            </summary>
            <param name="interval">
            The time threshold in seconds to trigger after.
            Zero means it won't trigger at all.
            </param>
            <remarks>
                <para>
            Create a new evaluator using the specified time threshold in seconds.
            </para>
                <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.TimeEvaluator.Interval">
            <summary>
            The time threshold in seconds to trigger after
            </summary>
            <value>
            The time threshold in seconds to trigger after.
            Zero means it won't trigger at all.
            </value>
            <remarks>
                <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.TimeEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
            <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
            <param name="loggingEvent">The event to check</param>
            <returns>This method returns <c>true</c>, if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.. 
            Otherwise it returns <c>false</c></returns>
            <remarks>
                <para>
            This evaluator will trigger if the specified time period 
            <see cref="P:log4net.Core.TimeEvaluator.Interval" /> has passed since last check.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.WrapperCreationHandler">
            <summary>
            Delegate used to handle creation of new wrappers.
            </summary>
            <param name="logger">The logger to wrap in a wrapper.</param>
            <remarks>
                <para>
            Delegate used to handle creation of new wrappers. This delegate
            is called from the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" />
            method to construct the wrapper for the specified logger.
            </para>
                <para>
            The delegate to use is supplied to the <see cref="T:log4net.Core.WrapperMap" />
            constructor.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Core.WrapperMap">
            <summary>
            Maps between logger objects and wrapper objects.
            </summary>
            <remarks>
                <para>
            This class maintains a mapping between <see cref="T:log4net.Core.ILogger" /> objects and
            <see cref="T:log4net.Core.ILoggerWrapper" /> objects. Use the <see cref="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)" /> method to 
            lookup the <see cref="T:log4net.Core.ILoggerWrapper" /> for the specified <see cref="T:log4net.Core.ILogger" />.
            </para>
                <para>
            New wrapper instances are created by the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" />
            method. The default behavior is for this method to delegate construction
            of the wrapper to the <see cref="T:log4net.Core.WrapperCreationHandler" /> delegate supplied
            to the constructor. This allows specialization of the behavior without
            requiring subclassing of this type.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.WrapperMap.#ctor(log4net.Core.WrapperCreationHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /></summary>
            <param name="createWrapperHandler">The handler to use to create the wrapper objects.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /> class with 
            the specified handler to create the wrapper objects.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)">
            <summary>
            Gets the wrapper object for the specified logger.
            </summary>
            <returns>The wrapper object for the specified logger</returns>
            <remarks>
                <para>
            If the logger is null then the corresponding wrapper is null.
            </para>
                <para>
            Looks up the wrapper it it has previously been requested and
            returns it. If the wrapper has never been requested before then
            the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" /> virtual method is
            called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Core.WrapperMap.Repositories">
            <summary>
            Gets the map of logger repositories.
            </summary>
            <value>
            Map of logger repositories.
            </value>
            <remarks>
                <para>
            Gets the hashtable that is keyed on <see cref="T:log4net.Repository.ILoggerRepository" />. The
            values are hashtables keyed on <see cref="T:log4net.Core.ILogger" /> with the
            value being the corresponding <see cref="T:log4net.Core.ILoggerWrapper" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)">
            <summary>
            Creates the wrapper object for the specified logger.
            </summary>
            <param name="logger">The logger to wrap in a wrapper.</param>
            <returns>The wrapper object for the logger.</returns>
            <remarks>
                <para>
            This implementation uses the <see cref="T:log4net.Core.WrapperCreationHandler" />
            passed to the constructor to create the wrapper. This method
            can be overridden in a subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.RepositoryShutdown(log4net.Repository.ILoggerRepository)">
            <summary>
            Called when a monitored repository shutdown event is received.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that is shutting down</param>
            <remarks>
                <para>
            This method is called when a <see cref="T:log4net.Repository.ILoggerRepository" /> that this
            <see cref="T:log4net.Core.WrapperMap" /> is holding loggers for has signaled its shutdown
            event <see cref="E:log4net.Repository.ILoggerRepository.ShutdownEvent" />. The default
            behavior of this method is to release the references to the loggers
            and their wrappers generated for this repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.WrapperMap.ILoggerRepository_Shutdown(System.Object,System.EventArgs)">
            <summary>
            Event handler for repository shutdown event.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="F:log4net.Core.WrapperMap.m_repositories">
            <summary>
            Map of logger repositories to hashtables of ILogger to ILoggerWrapper mappings
            </summary>
        </member>
        <member name="F:log4net.Core.WrapperMap.m_createWrapperHandler">
            <summary>
            The handler to use to create the extension wrapper objects.
            </summary>
        </member>
        <member name="F:log4net.Core.WrapperMap.m_shutdownHandler">
            <summary>
            Internal reference to the delegate used to register for repository shutdown events.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.AbsoluteTimeDateFormatter">
            <summary>
            Formats a <see cref="T:System.DateTime" /> as <c>"HH:mm:ss,fff"</c>.
            </summary>
            <remarks>
                <para>
            Formats a <see cref="T:System.DateTime" /> in the format <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Renders the date into a string. Format is <c>"HH:mm:ss"</c>.
            </summary>
            <param name="dateToFormat">The date to render into a string.</param>
            <param name="buffer">The string builder to write to.</param>
            <remarks>
                <para>
            Subclasses should override this method to render the date
            into a string using a precision up to the second. This method
            will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
            <summary>
            Renders the date into a string. Format is "HH:mm:ss,fff".
            </summary>
            <param name="dateToFormat">The date to render into a string.</param>
            <param name="writer">The writer to write to.</param>
            <remarks>
                <para>
            Uses the <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> are
            cached and <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> is called at most once
            per second.
            </para>
                <para>
            Sub classes should override <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" />
            rather than <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.AbsoluteTimeDateFormat">
            <summary>
            String constant used to specify AbsoluteTimeDateFormat in layouts. Current value is <b>ABSOLUTE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.DateAndTimeDateFormat">
            <summary>
            String constant used to specify DateTimeDateFormat in layouts.  Current value is <b>DATE</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.Iso8601TimeDateFormat">
            <summary>
            String constant used to specify ISO8601DateFormat in layouts. Current value is <b>ISO8601</b>.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeToTheSecond">
            <summary>
            Last stored time with precision up to the second.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeBuf">
            <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
        </member>
        <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeStrings">
            <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.DateTimeDateFormatter">
            <summary>
            Formats a <see cref="T:System.DateTime" /> as <c>"dd MMM yyyy HH:mm:ss,fff"</c></summary>
            <remarks>
                <para>
            Formats a <see cref="T:System.DateTime" /> in the format 
            <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, 
            <c>"06 Nov 1994 15:49:37,459"</c>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Angelika Schnagl</author>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.DateTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Formats the date without the milliseconds part
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <param name="buffer">The string builder to write to.</param>
            <remarks>
                <para>
            Formats a DateTime in the format <c>"dd MMM yyyy HH:mm:ss"</c>
            for example, <c>"06 Nov 1994 15:49:37"</c>.
            </para>
                <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.DateFormatter.DateTimeDateFormatter.m_dateTimeFormatInfo">
            <summary>
            The format info for the invariant culture.
            </summary>
        </member>
        <member name="T:log4net.DateFormatter.IDateFormatter">
            <summary>
            Render a <see cref="T:System.DateTime" /> as a string.
            </summary>
            <remarks>
                <para>
            Interface to abstract the rendering of a <see cref="T:System.DateTime" />
            instance into a string.
            </para>
                <para>
            The <see cref="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)" /> method is used to render the
            date to a text writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
            <summary>
            Formats the specified date as a string.
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <param name="writer">The writer to write to.</param>
            <remarks>
                <para>
            Format the <see cref="T:System.DateTime" /> as a string and write it
            to the <see cref="T:System.IO.TextWriter" /> provided.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.DateFormatter.Iso8601DateFormatter">
            <summary>
            Formats the <see cref="T:System.DateTime" /> as <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </summary>
            <remarks>
                <para>
            Formats the <see cref="T:System.DateTime" /> specified as a string: <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.Iso8601DateFormatter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.Iso8601DateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
            <summary>
            Formats the date without the milliseconds part
            </summary>
            <param name="dateToFormat">The date to format.</param>
            <param name="buffer">The string builder to write to.</param>
            <remarks>
                <para>
            Formats the date specified as a string: <c>"yyyy-MM-dd HH:mm:ss"</c>.
            </para>
                <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.DateFormatter.SimpleDateFormatter">
            <summary>
            Formats the <see cref="T:System.DateTime" /> using the <see cref="M:DateTime.ToString(string, IFormatProvider)" /> method.
            </summary>
            <remarks>
                <para>
            Formats the <see cref="T:System.DateTime" /> using the <see cref="T:System.DateTime" /><see cref="M:DateTime.ToString(string, IFormatProvider)" /> method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="format">The format string.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> class 
            with the specified format string.
            </para>
                <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:DateTime.ToString(string, IFormatProvider)" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.DateFormatter.SimpleDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
            <summary>
            Formats the date using <see cref="M:DateTime.ToString(string, IFormatProvider)" />.
            </summary>
            <param name="dateToFormat">The date to convert to a string.</param>
            <param name="writer">The writer to write to.</param>
            <remarks>
                <para>
            Uses the date format string supplied to the constructor to call
            the <see cref="M:DateTime.ToString(string, IFormatProvider)" /> method to format the date.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.DateFormatter.SimpleDateFormatter.m_formatString">
            <summary>
            The format string used to format the <see cref="T:System.DateTime" />.
            </summary>
            <remarks>
                <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:DateTime.ToString(string, IFormatProvider)" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.DenyAllFilter">
            <summary>
            This filter drops all <see cref="T:log4net.Core.LoggingEvent" />. 
            </summary>
            <remarks>
                <para>
            You can add this filter to the end of a filter chain to
            switch from the default "accept all unless instructed otherwise"
            filtering behavior to a "deny all unless instructed otherwise"
            behavior.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.DenyAllFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Always returns the integer constant <see cref="F:log4net.Filter.FilterDecision.Deny" /></summary>
            <param name="loggingEvent">the LoggingEvent to filter</param>
            <returns>Always returns <see cref="F:log4net.Filter.FilterDecision.Deny" /></returns>
            <remarks>
                <para>
            Ignores the event being logged and just returns
            <see cref="F:log4net.Filter.FilterDecision.Deny" />. This can be used to change the default filter
            chain behavior from <see cref="F:log4net.Filter.FilterDecision.Accept" /> to <see cref="F:log4net.Filter.FilterDecision.Deny" />. This filter
            should only be used as the last filter in the chain
            as any further filters will be ignored!
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.FilterDecision">
            <summary>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /></summary>
            <remarks>
                <para>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /></para>
            </remarks>
        </member>
        <member name="F:log4net.Filter.FilterDecision.Deny">
            <summary>
            The log event must be dropped immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterDecision.Neutral">
            <summary>
            This filter is neutral with respect to the log event. 
            The remaining filters, if any, should be consulted for a final decision.
            </summary>
        </member>
        <member name="F:log4net.Filter.FilterDecision.Accept">
            <summary>
            The log event must be logged immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
        </member>
        <member name="T:log4net.Filter.FilterSkeleton">
            <summary>
            Subclass this type to implement customized logging event filtering
            </summary>
            <remarks>
                <para>
            Users should extend this class to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger" /> and 
            <see cref="T:log4net.Appender.AppenderSkeleton" />, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
                <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)" />
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
                <para>
            The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)" /> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny" />, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> or <see cref="F:log4net.Filter.FilterDecision.Accept" />.
            </para>
                <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
                <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
                <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
                <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.FilterSkeleton.m_next">
            <summary>
            Points to the next filter in the filter chain.
            </summary>
            <remarks>
                <para>
            See <see cref="P:log4net.Filter.FilterSkeleton.Next" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.ActivateOptions">
            <summary>
            Initialize the filter with the options set
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> must be called again.
            </para>
                <para>
            Typically filter's options become active immediately on set, 
            however this method must still be called. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Decide if the <see cref="T:log4net.Core.LoggingEvent" /> should be logged through an appender.
            </summary>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> to decide upon</param>
            <returns>The decision of the filter</returns>
            <remarks>
                <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny" />, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral" />, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept" /> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
                <para>
            This method is marked <c>abstract</c> and must be implemented
            in a subclass.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.FilterSkeleton.Next">
            <summary>
            Property to get and set the next filter
            </summary>
            <value>
            The next filter in the chain
            </value>
            <remarks>
                <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.IFilter">
            <summary>
            Implement this interface to provide customized logging event filtering
            </summary>
            <remarks>
                <para>
            Users should implement this interface to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger" /> and 
            <see cref="T:log4net.Appender.AppenderSkeleton" />, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
                <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" />
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
                <para>
            The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny" />, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> or <see cref="F:log4net.Filter.FilterDecision.Accept" />.
            </para>
                <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
                <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
                <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
                <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
            <param name="loggingEvent">The LoggingEvent to decide upon</param>
            <returns>The decision of the filter</returns>
            <remarks>
                <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny" />, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral" />, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept" /> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.IFilter.Next">
            <summary>
            Property to get and set the next filter
            </summary>
            <value>
            The next filter in the chain
            </value>
            <remarks>
                <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.LevelMatchFilter">
            <summary>
            This is a very simple filter based on <see cref="T:log4net.Core.Level" /> matching.
            </summary>
            <remarks>
                <para>
            The filter admits two options <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /> and
            <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />. If there is an exact match between the value
            of the <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /> option and the <see cref="T:log4net.Core.Level" /> of the 
            <see cref="T:log4net.Core.LoggingEvent" />, then the <see cref="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in 
            case the <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" /> option value is set
            to <c>true</c>, if it is <c>false</c> then 
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned. If the <see cref="T:log4net.Core.Level" /> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.LevelMatchFilter.m_acceptOnMatch">
            <summary>
            flag to indicate if the filter should <see cref="F:log4net.Filter.FilterDecision.Accept" /> on a match
            </summary>
        </member>
        <member name="F:log4net.Filter.LevelMatchFilter.m_levelToMatch">
            <summary>
            the <see cref="T:log4net.Core.Level" /> to match against
            </summary>
        </member>
        <member name="M:log4net.Filter.LevelMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch">
            <summary>
                <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /></summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny" /> the event.
            </para>
                <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LevelMatchFilter.LevelToMatch">
            <summary>
            The <see cref="T:log4net.Core.Level" /> that the filter will match
            </summary>
            <remarks>
                <para>
            The level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Tests if the <see cref="T:log4net.Core.Level" /> of the logging event matches that of the filter
            </summary>
            <param name="loggingEvent">the event to filter</param>
            <returns>see remarks</returns>
            <remarks>
                <para>
            If the <see cref="T:log4net.Core.Level" /> of the event matches the level of the
            filter then the result of the function depends on the
            value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />. If it is true then
            the function will return <see cref="F:log4net.Filter.FilterDecision.Accept" />, it it is false then it
            will return <see cref="F:log4net.Filter.FilterDecision.Deny" />. If the <see cref="T:log4net.Core.Level" /> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.LevelRangeFilter">
            <summary>
            This is a simple filter based on <see cref="T:log4net.Core.Level" /> matching.
            </summary>
            <remarks>
                <para>
            The filter admits three options <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin" /> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax" />
            that determine the range of priorities that are matched, and
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />. If there is a match between the range
            of priorities and the <see cref="T:log4net.Core.Level" /> of the <see cref="T:log4net.Core.LoggingEvent" />, then the 
            <see cref="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in case the <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> 
            option value is set to <c>true</c>, if it is <c>false</c>
            then <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned. If there is no match, <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.LevelRangeFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behavior when matching a <see cref="T:log4net.Core.Level" /></summary>
        </member>
        <member name="F:log4net.Filter.LevelRangeFilter.m_levelMin">
            <summary>
            the minimum <see cref="T:log4net.Core.Level" /> value to match
            </summary>
        </member>
        <member name="F:log4net.Filter.LevelRangeFilter.m_levelMax">
            <summary>
            the maximum <see cref="T:log4net.Core.Level" /> value to match
            </summary>
        </member>
        <member name="M:log4net.Filter.LevelRangeFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch">
            <summary>
                <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin" /> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax" /></summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral" /> the event.
            </para>
                <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LevelRangeFilter.LevelMin">
            <summary>
            Set the minimum matched <see cref="T:log4net.Core.Level" /></summary>
            <remarks>
                <para>
            The minimum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LevelRangeFilter.LevelMax">
            <summary>
            Sets the maximum matched <see cref="T:log4net.Core.Level" /></summary>
            <remarks>
                <para>
            The maximum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if the event should be logged.
            </summary>
            <param name="loggingEvent">the logging event to check</param>
            <returns>see remarks</returns>
            <remarks>
                <para>
            If the <see cref="T:log4net.Core.Level" /> of the logging event is outside the range
            matched by this filter then <see cref="F:log4net.Filter.FilterDecision.Deny" />
            is returned. If the <see cref="T:log4net.Core.Level" /> is matched then the value of
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> is checked. If it is true then
            <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, otherwise
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.LoggerMatchFilter">
            <summary>
            Simple filter to match a string in the event's logger name.
            </summary>
            <remarks>
                <para>
            The works very similar to the <see cref="T:log4net.Filter.LevelMatchFilter" />. It admits two 
            options <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> and <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" />. If the 
            <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the <see cref="T:log4net.Core.LoggingEvent" /> starts 
            with the value of the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> option, then the 
            <see cref="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in 
            case the <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> option value is set to <c>true</c>, 
            if it is <c>false</c> then <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
            </remarks>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="F:log4net.Filter.LoggerMatchFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behavior when we have a match
            </summary>
        </member>
        <member name="F:log4net.Filter.LoggerMatchFilter.m_loggerToMatch">
            <summary>
            The logger name string to substring match against the event
            </summary>
        </member>
        <member name="M:log4net.Filter.LoggerMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch">
            <summary>
                <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /></summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny" /> the event.
            </para>
                <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch">
            <summary>
            The <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> that the filter will match
            </summary>
            <remarks>
                <para>
            This filter will attempt to match this value against logger name in
            the following way. The match will be done against the beginning of the
            logger name (using <see cref="M:String.StartsWith(string)" />). The match is
            case sensitive. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
            <remarks>
                <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" />.
            If the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> equals the beginning of 
            the incoming <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> (<see cref="M:String.StartsWith(string)" />)
            then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.MdcFilter">
            <summary>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC" /></summary>
            <remarks>
                <para>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC" /></para>
                <para>
            As the MDC has been replaced with layered properties the
            <see cref="T:log4net.Filter.PropertyFilter" /> should be used instead.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="T:log4net.Filter.NdcFilter">
            <summary>
            Simple filter to match a string in the <see cref="T:log4net.NDC" /></summary>
            <remarks>
                <para>
            Simple filter to match a string in the <see cref="T:log4net.NDC" /></para>
                <para>
            As the MDC has been replaced with named stacks stored in the
            properties collections the <see cref="T:log4net.Filter.PropertyFilter" /> should 
            be used instead.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Filter.NdcFilter.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Sets the <see cref="P:log4net.Filter.PropertyFilter.Key" /> to <c>"NDC"</c>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.PropertyFilter">
            <summary>
            Simple filter to match a string an event property
            </summary>
            <remarks>
                <para>
            Simple filter to match a string in the value for a
            specific event property
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Filter.PropertyFilter.m_key">
            <summary>
            The key to use to lookup the string from the event properties
            </summary>
        </member>
        <member name="M:log4net.Filter.PropertyFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:log4net.Filter.PropertyFilter.Key">
            <summary>
            The key to lookup in the event properties and then match against.
            </summary>
            <remarks>
                <para>
            The key name to use to lookup in the properties map of the
            <see cref="T:log4net.Core.LoggingEvent" />. The match will be performed against 
            the value of this property if it exists.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.PropertyFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
            <remarks>
                <para>
            The event property for the <see cref="P:log4net.Filter.PropertyFilter.Key" /> is matched against 
            the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" />.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> occurs as a substring within
            the property value then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Filter.StringMatchFilter">
            <summary>
            Simple filter to match a string in the rendered message
            </summary>
            <remarks>
                <para>
            Simple filter to match a string in the rendered message
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_acceptOnMatch">
            <summary>
            Flag to indicate the behavior when we have a match
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_stringToMatch">
            <summary>
            The string to substring match against the message
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_stringRegexToMatch">
            <summary>
            A string regex to match
            </summary>
        </member>
        <member name="F:log4net.Filter.StringMatchFilter.m_regexToMatch">
            <summary>
            A regex object to match (generated from m_stringRegexToMatch)
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.ActivateOptions">
            <summary>
            Initialize and precompile the Regex if required
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.AcceptOnMatch">
            <summary>
                <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" /></summary>
            <remarks>
                <para>
            The <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral" /> the event.
            </para>
                <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.StringToMatch">
            <summary>
            Sets the static string to match
            </summary>
            <remarks>
                <para>
            The string that will be substring matched against
            the rendered message. If the message contains this
            string then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" />.
            </para>
                <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" />
            must be specified.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Filter.StringMatchFilter.RegexToMatch">
            <summary>
            Sets the regular expression to match
            </summary>
            <remarks>
                <para>
            The regular expression pattern that will be matched against
            the rendered message. If the message matches this
            pattern then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" />.
            </para>
                <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" />
            must be specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Filter.StringMatchFilter.Decide(log4net.Core.LoggingEvent)">
            <summary>
            Check if this filter should allow the event to be logged
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>see remarks</returns>
            <remarks>
                <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" />.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> occurs as a substring within
            the message then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.GlobalContext">
            <summary>
            The log4net Global Context.
            </summary>
            <remarks>
                <para>
            The <c>GlobalContext</c> provides a location for global debugging 
            information to be stored.
            </para>
                <para>
            The global context has a properties map and these properties can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputing these properties.
            </para>
                <para>
            By default the <c>log4net:HostName</c> property is set to the name of 
            the current machine.
            </para>
            </remarks>
            <example>
                <code lang="C#">
            GlobalContext.Properties["hostname"] = Environment.MachineName;
            </code>
            </example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.GlobalContext.#ctor">
            <summary>
            Private Constructor. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="P:log4net.GlobalContext.Properties">
            <summary>
            The global properties map.
            </summary>
            <value>
            The global properties map.
            </value>
            <remarks>
                <para>
            The global properties map.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.GlobalContext.s_properties">
            <summary>
            The global context properties instance
            </summary>
        </member>
        <member name="T:log4net.ILog">
            <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
            <remarks>
                <para>
            Use the <see cref="T:log4net.LogManager" /> to obtain logger instances
            that implement this interface. The <see cref="M:LogManager.GetLogger(Assembly,Type)" />
            static method is used to get logger instances.
            </para>
                <para>
            This class contains methods for logging at different levels and also
            has properties for determining if those logging levels are
            enabled in the current configuration.
            </para>
                <para>
            This interface can be implemented in different ways. This documentation
            specifies reasonable behavior that a caller can expect from the actual
            implementation, however different implementations reserve the right to
            do things differently.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code></example>
            <seealso cref="T:log4net.LogManager" />
            <seealso cref="M:LogManager.GetLogger(Assembly, Type)" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ILog.Debug(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Debug" /> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Debug(object,Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:Debug(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object[])">
            <overloads>Log a formatted string with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.ILog.Info(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads>
            <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <remarks>
                <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Info" /> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Info(object,Exception)" /> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:Info(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:Info(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Info(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.ILog.Warn(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <remarks>
                <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Warn" /> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Warn(object,Exception)" /> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:Warn(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:Warn(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Warn(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.ILog.Error(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads>
            <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="message">The message object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Error" /> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Error(object,Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.Error(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:Error(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Error(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads>
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <remarks>
                <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Fatal" /> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:Fatal(object,Exception)" /> form instead.
            </para>
            </remarks>
            <param name="message">The message object to log.</param>
            <seealso cref="M:Fatal(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:Fatal(object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object[])">
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads>
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="P:log4net.ILog.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Debug" /> events, <c>false</c> otherwise.
            </value>
            <remarks>
                <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
                <para> For some ILog interface <c>log</c>, when you write:</para>
                <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
                <para>
            You incur the cost constructing the message, string construction and concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
                <para>
            If you are worried about speed (who isn't), then you should write:
            </para>
                <code lang="C#">
            if (log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
                <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <see cref="P:log4net.ILog.IsDebugEnabled" /> and once in
            the <see cref="M:Debug(object)" />.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log. This is the preferred style of logging.
            </para>
                <para>Alternatively if your logger is available statically then the is debug
            enabled state can be stored in a static variable like this:
            </para>
                <code lang="C#">
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
                <para>
            Then when you come to log you can write:
            </para>
                <code lang="C#">
            if (isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
                <para>
            This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimized by the JIT compiler.
            </para>
                <para>
            Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.
            </para>
            </remarks>
            <seealso cref="M:Debug(object)" />
            <seealso cref="M:DebugFormat(IFormatProvider, string, object[])" />
        </member>
        <member name="P:log4net.ILog.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Info" /> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
            <seealso cref="M:Info(object)" />
            <seealso cref="M:InfoFormat(IFormatProvider, string, object[])" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="P:log4net.ILog.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Warn" /> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
            <seealso cref="M:Warn(object)" />
            <seealso cref="M:WarnFormat(IFormatProvider, string, object[])" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="P:log4net.ILog.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Error" /> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
            <seealso cref="M:Error(object)" />
            <seealso cref="M:ErrorFormat(IFormatProvider, string, object[])" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="P:log4net.ILog.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <value>
                <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Fatal" /> events, <c>false</c> otherwise.
            </value>
            <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="M:FatalFormat(IFormatProvider, string, object[])" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="T:log4net.Layout.DynamicPatternLayout">
            <summary>
            A flexible layout configurable with pattern string that re-evaluates on each call.
            </summary>
            <remarks>
                <para>This class is built on <see cref="T:log4net.Layout.PatternLayout"></see> and provides all the
            features and capabilities of PatternLayout.  PatternLayout is a 'static' class
            in that its layout is done once at configuration time.  This class will recreate
            the layout on each reference.</para>
                <para>One important difference between PatternLayout and DynamicPatternLayout is the
            treatment of the Header and Footer parameters in the configuration.  The Header and Footer
            parameters for DynamicPatternLayout must be syntactically in the form of a PatternString,
            but should not be marked as type log4net.Util.PatternString.  Doing so causes the
            pattern to be statically converted at configuration time and causes DynamicPatternLayout
            to perform the same as PatternLayout.</para>
                <para>Please see <see cref="T:log4net.Layout.PatternLayout" /> for complete documentation.</para>
                <example>
            &lt;layout type="log4net.Layout.DynamicPatternLayout"&gt;
              &lt;param name="Header" value="%newline**** Trace Opened     Local: %date{yyyy-MM-dd HH:mm:ss.fff}     UTC: %utcdate{yyyy-MM-dd HH:mm:ss.fff} ****%newline" /&gt;
              &lt;param name="Footer" value="**** Trace Closed %date{yyyy-MM-dd HH:mm:ss.fff} ****%newline" /&gt;
            &lt;/layout&gt;
            </example>
            </remarks>
        </member>
        <member name="F:log4net.Layout.DynamicPatternLayout.m_headerPatternString">
            <summary>
            The header PatternString
            </summary>
        </member>
        <member name="F:log4net.Layout.DynamicPatternLayout.m_footerPatternString">
            <summary>
            The footer PatternString
            </summary>
        </member>
        <member name="M:log4net.Layout.DynamicPatternLayout.#ctor">
            <summary>
            Constructs a DynamicPatternLayout using the DefaultConversionPattern
            </summary>
            <remarks>
                <para>
            The default pattern just produces the application supplied message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.DynamicPatternLayout.#ctor(System.String)">
            <summary>
            Constructs a DynamicPatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
            <remarks></remarks>
        </member>
        <member name="P:log4net.Layout.DynamicPatternLayout.Header">
            <summary>
            The header for the layout format.
            </summary>
            <value>the layout header</value>
            <remarks>
                <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            The pattern will be formatted on each get operation.
            </remarks>
        </member>
        <member name="P:log4net.Layout.DynamicPatternLayout.Footer">
            <summary>
            The footer for the layout format.
            </summary>
            <value>the layout footer</value>
            <remarks>
                <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            The pattern will be formatted on each get operation.
            </remarks>
        </member>
        <member name="T:log4net.Layout.ExceptionLayout">
            <summary>
            A Layout that renders only the Exception text from the logging event
            </summary>
            <remarks>
                <para>
            A Layout that renders only the Exception text from the logging event.
            </para>
                <para>
            This Layout should only be used with appenders that utilize multiple
            layouts (e.g. <see cref="T:log4net.Appender.AdoNetAppender" />).
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.ExceptionLayout.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Constructs a ExceptionLayout
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.ExceptionLayout.ActivateOptions">
            <summary>
            Activate component options
            </summary>
            <remarks>
                <para>
            Part of the <see cref="T:log4net.Core.IOptionHandler" /> component activation
            framework.
            </para>
                <para>
            This method does nothing as options become effective immediately.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.ExceptionLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Gets the exception text from the logging event
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Write the exception string to the <see cref="T:System.IO.TextWriter" />.
            The exception string is retrieved from <see cref="M:LoggingEvent.GetExceptionString()" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.ILayout">
            <summary>
            Interface implemented by layout objects
            </summary>
            <remarks>
                <para>
            An <see cref="T:log4net.Layout.ILayout" /> object is used to format a <see cref="T:log4net.Core.LoggingEvent" />
            as text. The <see cref="M:Format(TextWriter,LoggingEvent)" /> method is called by an
            appender to transform the <see cref="T:log4net.Core.LoggingEvent" /> into a string.
            </para>
                <para>
            The layout can also supply <see cref="P:log4net.Layout.ILayout.Header" /> and <see cref="P:log4net.Layout.ILayout.Footer" />
            text that is appender before any events and after all the events respectively.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.ILayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <param name="loggingEvent">The event to format</param>
            <remarks>
                <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent" /> as text and output to a writer.
            </para>
                <para>
            If the caller does not have a <see cref="T:System.IO.TextWriter" /> and prefers the
            event to be formatted as a <see cref="T:System.String" /> then the following
            code can be used to format the event into a <see cref="T:System.IO.StringWriter" />.
            </para>
                <code lang="C#">
            StringWriter writer = new StringWriter();
            Layout.Format(writer, loggingEvent);
            string formattedEvent = writer.ToString();
            </code>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.ContentType">
            <summary>
            The content type output by this layout. 
            </summary>
            <value>The content type</value>
            <remarks>
                <para>
            The content type output by this layout.
            </para>
                <para>
            This is a MIME type e.g. <c>"text/plain"</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.Header">
            <summary>
            The header for the layout format.
            </summary>
            <value>the layout header</value>
            <remarks>
                <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.Footer">
            <summary>
            The footer for the layout format.
            </summary>
            <value>the layout footer</value>
            <remarks>
                <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.ILayout.IgnoresException">
            <summary>
            Flag indicating if this layout handle exceptions
            </summary>
            <value>
                <c>false</c> if this layout handles exceptions</value>
            <remarks>
                <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.IRawLayout">
            <summary>
            Interface for raw layout objects
            </summary>
            <remarks>
                <para>
            Interface used to format a <see cref="T:log4net.Core.LoggingEvent" />
            to an object.
            </para>
                <para>
            This interface should not be confused with the
            <see cref="T:log4net.Layout.ILayout" /> interface. This interface is used in
            only certain specialized situations where a raw object is
            required rather than a formatted string. The <see cref="T:log4net.Layout.ILayout" />
            is not generally useful than this interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.IRawLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
            <remarks>
                <para>
            Implement this method to create your own layout format.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Layout2RawLayoutAdapter">
            <summary>
            Adapts any <see cref="T:log4net.Layout.ILayout" /> to a <see cref="T:log4net.Layout.IRawLayout" /></summary>
            <remarks>
                <para>
            Where an <see cref="T:log4net.Layout.IRawLayout" /> is required this adapter
            allows a <see cref="T:log4net.Layout.ILayout" /> to be specified.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Layout.Layout2RawLayoutAdapter.m_layout">
            <summary>
            The layout to adapt
            </summary>
        </member>
        <member name="M:log4net.Layout.Layout2RawLayoutAdapter.#ctor(log4net.Layout.ILayout)">
            <summary>
            Construct a new adapter
            </summary>
            <param name="layout">the layout to adapt</param>
            <remarks>
                <para>
            Create the adapter for the specified <paramref name="layout" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Layout2RawLayoutAdapter.Format(log4net.Core.LoggingEvent)">
            <summary>
            Format the logging event as an object.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the formatted event</returns>
            <remarks>
                <para>
            Format the logging event as an object.
            </para>
                <para>
            Uses the <see cref="T:log4net.Layout.ILayout" /> object supplied to 
            the constructor to perform the formatting.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.LayoutSkeleton">
            <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
            <remarks>
                <para>
            This is the base implementation of the <see cref="T:log4net.Layout.ILayout" />
            interface. Most layout objects should extend this class.
            </para>
            </remarks>
            <remarks>
                <note type="inheritinfo">
                    <para>
            Subclasses must implement the <see cref="M:Format(TextWriter,LoggingEvent)" />
            method.
            </para>
                    <para>
            Subclasses should set the <see cref="P:log4net.Layout.LayoutSkeleton.IgnoresException" /> in their default
            constructor.
            </para>
                </note>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.m_header">
            <summary>
            The header text
            </summary>
            <remarks>
                <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Header" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.m_footer">
            <summary>
            The footer text
            </summary>
            <remarks>
                <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Footer" /> for more information.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.LayoutSkeleton.m_ignoresException">
            <summary>
            Flag indicating if this layout handles exceptions
            </summary>
            <remarks>
                <para>
                    <c>false</c> if this layout handles exceptions
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.#ctor">
            <summary>
            Empty default constructor
            </summary>
            <remarks>
                <para>
            Empty default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.ActivateOptions">
            <summary>
            Activate component options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> must be called again.
            </para>
                <para>
            This method must be implemented by the subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Implement this method to create your own layout format.
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <param name="loggingEvent">The event to format</param>
            <remarks>
                <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent" /> as text.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.LayoutSkeleton.Format(log4net.Core.LoggingEvent)">
            <summary>
            Convenience method for easily formatting the logging event into a string variable.
            </summary>
            <param name="loggingEvent"></param>
            <remarks>
            Creates a new StringWriter instance to store the formatted logging event.
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.ContentType">
            <summary>
            The content type output by this layout. 
            </summary>
            <value>The content type is <c>"text/plain"</c></value>
            <remarks>
                <para>
            The content type output by this layout.
            </para>
                <para>
            This base class uses the value <c>"text/plain"</c>.
            To change this value a subclass must override this
            property.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Header">
            <summary>
            The header for the layout format.
            </summary>
            <value>the layout header</value>
            <remarks>
                <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.Footer">
            <summary>
            The footer for the layout format.
            </summary>
            <value>the layout footer</value>
            <remarks>
                <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.LayoutSkeleton.IgnoresException">
            <summary>
            Flag indicating if this layout handles exceptions
            </summary>
            <value>
                <c>false</c> if this layout handles exceptions</value>
            <remarks>
                <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
                <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this layout does not handle the exception.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.PatternLayout">
            <summary>
            A flexible layout configurable with pattern string.
            </summary>
            <remarks>
                <para>
            The goal of this class is to <see cref="M:PatternLayout.Format(TextWriter,LoggingEvent)" /> a 
            <see cref="T:log4net.Core.LoggingEvent" /> as a string. The results
            depend on the <i>conversion pattern</i>.
            </para>
                <para>
            The conversion pattern is closely related to the conversion
            pattern of the printf function in C. A conversion pattern is
            composed of literal text and format control expressions called
            <i>conversion specifiers</i>.
            </para>
                <para>
                    <i>You are free to insert any literal text within the conversion
            pattern.</i>
                </para>
                <para>
            Each conversion specifier starts with a percent sign (%) and is
            followed by optional <i>format modifiers</i> and a <i>conversion
            pattern name</i>. The conversion pattern name specifies the type of
            data, e.g. logger, level, date, thread name. The format
            modifiers control such things as field width, padding, left and
            right justification. The following is a simple example.
            </para>
                <para>
            Let the conversion pattern be <b>"%-5level [%thread]: %message%newline"</b> and assume
            that the log4net environment was set to use a PatternLayout. Then the
            statements
            </para>
                <code lang="C#">
            ILog log = LogManager.GetLogger(typeof(TestApp));
            log.Debug("Message 1");
            log.Warn("Message 2");   
            </code>
                <para>would yield the output</para>
                <code>
            DEBUG [main]: Message 1
            WARN  [main]: Message 2  
            </code>
                <para>
            Note that there is no explicit separator between text and
            conversion specifiers. The pattern parser knows when it has reached
            the end of a conversion specifier when it reads a conversion
            character. In the example above the conversion specifier
            <b>%-5level</b> means the level of the logging event should be left
            justified to a width of five characters.
            </para>
                <para>
            The recognized conversion pattern names are:
            </para>
                <list type="table">
                    <listheader>
                        <term>Conversion Pattern Name</term>
                        <description>Effect</description>
                    </listheader>
                    <item>
                        <term>a</term>
                        <description>Equivalent to <b>appdomain</b></description>
                    </item>
                    <item>
                        <term>appdomain</term>
                        <description>
            			Used to output the friendly name of the AppDomain where the 
            			logging event was generated. 
                    </description>
                    </item>
                    <item>
                        <term>aspnet-cache</term>
                        <description>
                            <para>
                        Used to output all cache items in the case of <b>%aspnet-cache</b> or just one named item if used as <b>%aspnet-cache{key}</b></para>
                            <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>aspnet-context</term>
                        <description>
                            <para>
                        Used to output all context items in the case of <b>%aspnet-context</b> or just one named item if used as <b>%aspnet-context{key}</b></para>
                            <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>aspnet-request</term>
                        <description>
                            <para>
                        Used to output all request parameters in the case of <b>%aspnet-request</b> or just one named param if used as <b>%aspnet-request{key}</b></para>
                            <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>aspnet-session</term>
                        <description>
                            <para>
                        Used to output all session items in the case of <b>%aspnet-session</b> or just one named item if used as <b>%aspnet-session{key}</b></para>
                            <para>
                        This pattern is not available for Compact Framework or Client Profile assemblies.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>c</term>
                        <description>Equivalent to <b>logger</b></description>
                    </item>
                    <item>
                        <term>C</term>
                        <description>Equivalent to <b>type</b></description>
                    </item>
                    <item>
                        <term>class</term>
                        <description>Equivalent to <b>type</b></description>
                    </item>
                    <item>
                        <term>d</term>
                        <description>Equivalent to <b>date</b></description>
                    </item>
                    <item>
                        <term>date</term>
                        <description>
                            <para>
            			Used to output the date of the logging event in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
                            <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
                            <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
                            <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>exception</term>
                        <description>
                            <para>
            			Used to output the exception passed in with the log message.
            			</para>
                            <para>
            			If an exception object is stored in the logging event
            			it will be rendered into the pattern output with a
            			trailing newline.
            			If there is no exception then nothing will be output
            			and no trailing newline will be appended.
            			It is typical to put a newline before the exception
            			and to have the exception as the last data in the pattern.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>F</term>
                        <description>Equivalent to <b>file</b></description>
                    </item>
                    <item>
                        <term>file</term>
                        <description>
                            <para>
            			Used to output the file name where the logging request was
            			issued.
            			</para>
                            <para>
                                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
                            <para>
            			See the note below on the availability of caller location information.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>identity</term>
                        <description>
                            <para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
                            <para>
                                <b>WARNING</b> Generating caller information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>l</term>
                        <description>Equivalent to <b>location</b></description>
                    </item>
                    <item>
                        <term>L</term>
                        <description>Equivalent to <b>line</b></description>
                    </item>
                    <item>
                        <term>location</term>
                        <description>
                            <para>
            			Used to output location information of the caller which generated
            			the logging event.
            			</para>
                            <para>
            			The location information depends on the CLI implementation but
            			usually consists of the fully qualified name of the calling
            			method followed by the callers source the file name and line
            			number between parentheses.
            			</para>
                            <para>
            			The location information can be very useful. However, its
            			generation is <b>extremely</b> slow. Its use should be avoided
            			unless execution speed is not an issue.
            			</para>
                            <para>
            			See the note below on the availability of caller location information.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>level</term>
                        <description>
                            <para>
            			Used to output the level of the logging event.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>line</term>
                        <description>
                            <para>
            			Used to output the line number from where the logging request
            			was issued.
            			</para>
                            <para>
                                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
                            <para>
            			See the note below on the availability of caller location information.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>logger</term>
                        <description>
                            <para>
            			Used to output the logger of the logging event. The
            			logger conversion specifier can be optionally followed by
            			<i>precision specifier</i>, that is a decimal constant in
            			brackets.
                        </para>
                            <para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the logger name will be
            			printed. By default the logger name is printed in full.
            			</para>
                            <para>
            			For example, for the logger name "a.b.c" the pattern
            			<b>%logger{2}</b> will output "b.c".
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>m</term>
                        <description>Equivalent to <b>message</b></description>
                    </item>
                    <item>
                        <term>M</term>
                        <description>Equivalent to <b>method</b></description>
                    </item>
                    <item>
                        <term>message</term>
                        <description>
                            <para>
            			Used to output the application supplied message associated with 
            			the logging event.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>mdc</term>
                        <description>
                            <para>
            			The MDC (old name for the ThreadContext.Properties) is now part of the
            			combined event properties. This pattern is supported for compatibility
            			but is equivalent to <b>property</b>.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>method</term>
                        <description>
                            <para>
            			Used to output the method name where the logging request was
            			issued.
            			</para>
                            <para>
                                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
                            <para>
            			See the note below on the availability of caller location information.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>n</term>
                        <description>Equivalent to <b>newline</b></description>
                    </item>
                    <item>
                        <term>newline</term>
                        <description>
                            <para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
                            <para>
            			This conversion pattern offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>ndc</term>
                        <description>
                            <para>
            			Used to output the NDC (nested diagnostic context) associated
            			with the thread that generated the logging event.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>p</term>
                        <description>Equivalent to <b>level</b></description>
                    </item>
                    <item>
                        <term>P</term>
                        <description>Equivalent to <b>property</b></description>
                    </item>
                    <item>
                        <term>properties</term>
                        <description>Equivalent to <b>property</b></description>
                    </item>
                    <item>
                        <term>property</term>
                        <description>
                            <para>
            			Used to output the an event specific property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are added to events by loggers or appenders. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
                            <para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
                            <para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
                            <list type="definition">
                                <item>
                                    <term>the event properties</term>
                                    <description>
            					The event has <see cref="P:log4net.Core.LoggingEvent.Properties" /> that can be set. These 
            					properties are specific to this event only.
            					</description>
                                </item>
                                <item>
                                    <term>the thread properties</term>
                                    <description>
            					The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
                                </item>
                                <item>
                                    <term>the global properties</term>
                                    <description>
            					The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>r</term>
                        <description>Equivalent to <b>timestamp</b></description>
                    </item>
                    <item>
                        <term>stacktrace</term>
                        <description>
                            <para>
            			Used to output the stack trace of the logging event
            			The stack trace level specifier may be enclosed 
            			between braces. For example, <b>%stacktrace{level}</b>.  
            			If no stack trace level specifier is given then 1 is assumed 
            			</para>
                            <para>
            			Output uses the format:
            			type3.MethodCall3 &gt; type2.MethodCall2 &gt; type1.MethodCall1
            			</para>
                            <para>
                        This pattern is not available for Compact Framework assemblies.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>stacktracedetail</term>
                        <description>
                            <para>
            			Used to output the stack trace of the logging event
            			The stack trace level specifier may be enclosed 
            			between braces. For example, <b>%stacktracedetail{level}</b>.  
            			If no stack trace level specifier is given then 1 is assumed 
            			</para>
                            <para>
            			Output uses the format:
                        type3.MethodCall3(type param,...) &gt; type2.MethodCall2(type param,...) &gt; type1.MethodCall1(type param,...)
            			</para>
                            <para>
                        This pattern is not available for Compact Framework assemblies.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>t</term>
                        <description>Equivalent to <b>thread</b></description>
                    </item>
                    <item>
                        <term>timestamp</term>
                        <description>
                            <para>
            			Used to output the number of milliseconds elapsed since the start
            			of the application until the creation of the logging event.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>thread</term>
                        <description>
                            <para>
            			Used to output the name of the thread that generated the
            			logging event. Uses the thread number if no name is available.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>type</term>
                        <description>
                            <para>
            			Used to output the fully qualified type name of the caller
            			issuing the logging request. This conversion specifier
            			can be optionally followed by <i>precision specifier</i>, that
            			is a decimal constant in brackets.
            			</para>
                            <para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the class name will be
            			printed. By default the class name is output in fully qualified form.
            			</para>
                            <para>
            			For example, for the class name "log4net.Layout.PatternLayout", the
            			pattern <b>%type{1}</b> will output "PatternLayout".
            			</para>
                            <para>
                                <b>WARNING</b> Generating the caller class information is
            			slow. Thus, its use should be avoided unless execution speed is
            			not an issue.
            			</para>
                            <para>
            			See the note below on the availability of caller location information.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>u</term>
                        <description>Equivalent to <b>identity</b></description>
                    </item>
                    <item>
                        <term>username</term>
                        <description>
                            <para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
                            <para>
                                <b>WARNING</b> Generating caller WindowsIdentity information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>utcdate</term>
                        <description>
                            <para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
                            <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
                            <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
                            <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>w</term>
                        <description>Equivalent to <b>username</b></description>
                    </item>
                    <item>
                        <term>x</term>
                        <description>Equivalent to <b>ndc</b></description>
                    </item>
                    <item>
                        <term>X</term>
                        <description>Equivalent to <b>mdc</b></description>
                    </item>
                    <item>
                        <term>%</term>
                        <description>
                            <para>
            			The sequence %% outputs a single percent sign.
            			</para>
                        </description>
                    </item>
                </list>
                <para>
            The single letter patterns are deprecated in favor of the 
            longer more descriptive pattern names.
            </para>
                <para>
            By default the relevant information is output as is. However,
            with the aid of format modifiers it is possible to change the
            minimum field width, the maximum field width and justification.
            </para>
                <para>
            The optional format modifier is placed between the percent sign
            and the conversion pattern name.
            </para>
                <para>
            The first optional format modifier is the <i>left justification
            flag</i> which is just the minus (-) character. Then comes the
            optional <i>minimum field width</i> modifier. This is a decimal
            constant that represents the minimum number of characters to
            output. If the data item requires fewer characters, it is padded on
            either the left or the right until the minimum width is
            reached. The default is to pad on the left (right justify) but you
            can specify right padding with the left justification flag. The
            padding character is space. If the data item is larger than the
            minimum field width, the field is expanded to accommodate the
            data. The value is never truncated.
            </para>
                <para>
            This behavior can be changed using the <i>maximum field
            width</i> modifier which is designated by a period followed by a
            decimal constant. If the data item is longer than the maximum
            field, then the extra characters are removed from the
            <i>beginning</i> of the data item and not from the end. For
            example, it the maximum field width is eight and the data item is
            ten characters long, then the first two characters of the data item
            are dropped. This behavior deviates from the printf function in C
            where truncation is done from the end.
            </para>
                <para>
            Below are various format modifier examples for the logger
            conversion specifier.
            </para>
                <div class="tablediv">
                    <table class="dtTABLE" cellspacing="0">
                        <tr>
                            <th>Format modifier</th>
                            <th>left justify</th>
                            <th>minimum width</th>
                            <th>maximum width</th>
                            <th>comment</th>
                        </tr>
                        <tr>
                            <td align="center">%20logger</td>
                            <td align="center">false</td>
                            <td align="center">20</td>
                            <td align="center">none</td>
                            <td>
                                <para>
            				Left pad with spaces if the logger name is less than 20
            				characters long.
            				</para>
                            </td>
                        </tr>
                        <tr>
                            <td align="center">%-20logger</td>
                            <td align="center">true</td>
                            <td align="center">20</td>
                            <td align="center">none</td>
                            <td>
                                <para>
            				Right pad with spaces if the logger 
            				name is less than 20 characters long.
            				</para>
                            </td>
                        </tr>
                        <tr>
                            <td align="center">%.30logger</td>
                            <td align="center">NA</td>
                            <td align="center">none</td>
                            <td align="center">30</td>
                            <td>
                                <para>
            				Truncate from the beginning if the logger 
            				name is longer than 30 characters.
            				</para>
                            </td>
                        </tr>
                        <tr>
                            <td align="center">
                                <nobr>%20.30logger</nobr>
                            </td>
                            <td align="center">false</td>
                            <td align="center">20</td>
                            <td align="center">30</td>
                            <td>
                                <para>
            				Left pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
                            </td>
                        </tr>
                        <tr>
                            <td align="center">%-20.30logger</td>
                            <td align="center">true</td>
                            <td align="center">20</td>
                            <td align="center">30</td>
                            <td>
                                <para>
            				Right pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
                            </td>
                        </tr>
                    </table>
                </div>
                <para>
                    <b>Note about caller location information.</b>
                    <br />
            The following patterns <c>%type %file %line %method %location %class %C %F %L %l %M</c> 
            all generate caller location information.
            Location information uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
                <note type="caution">
                    <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
                </note>
                <note type="caution">
                    <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
                    <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
                    <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
                </note>
                <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Layout.PatternLayout" />
            instance using the <see cref="M:AddConverter(string, Type)" /> method.
            </para>
            </remarks>
            <example>
            This is a more detailed pattern.
            <code><b>%timestamp [%thread] %level %logger %ndc - %message%newline</b></code></example>
            <example>
            A similar pattern except that the relative time is
            right padded if less than 6 digits, thread name is right padded if
            less than 15 characters and truncated if longer and the logger
            name is left padded if shorter than 30 characters and truncated if
            longer.
            <code><b>%-6timestamp [%15.15thread] %-5level %30.30logger %ndc - %message%newline</b></code></example>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Douglas de la Torre</author>
            <author>Daniel Cazzulino</author>
        </member>
        <member name="F:log4net.Layout.PatternLayout.DefaultConversionPattern">
            <summary>
            Default pattern string for log output. 
            </summary>
            <remarks>
                <para>
            Default pattern string for log output. 
            Currently set to the string <b>"%message%newline"</b> 
            which just prints the application supplied message. 
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.PatternLayout.DetailConversionPattern">
            <summary>
            A detailed conversion pattern
            </summary>
            <remarks>
                <para>
            A conversion pattern which includes Time, Thread, Logger, and Nested Context.
            Current value is <b>%timestamp [%thread] %level %logger %ndc - %message%newline</b>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.PatternLayout.s_globalRulesRegistry">
            <summary>
            Internal map of converter identifiers to converter types.
            </summary>
            <remarks>
                <para>
            This static map is overridden by the m_converterRegistry instance map
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="F:log4net.Layout.PatternLayout.m_instanceRulesRegistry">
            <summary>
            patterns defined on this PatternLayout only
            </summary>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#cctor">
            <summary>
            Initialize the global registry
            </summary>
            <remarks>
                <para>
            Defines the builtin global rules.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor">
            <summary>
            Constructs a PatternLayout using the DefaultConversionPattern
            </summary>
            <remarks>
                <para>
            The default pattern just produces the application supplied message.
            </para>
                <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)" />. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
                <para>
            As per the <see cref="T:log4net.Core.IOptionHandler" /> contract the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" />
            method must be called after the properties on this object have been
            configured.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.#ctor(System.String)">
            <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
            <param name="pattern">the pattern to use</param>
            <remarks>
                <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)" />. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
                <para>
            When using this constructor the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> method 
            need not be called. This may not be the case when using a subclass.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.PatternLayout.ConversionPattern">
            <summary>
            The pattern formatting string
            </summary>
            <remarks>
                <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)">
            <summary>
            Create the pattern parser instance
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns>The <see cref="T:log4net.Util.PatternParser" /> that will format the event</returns>
            <remarks>
                <para>
            Creates the <see cref="T:log4net.Util.PatternParser" /> used to parse the conversion string. Sets the
            global and instance rules on the <see cref="T:log4net.Util.PatternParser" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
                <para>
            Parse the <see cref="T:log4net.Core.LoggingEvent" /> using the patter format
            specified in the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" /> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.AddConverter(log4net.Util.ConverterInfo)">
            <summary>
            Add a converter to this PatternLayout
            </summary>
            <param name="converterInfo">the converter info</param>
            <remarks>
                <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:AddConverter(string,Type)" /> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.PatternLayout.AddConverter(System.String,System.Type)">
            <summary>
            Add a converter to this PatternLayout
            </summary>
            <param name="name">the name of the conversion pattern for this converter</param>
            <param name="type">the type of the converter</param>
            <remarks>
                <para>
            Add a named pattern converter to this instance. This
            converter will be used in the formatting of the event.
            This method must be called before <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" />.
            </para>
                <para>
            The <paramref name="type" /> specified must extend the 
            <see cref="T:log4net.Util.PatternConverter" /> type.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.AppDomainPatternConverter">
            <summary>
            Write the event appdomain name to the output
            </summary>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain" /> to the output writer.
            </para>
            </remarks>
            <author>Daniel Cazzulino</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.AppDomainPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the event appdomain name to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain" /> to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.DatePatternConverter">
            <summary>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
            <remarks>
                <para>
            Render the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the writer as a string.
            </para>
                <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition"><listheader><term>Option value</term><description>Output</description></listheader><item><term>ISO8601</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description></item><item><term>DATE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description></item><item><term>ABSOLUTE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" /> formatter. 
            		Formats using the <c>"HH:mm:ss,yyyy"</c> for example, <c>"15:49:37,459"</c>.
            		</description></item><item><term>other</term><description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime" /><see cref="M:DateTime.ToString(string)" /> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description></item></list></para>
                <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Layout.Pattern.UtcDatePatternConverter" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Layout.Pattern.DatePatternConverter.m_dateFormatter">
            <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter pattern based on the <see cref="P:log4net.Util.PatternConverter.Option" /> property.
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.DatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Convert the pattern into the rendered message
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
                <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> passed is in the local time zone.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.Pattern.DatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the DatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.ExceptionPatternConverter">
            <summary>
            Write the exception text to the output
            </summary>
            <remarks>
                <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
                <para>
            If there is no exception then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the exception text to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
                <para>
            If there is no exception or the exception property specified
            by the Option value does not exist then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
                <para>
            Recognized values for the Option parameter are:
            </para>
                <list type="bullet">
                    <item>
                        <description>Message</description>
                    </item>
                    <item>
                        <description>Source</description>
                    </item>
                    <item>
                        <description>StackTrace</description>
                    </item>
                    <item>
                        <description>TargetSite</description>
                    </item>
                    <item>
                        <description>HelpLink</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.FileLocationPatternConverter">
            <summary>
            Writes the caller location file name to the output
            </summary>
            <remarks>
                <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName" /> for
            the event to the output writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.FileLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the caller location file name to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName" /> for
            the <paramref name="loggingEvent" /> to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.FullLocationPatternConverter">
            <summary>
            Write the caller location info to the output
            </summary>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo" /> to the output writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.FullLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the caller location info to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo" /> to the output writer.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.IdentityPatternConverter">
            <summary>
            Writes the event identity to the output
            </summary>
            <remarks>
                <para>
            Writes the value of the <see cref="P:log4net.Core.LoggingEvent.Identity" /> to
            the output writer.
            </para>
            </remarks>
            <author>Daniel Cazzulino</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.IdentityPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Writes the event identity to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the value of the <paramref name="loggingEvent" /><see cref="P:log4net.Core.LoggingEvent.Identity" /> to
            the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.LevelPatternConverter">
            <summary>
            Write the event level to the output
            </summary>
            <remarks>
                <para>
            Writes the display name of the event <see cref="P:log4net.Core.LoggingEvent.Level" />
            to the writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.LevelPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the event level to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.Level.DisplayName" /> of the <paramref name="loggingEvent" /><see cref="P:log4net.Core.LoggingEvent.Level" />
            to the <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.LineLocationPatternConverter">
            <summary>
            Write the caller location line number to the output
            </summary>
            <remarks>
                <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber" /> for
            the event to the output writer.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.LineLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the caller location line number to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber" /> for
            the <paramref name="loggingEvent" /> to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.LoggerPatternConverter">
            <summary>
            Converter for logger name
            </summary>
            <remarks>
                <para>
            Outputs the <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the event.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.LoggerPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the logger
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>The fully qualified logger name</returns>
            <remarks>
                <para>
            Returns the <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the <paramref name="loggingEvent" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.MessagePatternConverter">
            <summary>
            Writes the event message to the output
            </summary>
            <remarks>
                <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)" /> method
            to write out the event message.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.MessagePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Writes the event message to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)" /> method
            to write out the event message.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.MethodLocationPatternConverter">
            <summary>
            Write the method name to the output
            </summary>
            <remarks>
                <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName" /> to
            the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.MethodLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the method name to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName" /> to
            the output.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.NamedPatternConverter">
            <summary>
            Converter to output and truncate <c>'.'</c> separated strings
            </summary>
            <remarks>
                <para>
            This abstract class supports truncating a <c>'.'</c> separated string
            to show a specified number of elements from the right hand side.
            This is used to truncate class names that are fully qualified.
            </para>
                <para>
            Subclasses should override the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)" /> method to
            return the fully qualified string.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions">
            <summary>
            Initialize the converter 
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
            <summary>
            Get the fully qualified string data
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>the fully qualified name</returns>
            <remarks>
                <para>
            Overridden by subclasses to get the fully qualified name before the
            precision is applied to it.
            </para>
                <para>
            Return the fully qualified <c>'.'</c> (dot/period) separated string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.NamedPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
            Render the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)" /> to the precision
            specified by the <see cref="P:log4net.Util.PatternConverter.Option" /> property.
            </remarks>
        </member>
        <member name="F:log4net.Layout.Pattern.NamedPatternConverter.declaringType">
            <summary>
            The fully qualified type of the NamedPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.NdcPatternConverter">
            <summary>
            Converter to include event NDC
            </summary>
            <remarks>
                <para>
            Outputs the value of the event property named <c>NDC</c>.
            </para>
                <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter" /> should be used instead.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.NdcPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the event NDC to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            As the thread context stacks are now stored in named event properties
            this converter simply looks up the value of the <c>NDC</c> property.
            </para>
                <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter" /> should be used instead.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.PatternLayoutConverter">
            <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
            <remarks>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Layout.Pattern.PatternLayoutConverter" /> class.
            </summary>
        </member>
        <member name="P:log4net.Layout.Pattern.PatternLayoutConverter.IgnoresException">
            <summary>
            Flag indicating if this converter handles the logging event exception
            </summary>
            <value>
                <c>false</c> if this converter handles the logging event exception</value>
            <remarks>
                <para>
            If this converter handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then this property should be set to
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the property should be set to <c>true</c>.
            </para>
                <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this converter does not handle the exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
        </member>
        <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">The state object on which the pattern converter should be executed.</param>
        </member>
        <member name="F:log4net.Layout.Pattern.PatternLayoutConverter.m_ignoresException">
            <summary>
            Flag indicating if this converter handles exceptions
            </summary>
            <remarks>
                <c>false</c> if this converter handles exceptions
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.PropertyPatternConverter">
            <summary>
            Property pattern converter
            </summary>
            <remarks>
                <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
                <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.PropertyPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the property value to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
                <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.RelativeTimePatternConverter">
            <summary>
            Converter to output the relative time of the event
            </summary>
            <remarks>
                <para>
            Converter to output the time of the event relative to the start of the program.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the relative time to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes out the relative time of the event in milliseconds.
            That is the number of milliseconds between the event <see cref="P:log4net.Core.LoggingEvent.TimeStamp" />
            and the <see cref="P:log4net.Core.LoggingEvent.StartTime" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
            <summary>
            Helper method to get the time difference between two DateTime objects
            </summary>
            <param name="start">start time (in the current local time zone)</param>
            <param name="end">end time (in the current local time zone)</param>
            <returns>the time difference in milliseconds</returns>
        </member>
        <member name="T:log4net.Layout.Pattern.StackTraceDetailPatternConverter">
            <summary>
            Write the caller stack frames to the output
            </summary>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames" /> to the output writer, using format:
            type3.MethodCall3(type param,...) &gt; type2.MethodCall2(type param,...) &gt; type1.MethodCall1(type param,...)
            </para>
            </remarks>
            <author>Adam Davies</author>
        </member>
        <member name="F:log4net.Layout.Pattern.StackTraceDetailPatternConverter.declaringType">
            <summary>
            The fully qualified type of the StackTraceDetailPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.StackTracePatternConverter">
            <summary>
            Write the caller stack frames to the output
            </summary>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames" /> to the output writer, using format:
            type3.MethodCall3 &gt; type2.MethodCall2 &gt; type1.MethodCall1
            </para>
            </remarks>
            <author>Michael Cromwell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.StackTracePatternConverter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the strack frames to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.StackFrames" /> to the output writer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.Pattern.StackTracePatternConverter.GetMethodInformation(log4net.Core.MethodItem)">
            <summary>
            Returns the Name of the method
            </summary>
            <param name="method"></param>
            <remarks>This method was created, so this class could be used as a base class for StackTraceDetailPatternConverter</remarks>
            <returns>string</returns>
        </member>
        <member name="F:log4net.Layout.Pattern.StackTracePatternConverter.declaringType">
            <summary>
            The fully qualified type of the StackTracePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.ThreadPatternConverter">
            <summary>
            Converter to include event thread name
            </summary>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName" /> to the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.ThreadPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the ThreadName to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName" /> to the <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.TypeNamePatternConverter">
            <summary>
            Pattern converter for the class name
            </summary>
            <remarks>
                <para>
            Outputs the <see cref="P:log4net.Core.LocationInfo.ClassName" /> of the event.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.TypeNamePatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
            <summary>
            Gets the fully qualified name of the class
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <returns>The fully qualified type name for the caller location</returns>
            <remarks>
                <para>
            Returns the <see cref="P:log4net.Core.LocationInfo.ClassName" /> of the <paramref name="loggingEvent" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.Pattern.UserNamePatternConverter">
            <summary>
            Converter to include event user name
            </summary>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.UserNamePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Convert the pattern to the rendered message
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
        </member>
        <member name="T:log4net.Layout.Pattern.UtcDatePatternConverter">
            <summary>
            Write the TimeStamp to the output
            </summary>
            <remarks>
                <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
                <para>
            Uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> 
            in Universal time.
            </para>
                <para>
            See the <see cref="T:log4net.Layout.Pattern.DatePatternConverter" /> for details on the date pattern syntax.
            </para>
            </remarks>
            <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.Pattern.UtcDatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Write the TimeStamp to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="loggingEvent">the event being logged</param>
            <remarks>
                <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
                <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> passed is in the local time zone, this is converted
            to Universal time before it is rendered.
            </para>
            </remarks>
            <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter" />
        </member>
        <member name="F:log4net.Layout.Pattern.UtcDatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the UtcDatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawLayoutConverter">
            <summary>
            Type converter for the <see cref="T:log4net.Layout.IRawLayout" /> interface
            </summary>
            <remarks>
                <para>
            Used to convert objects to the <see cref="T:log4net.Layout.IRawLayout" /> interface.
            Supports converting from the <see cref="T:log4net.Layout.ILayout" /> interface to
            the <see cref="T:log4net.Layout.IRawLayout" /> interface using the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.RawLayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the sourceType be converted to an <see cref="T:log4net.Layout.IRawLayout" /></summary>
            <param name="sourceType">the source to be to be converted</param>
            <returns>
                <c>true</c> if the source type can be converted to <see cref="T:log4net.Layout.IRawLayout" /></returns>
            <remarks>
                <para>
            Test if the <paramref name="sourceType" /> can be converted to a
            <see cref="T:log4net.Layout.IRawLayout" />. Only <see cref="T:log4net.Layout.ILayout" /> is supported
            as the <paramref name="sourceType" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.RawLayoutConverter.ConvertFrom(System.Object)">
            <summary>
            Convert the value to a <see cref="T:log4net.Layout.IRawLayout" /> object
            </summary>
            <param name="source">the value to convert</param>
            <returns>the <see cref="T:log4net.Layout.IRawLayout" /> object</returns>
            <remarks>
                <para>
            Convert the <paramref name="source" /> object to a 
            <see cref="T:log4net.Layout.IRawLayout" /> object. If the <paramref name="source" /> object
            is a <see cref="T:log4net.Layout.ILayout" /> then the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter" />
            is used to adapt between the two interfaces, otherwise an
            exception is thrown.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawPropertyLayout">
            <summary>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
            <remarks>
                <para>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent" /></para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Layout.RawPropertyLayout.#ctor">
            <summary>
            Constructs a RawPropertyLayout
            </summary>
        </member>
        <member name="P:log4net.Layout.RawPropertyLayout.Key">
            <summary>
            The name of the value to lookup in the LoggingEvent Properties collection.
            </summary>
            <value>
            Value to lookup in the LoggingEvent Properties collection
            </value>
            <remarks>
                <para>
            String name of the property to lookup in the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.RawPropertyLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Lookup the property for <see cref="P:log4net.Layout.RawPropertyLayout.Key" /></summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns property value</returns>
            <remarks>
                <para>
            Looks up and returns the object value of the property
            named <see cref="P:log4net.Layout.RawPropertyLayout.Key" />. If there is no property defined
            with than name then <c>null</c> will be returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawTimeStampLayout">
            <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
            <remarks>
                <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.RawTimeStampLayout.#ctor">
            <summary>
            Constructs a RawTimeStampLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.RawTimeStampLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the time stamp</returns>
            <remarks>
                <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </para>
                <para>
            The time stamp is in local time. To format the time stamp
            in universal time use <see cref="T:log4net.Layout.RawUtcTimeStampLayout" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.RawUtcTimeStampLayout">
            <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
            <remarks>
                <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.RawUtcTimeStampLayout.#ctor">
            <summary>
            Constructs a RawUtcTimeStampLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.RawUtcTimeStampLayout.Format(log4net.Core.LoggingEvent)">
            <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </summary>
            <param name="loggingEvent">The event to format</param>
            <returns>returns the time stamp</returns>
            <remarks>
                <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </para>
                <para>
            The time stamp is in universal time. To format the time stamp
            in local time use <see cref="T:log4net.Layout.RawTimeStampLayout" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.SimpleLayout">
            <summary>
            A very simple layout
            </summary>
            <remarks>
                <para>
            SimpleLayout consists of the level of the log statement,
            followed by " - " and then the log message itself. For example,
            <code>
            DEBUG - Hello world
            </code></para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.SimpleLayout.#ctor">
            <summary>
            Constructs a SimpleLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.SimpleLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.SimpleLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a simple formatted output.
            </summary>
            <param name="loggingEvent">the event being logged</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
                <para>
            Formats the event as the level of the even,
            followed by " - " and then the log message itself. The
            output is terminated by a newline.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Layout.XmlLayout">
            <summary>
             Layout that formats the log events as XML elements.
             </summary>
            <remarks>
                <para>
             The output of the <see cref="T:log4net.Layout.XmlLayout" /> consists of a series of 
             log4net:event elements. It does not output a complete well-formed XML 
             file. The output is designed to be included as an <em>external entity</em>
             in a separate file to form a correct XML file.
             </para>
                <para>
             For example, if <c>abc</c> is the name of the file where
             the <see cref="T:log4net.Layout.XmlLayout" /> output goes, then a well-formed XML file would 
             be:
             </para>
                <code lang="XML">
             &lt;?xml version="1.0" ?&gt;
             
             &lt;!DOCTYPE log4net:events SYSTEM "log4net-events.dtd" [&lt;!ENTITY data SYSTEM "abc"&gt;]&gt;
            
             &lt;log4net:events version="1.2" xmlns:log4net="http://logging.apache.org/log4net/schemas/log4net-events-1.2&gt;
                 &amp;data;
             &lt;/log4net:events&gt;
             </code>
                <para>
             This approach enforces the independence of the <see cref="T:log4net.Layout.XmlLayout" /> 
             and the appender where it is embedded.
             </para>
                <para>
             The <c>version</c> attribute helps components to correctly
             interpret output generated by <see cref="T:log4net.Layout.XmlLayout" />. The value of 
             this attribute should be "1.2" for release 1.2 and later.
             </para>
                <para>
             Alternatively the <c>Header</c> and <c>Footer</c> properties can be
             configured to output the correct XML header, open tag and close tag.
             When setting the <c>Header</c> and <c>Footer</c> properties it is essential
             that the underlying data store not be appendable otherwise the data
             will become invalid XML.
             </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.XmlLayout.#ctor">
            <summary>
            Constructs an XmlLayout
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayout.#ctor(System.Boolean)">
            <summary>
            Constructs an XmlLayout.
            </summary>
            <remarks>
                <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
                <para>
            If you are embedding this layout within an SmtpAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayout.Prefix">
            <summary>
            The prefix to use for all element names
            </summary>
            <remarks>
                <para>
            The default prefix is <b>log4net</b>. Set this property
            to change the prefix. If the prefix is set to an empty string
            then no prefix will be written.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayout.Base64EncodeMessage">
            <summary>
            Set whether or not to base64 encode the message.
            </summary>
            <remarks>
                <para>
            By default the log message will be written as text to the xml
            output. This can cause problems when the message contains binary
            data. By setting this to true the contents of the message will be
            base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement" />) will not be performed
            on the log message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayout.Base64EncodeProperties">
            <summary>
            Set whether or not to base64 encode the property values.
            </summary>
            <remarks>
                <para>
            By default the properties will be written as text to the xml
            output. This can cause problems when one or more properties contain
            binary data. By setting this to true the values of the properties
            will be base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement" />) will not be performed
            on the property values.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayout.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> must be called again.
            </para>
                <para>
            Builds a cache of the element names
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayout.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
            <summary>
            Does the actual writing of the XML.
            </summary>
            <param name="writer">The writer to use to output the event to.</param>
            <param name="loggingEvent">The event to write.</param>
            <remarks>
                <para>
            Override the base class <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method
            to write the <see cref="T:log4net.Core.LoggingEvent" /> to the <see cref="T:System.Xml.XmlWriter" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.XmlLayout.m_prefix">
            <summary>
            The prefix to use for all generated element names
            </summary>
        </member>
        <member name="T:log4net.Layout.XmlLayoutBase">
            <summary>
            Layout that formats the log events as XML elements.
            </summary>
            <remarks>
                <para>
            This is an abstract class that must be subclassed by an implementation 
            to conform to a specific schema.
            </para>
                <para>
            Deriving classes must implement the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.#ctor">
            <summary>
            Protected constructor to support subclasses
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Layout.XmlLayoutBase" /> class
            with no location info.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.#ctor(System.Boolean)">
            <summary>
            Protected constructor to support subclasses
            </summary>
            <remarks>
                <para>
            The <paramref name="locationInfo" /> parameter determines whether 
            location information will be output by the layout. If 
            <paramref name="locationInfo" /> is set to <c>true</c>, then the 
            file name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
                <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutBase.LocationInfo">
            <summary>
            Gets a value indicating whether to include location information in 
            the XML events.
            </summary>
            <value>
                <c>true</c> if location information should be included in the XML 
            events; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>
            If <see cref="P:log4net.Layout.XmlLayoutBase.LocationInfo" /> is set to <c>true</c>, then the file 
            name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
                <para>
            If you are embedding this layout within an <c>SMTPAppender</c>
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement">
            <summary>
            The string to replace characters that can not be expressed in XML with.
            <remarks><para>
            Not all characters may be expressed in XML. This property contains the
            string to replace those that can not with. This defaults to a ?. Set it
            to the empty string to simply remove offending characters. For more
            details on the allowed character ranges see http://www.w3.org/TR/REC-xml/#charsets
            Character replacement will occur in  the log message, the property names 
            and the property values.
            </para></remarks></summary>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.ActivateOptions">
            <summary>
            Initialize layout options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutBase.ContentType">
            <summary>
            Gets the content type output by this layout. 
            </summary>
            <value>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </value>
            <remarks>
                <para>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
            <summary>
            Produces a formatted string.
            </summary>
            <param name="loggingEvent">The event being logged.</param>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
                <para>
            Format the <see cref="T:log4net.Core.LoggingEvent" /> and write it to the <see cref="T:System.IO.TextWriter" />.
            </para>
                <para>
            This method creates an <see cref="T:System.Xml.XmlTextWriter" /> that writes to the
            <paramref name="writer" />. The <see cref="T:System.Xml.XmlTextWriter" /> is passed 
            to the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method. Subclasses should override the
            <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method rather than this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
            <summary>
            Does the actual writing of the XML.
            </summary>
            <param name="writer">The writer to use to output the event to.</param>
            <param name="loggingEvent">The event to write.</param>
            <remarks>
                <para>
            Subclasses should override this method to format
            the <see cref="T:log4net.Core.LoggingEvent" /> as XML.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Layout.XmlLayoutBase.m_locationInfo">
            <summary>
            Flag to indicate if location information should be included in
            the XML events.
            </summary>
        </member>
        <member name="F:log4net.Layout.XmlLayoutBase.m_invalidCharReplacement">
            <summary>
            The string to replace invalid chars with
            </summary>
        </member>
        <member name="T:log4net.Layout.XmlLayoutSchemaLog4j">
            <summary>
            Layout that formats the log events as XML elements compatible with the log4j schema
            </summary>
            <remarks>
                <para>
            Formats the log events according to the http://logging.apache.org/log4j schema.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Layout.XmlLayoutSchemaLog4j.s_date1970">
            <summary>
            The 1st of January 1970 in UTC
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor">
            <summary>
            Constructs an XMLLayoutSchemaLog4j
            </summary>
        </member>
        <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor(System.Boolean)">
            <summary>
            Constructs an XMLLayoutSchemaLog4j.
            </summary>
            <remarks>
                <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
                <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Layout.XmlLayoutSchemaLog4j.Version">
            <summary>
            The version of the log4j schema to use.
            </summary>
            <remarks>
                <para>
            Only version 1.2 of the log4j schema is supported.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
            <summary>
            Actually do the writing of the xml
            </summary>
            <param name="writer">the writer to use</param>
            <param name="loggingEvent">the event to write</param>
            <remarks>
                <para>
            Generate XML that is compatible with the log4j schema.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.LogicalThreadContext">
            <summary>
            The log4net Logical Thread Context.
            </summary>
            <remarks>
                <para>
            The <c>LogicalThreadContext</c> provides a location for <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> specific debugging 
            information to be stored.
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext" /> or <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
                <para>
            For .NET Standard 1.3 this class uses
            System.Threading.AsyncLocal rather than <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />.
            </para>
                <para>
            The Logical Thread Context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputting these properties.
            </para>
                <para>
            The Logical Thread Context provides a diagnostic context for the current call context. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
                <para>
            The Logical Thread Context is managed on a per <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> basis.
            </para>
                <para>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> requires a link time 
            <see cref="T:System.Security.Permissions.SecurityPermission" /> for the
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.
            If the calling code does not have this permission then this context will be disabled.
            It will not store any property values set on it.
            </para>
            </remarks>
            <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            LogicalThreadContext.Properties["user"] = userName;
            log.Info("This log message has a LogicalThreadContext Property called 'user'");
            </code></example>
            <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(LogicalThreadContext.Stacks["LDC"].Push("my context message"))
            {
            	log.Info("This log message has a LogicalThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code></example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.LogicalThreadContext.#ctor">
            <summary>
            Private Constructor. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.LogicalThreadContext.Properties">
            <summary>
            The thread properties map
            </summary>
            <value>
            The thread properties map
            </value>
            <remarks>
                <para>
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext" /> 
            or <see cref="T:log4net.GlobalContext" /> properties with the same name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.LogicalThreadContext.Stacks">
            <summary>
            The thread stacks
            </summary>
            <value>
            stack map
            </value>
            <remarks>
                <para>
            The logical thread stacks.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.LogicalThreadContext.s_properties">
            <summary>
            The thread context properties instance
            </summary>
        </member>
        <member name="F:log4net.LogicalThreadContext.s_stacks">
            <summary>
            The thread context stacks instance
            </summary>
        </member>
        <member name="T:log4net.LogManager">
            <summary>
            This class is used by client applications to request logger instances.
            </summary>
            <remarks>
                <para>
            This class has static methods that are used by a client to request
            a logger instance. The <see cref="M:GetLogger(string)" /> method is 
            used to retrieve a logger.
            </para>
                <para>
            See the <see cref="T:log4net.ILog" /> interface for more details.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code></example>
            <threadsafety static="true" instance="true" />
            <seealso cref="T:log4net.ILog" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.LogManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.LogManager" /> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="M:log4net.LogManager.Exists(System.String)">
            <overloads>Returns the named logger if it exists.</overloads>
            <summary>
            Returns the named logger if it exists.
            </summary>
            <remarks>
                <para>
            If the named logger exists (in the default repository) then it
            returns a reference to the logger, otherwise it returns <c>null</c>.
            </para>
            </remarks>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>The logger found, or <c>null</c> if no logger could be found.</returns>
        </member>
        <member name="M:log4net.LogManager.GetCurrentLoggers">
            <overloads>Get the currently defined loggers.</overloads>
            <summary>
            Returns all the currently defined loggers in the default repository.
            </summary>
            <remarks>
                <para>The root logger is <b>not</b> included in the returned array.</para>
            </remarks>
            <returns>All the defined loggers.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String)">
            <overloads>Get or create a logger.</overloads>
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <remarks>
                <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
                <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <remarks>
                <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger found, or <c>null</c> if the logger doesn't exist in the specified 
            repository.
            </returns>
        </member>
        <member name="M:log4net.LogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists.
            </summary>
            <remarks>
                <para>
            If the named logger exists (in the repository for the specified assembly) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The fully qualified logger name to look for.</param>
            <returns>
            The logger, or <c>null</c> if the logger doesn't exist in the specified
            assembly's repository.
            </returns>
        </member>
        <member name="M:log4net.LogManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
            <param name="repository">The repository to lookup in.</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers.</returns>
        </member>
        <member name="M:log4net.LogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <remarks>
                <para>
            Retrieve a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
                <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            Retrieves or creates a named logger.
            </summary>
            <remarks>
                <para>
            Retrieve a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
                <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
            <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repository">The repository to lookup in.</param>
            <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:LogManager.GetLogger(string)" />.
            </summary>
            <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
            <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
            <returns>The logger with the name specified.</returns>
        </member>
        <member name="M:log4net.LogManager.Shutdown">
            <summary>
            Shuts down the log4net system.
            </summary>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
                <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ShutdownRepository">
            <overloads>Shutdown a logger repository.</overloads>
            <summary>
            Shuts down the default repository.
            </summary>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            default repository.
            </para>
                <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ShutdownRepository(System.String)">
            <summary>
            Shuts down the repository for the repository specified.
            </summary>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            <paramref name="repository" /> specified.
            </para>
                <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
            <param name="repository">The repository to shutdown.</param>
        </member>
        <member name="M:log4net.LogManager.ShutdownRepository(System.Reflection.Assembly)">
            <summary>
            Shuts down the repository specified.
            </summary>
            <remarks>
                <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository. The repository is looked up using
            the <paramref name="repositoryAssembly" /> specified.
            </para>
                <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
                <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration">
            <overloads>Reset the configuration of a repository</overloads>
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <remarks>
                <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration(System.String)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <remarks>
                <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
            </remarks>
            <param name="repository">The repository to reset.</param>
        </member>
        <member name="M:log4net.LogManager.ResetConfiguration(System.Reflection.Assembly)">
            <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
            <remarks>
                <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
        </member>
        <member name="M:log4net.LogManager.GetLoggerRepository">
            <overloads>Get the logger repository.</overloads>
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the callers assembly (<see cref="M:Assembly.GetCallingAssembly()" />).
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> instance for the default repository.</returns>
        </member>
        <member name="M:log4net.LogManager.GetLoggerRepository(System.String)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
        </member>
        <member name="M:log4net.LogManager.GetLoggerRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repositoryAssembly" /> argument.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
        </member>
        <member name="M:log4net.LogManager.GetRepository">
            <overloads>Get a logger repository.</overloads>
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the callers assembly (<see cref="M:Assembly.GetCallingAssembly()" />).
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> instance for the default repository.</returns>
        </member>
        <member name="M:log4net.LogManager.GetRepository(System.String)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
            </remarks>
            <param name="repository">The repository to lookup in.</param>
        </member>
        <member name="M:log4net.LogManager.GetRepository(System.Reflection.Assembly)">
            <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
            <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repositoryAssembly" /> argument.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.Type)">
            <overloads>Create a domain</overloads>
            <summary>
            Creates a repository with the specified repository type.
            </summary>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository()" /> will return 
            the same repository instance.
            </para>
            </remarks>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.Type)">
            <overloads>Create a logger repository.</overloads>
            <summary>
            Creates a repository with the specified repository type.
            </summary>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository()" /> will return 
            the same repository instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.String)">
            <summary>
            Creates a repository with the specified name.
            </summary>
            <remarks>
                <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a repository with the specified name and repository type.
            </summary>
            <remarks>
                <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
            </remarks>
            <param name="repository">The name of the repository, this must be unique to the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
            <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
        </member>
        <member name="M:log4net.LogManager.CreateDomain(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <remarks>
                <para>
                    <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
                </para>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
        </member>
        <member name="M:log4net.LogManager.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:GetRepository(Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
            </remarks>
            <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
            <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
        </member>
        <member name="M:log4net.LogManager.GetAllRepositories">
            <summary>
            Gets the list of currently defined repositories.
            </summary>
            <remarks>
                <para>
            Get an array of all the <see cref="T:log4net.Repository.ILoggerRepository" /> objects that have been created.
            </para>
            </remarks>
            <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository" /> objects.</returns>
        </member>
        <member name="M:log4net.LogManager.Flush(System.Int32)">
            <summary>
            Flushes logging events buffered in all configured appenders in the default repository.
            </summary>
            <param name="millisecondsTimeout">The maximum time in milliseconds to wait for logging events from asycnhronous appenders to be flushed.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="M:log4net.LogManager.WrapLogger(log4net.Core.ILogger)">
            <summary>
            Looks up the wrapper object for the logger specified.
            </summary>
            <param name="logger">The logger to get the wrapper for.</param>
            <returns>The wrapper for the logger specified.</returns>
        </member>
        <member name="M:log4net.LogManager.WrapLoggers(log4net.Core.ILogger[])">
            <summary>
            Looks up the wrapper objects for the loggers specified.
            </summary>
            <param name="loggers">The loggers to get the wrappers for.</param>
            <returns>The wrapper objects for the loggers specified.</returns>
        </member>
        <member name="M:log4net.LogManager.WrapperCreationHandler(log4net.Core.ILogger)">
            <summary>
            Create the <see cref="T:log4net.Core.ILoggerWrapper" /> objects used by
            this manager.
            </summary>
            <param name="logger">The logger to wrap.</param>
            <returns>The wrapper for the logger specified.</returns>
        </member>
        <member name="F:log4net.LogManager.s_wrapperMap">
            <summary>
            The wrapper map to use to hold the <see cref="T:log4net.Core.LogImpl" /> objects.
            </summary>
        </member>
        <member name="T:log4net.MDC">
            <summary>
            Implementation of Mapped Diagnostic Contexts.
            </summary>
            <remarks>
                <note>
                    <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
                </note>
                <para>
            The MDC class is similar to the <see cref="T:log4net.NDC" /> class except that it is
            based on a map instead of a stack. It provides <i>mapped
            diagnostic contexts</i>. A <i>Mapped Diagnostic Context</i>, or
            MDC in short, is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
                <para>
            The MDC is managed on a per thread basis.
            </para>
            </remarks>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.MDC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.MDC" /> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="M:log4net.MDC.Get(System.String)">
            <summary>
            Gets the context value identified by the <paramref name="key" /> parameter.
            </summary>
            <param name="key">The key to lookup in the MDC.</param>
            <returns>The string value held for the key, or a <c>null</c> reference if no corresponding value is found.</returns>
            <remarks>
                <note>
                    <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
                </note>
                <para>
            If the <paramref name="key" /> parameter does not look up to a
            previously defined context then <c>null</c> will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.MDC.Set(System.String,System.String)">
            <summary>
            Add an entry to the MDC
            </summary>
            <param name="key">The key to store the value under.</param>
            <param name="value">The value to store.</param>
            <remarks>
                <note>
                    <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
                </note>
                <para>
            Puts a context value (the <paramref name="value" /> parameter) as identified
            with the <paramref name="key" /> parameter into the current thread's
            context map.
            </para>
                <para>
            If a value is already defined for the <paramref name="key" />
            specified then the value will be replaced. If the <paramref name="value" /> 
            is specified as <c>null</c> then the key value mapping will be removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.MDC.Remove(System.String)">
            <summary>
            Removes the key value mapping for the key specified.
            </summary>
            <param name="key">The key to remove.</param>
            <remarks>
                <note>
                    <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
                </note>
                <para>
            Remove the specified entry from this thread's MDC
            </para>
            </remarks>
        </member>
        <member name="M:log4net.MDC.Clear">
            <summary>
            Clear all entries in the MDC
            </summary>
            <remarks>
                <note>
                    <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
                </note>
                <para>
            Remove all the entries from this thread's MDC
            </para>
            </remarks>
        </member>
        <member name="T:log4net.NDC">
            <summary>
            Implementation of Nested Diagnostic Contexts.
            </summary>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            A Nested Diagnostic Context, or NDC in short, is an instrument
            to distinguish interleaved log output from different sources. Log
            output is typically interleaved when a server handles multiple
            clients near-simultaneously.
            </para>
                <para>
            Interleaved log output can still be meaningful if each log entry
            from different contexts had a distinctive stamp. This is where NDCs
            come into play.
            </para>
                <para>
            Note that NDCs are managed on a per thread basis. The NDC class
            is made up of static methods that operate on the context of the
            calling thread.
            </para>
            </remarks>
            <example>How to push a message into the context
            <code lang="C#">
            using(NDC.Push("my context message"))
            {
            	... all log calls will have 'my context message' included ...
            
            } // at the end of the using block the message is automatically removed 
            </code></example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.NDC.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.NDC" /> class. 
            </summary>
            <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="P:log4net.NDC.Depth">
            <summary>
            Gets the current context depth.
            </summary>
            <value>The current context depth.</value>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            The number of context values pushed onto the context stack.
            </para>
                <para>
            Used to record the current depth of the context. This can then 
            be restored using the <see cref="M:log4net.NDC.SetMaxDepth(System.Int32)" /> method.
            </para>
            </remarks>
            <seealso cref="M:log4net.NDC.SetMaxDepth(System.Int32)" />
        </member>
        <member name="M:log4net.NDC.Clear">
            <summary>
            Clears all the contextual information held on the current thread.
            </summary>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            Clears the stack of NDC data held on the current thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.CloneStack">
            <summary>
            Creates a clone of the stack of context information.
            </summary>
            <returns>A clone of the context info for this thread.</returns>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            The results of this method can be passed to the <see cref="M:log4net.NDC.Inherit(System.Collections.Stack)" /> 
            method to allow child threads to inherit the context of their 
            parent thread.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.Inherit(System.Collections.Stack)">
            <summary>
            Inherits the contextual information from another thread.
            </summary>
            <param name="stack">The context stack to inherit.</param>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            This thread will use the context information from the stack
            supplied. This can be used to initialize child threads with
            the same contextual information as their parent threads. These
            contexts will <b>NOT</b> be shared. Any further contexts that
            are pushed onto the stack will not be visible to the other.
            Call <see cref="M:log4net.NDC.CloneStack" /> to obtain a stack to pass to
            this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.Pop">
            <summary>
            Removes the top context from the stack.
            </summary>
            <returns>
            The message in the context that was removed from the top 
            of the stack.
            </returns>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            Remove the top context from the stack, and return
            it to the caller. If the stack is empty then an
            empty string (not <c>null</c>) is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.Push(System.String)">
            <summary>
            Pushes a new context message.
            </summary>
            <param name="message">The new context message.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up 
            the context stack.
            </returns>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            Pushes a new context onto the context stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.NDC.Push("NDC_Message"))
            {
            	log.Warn("This should have an NDC message");
            }
            </code></example>
        </member>
        <member name="M:log4net.NDC.PushFormat(System.String,System.Object[])">
            <summary>
            Pushes a new context message.
            </summary>
            <param name="messageFormat">The new context message string format.</param>
            <param name="args">Arguments to be passed into messageFormat.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up 
            the context stack.
            </returns>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            Pushes a new context onto the context stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            var someValue = "ExampleContext"
            using(log4net.NDC.PushFormat("NDC_Message {0}", someValue))
            {
            	log.Warn("This should have an NDC message");
            }
            </code></example>
        </member>
        <member name="M:log4net.NDC.Remove">
            <summary>
            Removes the context information for this thread. It is
            not required to call this method.
            </summary>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            This method is not implemented.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.NDC.SetMaxDepth(System.Int32)">
            <summary>
            Forces the stack depth to be at most <paramref name="maxDepth" />.
            </summary>
            <param name="maxDepth">The maximum depth of the stack</param>
            <remarks>
                <note>
                    <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
                </note>
                <para>
            Forces the stack depth to be at most <paramref name="maxDepth" />.
            This may truncate the head of the stack. This only affects the 
            stack in the current thread. Also it does not prevent it from
            growing, it only sets the maximum depth at the time of the
            call. This can be used to return to a known context depth.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.ObjectRenderer.DefaultRenderer">
            <summary>
            The default object Renderer.
            </summary>
            <remarks>
                <para>
            The default renderer supports rendering objects and collections to strings.
            </para>
                <para>
            See the <see cref="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)" /> method for details of the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Render the object <paramref name="obj" /> to a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="obj">The object to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
                <para>
            Render the object <paramref name="obj" /> to a string.
            </para>
                <para>
            The <paramref name="rendererMap" /> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj" /> contains
            nested objects of unknown type. The <see cref="M:RendererMap.FindAndRender(object)" />
            method can be used to render these objects.
            </para>
                <para>
            The default renderer supports rendering objects to strings as follows:
            </para>
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Rendered String</description>
                    </listheader>
                    <item>
                        <term>
                            <c>null</c>
                        </term>
                        <description>
                            <para>"(null)"</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:System.Array" />
                        </term>
                        <description>
                            <para>
            		For a one dimensional array this is the
            		array type name, an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace. 
            		</para>
                            <para>
            		For example: <c>int[] {1, 2, 3}</c>.
            		</para>
                            <para>
            		If the array is not one dimensional the 
            		<c>Array.ToString()</c> is returned.
            		</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:System.Collections.IEnumerable" />, <see cref="T:System.Collections.ICollection" /> &amp; <see cref="T:System.Collections.IEnumerator" /></term>
                        <description>
                            <para>
            		Rendered as an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace.
            		</para>
                            <para>
            		For example: <c>{a, b, c}</c>.
            		</para>
                            <para>
            		All collection classes that implement <see cref="T:System.Collections.ICollection" /> its subclasses, 
            		or generic equivalents all implement the <see cref="T:System.Collections.IEnumerable" /> interface.
            		</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:System.Collections.DictionaryEntry" />
                        </term>
                        <description>
                            <para>
            		Rendered as the key, an equals sign ('='), and the value (using the appropriate
            		renderer). 
            		</para>
                            <para>
            		For example: <c>key=value</c>.
            		</para>
                        </description>
                    </item>
                    <item>
                        <term>other</term>
                        <description>
                            <para>
                                <c>Object.ToString()</c>
                            </para>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderArray(log4net.ObjectRenderer.RendererMap,System.Array,System.IO.TextWriter)">
            <summary>
            Render the array argument into a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="array">the array to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
                <para>
            For a one dimensional array this is the
            array type name, an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>int[] {1, 2, 3}</c>.
            </para>
                <para>
            If the array is not one dimensional the 
            <c>Array.ToString()</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderEnumerator(log4net.ObjectRenderer.RendererMap,System.Collections.IEnumerator,System.IO.TextWriter)">
            <summary>
            Render the enumerator argument into a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="enumerator">the enumerator to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
                <para>
            Rendered as an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>{a, b, c}</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderDictionaryEntry(log4net.ObjectRenderer.RendererMap,System.Collections.DictionaryEntry,System.IO.TextWriter)">
            <summary>
            Render the DictionaryEntry argument into a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="entry">the DictionaryEntry to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
                <para>
            Render the key, an equals sign ('='), and the value (using the appropriate
            renderer). For example: <c>key=value</c>.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.ObjectRenderer.IObjectRenderer">
            <summary>
            Implement this interface in order to render objects as strings
            </summary>
            <remarks>
                <para>
            Certain types require special case conversion to
            string form. This conversion is done by an object renderer.
            Object renderers implement the <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />
            interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ObjectRenderer.IObjectRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            Render the object <paramref name="obj" /> to a string
            </summary>
            <param name="rendererMap">The map used to lookup renderers</param>
            <param name="obj">The object to render</param>
            <param name="writer">The writer to render to</param>
            <remarks>
                <para>
            Render the object <paramref name="obj" /> to a 
            string.
            </para>
                <para>
            The <paramref name="rendererMap" /> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj" /> contains
            nested objects of unknown type. The <see cref="M:RendererMap.FindAndRender(object, TextWriter)" />
            method can be used to render these objects.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.ObjectRenderer.RendererMap">
            <summary>
            Map class objects to an <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            </summary>
            <remarks>
                <para>
            Maintains a mapping between types that require special
            rendering and the <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> that
            is used to render them.
            </para>
                <para>
            The <see cref="M:FindAndRender(object)" /> method is used to render an
            <c>object</c> using the appropriate renderers defined in this map.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
                <para>
            Default constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
            <summary>
            Render <paramref name="obj" /> using the appropriate renderer.
            </summary>
            <param name="obj">the object to render to a string</param>
            <returns>the object rendered as a string</returns>
            <remarks>
                <para>
            This is a convenience method used to render an object to a string.
            The alternative method <see cref="M:FindAndRender(object,TextWriter)" />
            should be used when streaming output to a <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)">
            <summary>
            Render <paramref name="obj" /> using the appropriate renderer.
            </summary>
            <param name="obj">the object to render to a string</param>
            <param name="writer">The writer to render to</param>
            <remarks>
                <para>
            Find the appropriate renderer for the type of the
            <paramref name="obj" /> parameter. This is accomplished by calling the
            <see cref="M:Get(Type)" /> method. Once a renderer is found, it is
            applied on the object <paramref name="obj" /> and the result is returned
            as a <see cref="T:System.String" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)">
            <summary>
            Gets the renderer for the specified object type
            </summary>
            <param name="obj">the object to lookup the renderer for</param>
            <returns>the renderer for <paramref name="obj" /></returns>
            <remarks>
                <param>
            Gets the renderer for the specified object type.
            </param>
                <param>
            Syntactic sugar method that calls <see cref="M:Get(Type)" /> 
            with the type of the object parameter.
            </param>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)">
            <summary>
            Gets the renderer for the specified type
            </summary>
            <param name="type">the type to lookup the renderer for</param>
            <returns>the renderer for the specified type</returns>
            <remarks>
                <para>
            Returns the renderer for the specified type.
            If no specific renderer has been defined the
            <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer" /> will be returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.SearchTypeAndInterfaces(System.Type)">
            <summary>
            Internal function to recursively search interfaces
            </summary>
            <param name="type">the type to lookup the renderer for</param>
            <returns>the renderer for the specified type</returns>
        </member>
        <member name="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer">
            <summary>
            Get the default renderer instance
            </summary>
            <value>the default renderer</value>
            <remarks>
                <para>
            Get the default renderer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Clear">
            <summary>
            Clear the map of renderers
            </summary>
            <remarks>
                <para>
            Clear the custom renderers defined by using
            <see cref="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)" />. The <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer" />
            cannot be removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Register an <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> for <paramref name="typeToRender" />. 
            </summary>
            <param name="typeToRender">the type that will be rendered by <paramref name="renderer" /></param>
            <param name="renderer">the renderer for <paramref name="typeToRender" /></param>
            <remarks>
                <para>
            Register an object renderer for a specific source type.
            This renderer will be returned from a call to <see cref="M:Get(Type)" />
            specifying the same <paramref name="typeToRender" /> as an argument.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.IPlugin">
            <summary>
            Interface implemented by logger repository plugins.
            </summary>
            <remarks>
                <para>
            Plugins define additional behavior that can be associated
            with a <see cref="T:log4net.Repository.ILoggerRepository" />.
            The <see cref="T:log4net.Plugin.PluginMap" /> held by the <see cref="P:log4net.Repository.ILoggerRepository.PluginMap" />
            property is used to store the plugins for a repository.
            </para>
                <para>
            The <c>log4net.Config.PluginAttribute</c> can be used to
            attach plugins to repositories created using configuration
            attributes.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="P:log4net.Plugin.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>
            The name of the plugin.
            </value>
            <remarks>
                <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap" />
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.IPlugin.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Attaches the plugin to the specified <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
            <remarks>
                <para>
            A plugin may only be attached to a single repository.
            </para>
                <para>
            This method is called when the plugin is attached to the repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.IPlugin.Shutdown">
            <summary>
            Is called when the plugin is to shutdown.
            </summary>
            <remarks>
                <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.IPluginFactory">
            <summary>
            Interface used to create plugins.
            </summary>
            <remarks>
                <para>
            Interface used to create  a plugin.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.IPluginFactory.CreatePlugin">
            <summary>
            Creates the plugin object.
            </summary>
            <returns>the new plugin instance</returns>
            <remarks>
                <para>
            Create and return a new plugin instance.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.PluginCollection">
            <summary>
            A strongly-typed collection of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
            <author>Nicko Cadell</author>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
            <exclude />
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
                <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.ReadOnly(log4net.Plugin.PluginCollection)">
            <summary>
            Creates a read-only wrapper for a <c>PluginCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            A <c>PluginCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>PluginCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection)">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <c>PluginCollection</c>.
            </summary>
            <param name="c">The <c>PluginCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.IPlugin[])">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin" /> array.
            </summary>
            <param name="a">The <see cref="T:log4net.Plugin.IPlugin" /> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin" /> collection.
            </summary>
            <param name="col">The <see cref="T:log4net.Plugin.IPlugin" /> collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
            <exclude />
        </member>
        <member name="F:log4net.Plugin.PluginCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
            <exclude />
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>PluginCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[])">
            <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin" /> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin" /> array to copy to.</param>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[],System.Int32)">
            <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin" /> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin" /> array to copy to.</param>
            <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <returns>false, because the backing type is an array, which is never thread-safe.</returns>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:log4net.Plugin.IPlugin" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:log4net.Plugin.IPlugin" /> at the specified index.
            </value>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero.</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Add(log4net.Plugin.IPlugin)">
            <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the end of the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to be added to the end of the <c>PluginCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Clear">
            <summary>
            Removes all elements from the <c>PluginCollection</c>.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
            <returns>A new <see cref="T:log4net.Plugin.PluginCollection" /> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Contains(log4net.Plugin.IPlugin)">
            <summary>
            Determines whether a given <see cref="T:log4net.Plugin.IPlugin" /> is in the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to check for.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> is found in the <c>PluginCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.IndexOf(log4net.Plugin.IPlugin)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Plugin.IPlugin" />
            in the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to locate in the <c>PluginCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>PluginCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Insert(System.Int32,log4net.Plugin.IPlugin)">
            <summary>
            Inserts an element into the <c>PluginCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Remove(log4net.Plugin.IPlugin)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Plugin.IPlugin" /> from the <c>PluginCollection</c>.
            </summary>
            <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the <c>PluginCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Plugin.IPlugin" /> was not found in the <c>PluginCollection</c>.
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>PluginCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="index" /> is less than zero.</para>
                <para>-or-</para>
                <para>
                    <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
            </exception>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>
                <c>true</c> if the collection has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>
                <c>true</c> if the collection is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>PluginCollection</c>.
            </summary>
            <returns>An <see cref="T:log4net.Plugin.PluginCollection.Enumerator" /> for the entire <c>PluginCollection</c>.</returns>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>PluginCollection</c> can contain.
            </summary>
            <value>
            The number of elements the <c>PluginCollection</c> can contain.
            </value>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.PluginCollection)">
            <summary>
            Adds the elements of another <c>PluginCollection</c> to the current <c>PluginCollection</c>.
            </summary>
            <param name="x">The <c>PluginCollection</c> whose elements should be added to the end of the current <c>PluginCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.IPlugin[])">
            <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin" /> array to the current <c>PluginCollection</c>.
            </summary>
            <param name="x">The <see cref="T:log4net.Plugin.IPlugin" /> array whose elements should be added to the end of the <c>PluginCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin" /> collection to the current <c>PluginCollection</c>.
            </summary>
            <param name="col">The <see cref="T:log4net.Plugin.IPlugin" /> collection whose elements should be added to the end of the <c>PluginCollection</c>.</param>
            <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="i" /> is less than zero.</para>
                <para>-or-</para>
                <para>
                    <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="i" /> is less than zero.</para>
                <para>-or-</para>
                <para>
                    <paramref name="i" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
            </exception>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
            <exclude />
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Enumerator.#ctor(log4net.Plugin.PluginCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="P:log4net.Plugin.PluginCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
                <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:log4net.Plugin.PluginCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="T:log4net.Plugin.PluginCollection.ReadOnlyPluginCollection">
            <exclude />
        </member>
        <member name="T:log4net.Plugin.PluginMap">
            <summary>
            Map of repository plugins.
            </summary>
            <remarks>
                <para>
            This class is a name keyed map of the plugins that are
            attached to a repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.PluginMap.#ctor(log4net.Repository.ILoggerRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">The repository that the plugins should be attached to.</param>
            <remarks>
                <para>
            Initialize a new instance of the <see cref="T:log4net.Plugin.PluginMap" /> class with a 
            repository that the plugins should be attached to.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginMap.Item(System.String)">
            <summary>
            Gets a <see cref="T:log4net.Plugin.IPlugin" /> by name.
            </summary>
            <param name="name">The name of the <see cref="T:log4net.Plugin.IPlugin" /> to lookup.</param>
            <returns>
            The <see cref="T:log4net.Plugin.IPlugin" /> from the map with the name specified, or 
            <c>null</c> if no plugin is found.
            </returns>
            <remarks>
                <para>
            Lookup a plugin by name. If the plugin is not found <c>null</c>
            will be returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginMap.AllPlugins">
            <summary>
            Gets all possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
            <value>All possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.</value>
            <remarks>
                <para>
            Get a collection of all the plugins defined in this map.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginMap.Add(log4net.Plugin.IPlugin)">
            <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the map.
            </summary>
            <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to add to the map.</param>
            <remarks>
                <para>
            The <see cref="T:log4net.Plugin.IPlugin" /> will be attached to the repository when added.
            </para>
                <para>
            If there already exists a plugin with the same name 
            attached to the repository then the old plugin will
            be <see cref="M:log4net.Plugin.IPlugin.Shutdown" /> and replaced with
            the new plugin.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginMap.Remove(log4net.Plugin.IPlugin)">
            <summary>
            Removes a <see cref="T:log4net.Plugin.IPlugin" /> from the map.
            </summary>
            <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the map.</param>
            <remarks>
                <para>
            Remove a specific plugin from this map.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Plugin.PluginSkeleton">
            <summary>
            Base implementation of <see cref="T:log4net.Plugin.IPlugin" /></summary>
            <remarks>
                <para>
            Default abstract implementation of the <see cref="T:log4net.Plugin.IPlugin" />
            interface. This base class can be used by implementors
            of the <see cref="T:log4net.Plugin.IPlugin" /> interface.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.PluginSkeleton.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">the name of the plugin</param>
            <remarks>
            Initializes a new Plugin with the specified name.
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginSkeleton.Name">
            <summary>
            Gets or sets the name of the plugin.
            </summary>
            <value>
            The name of the plugin.
            </value>
            <remarks>
                <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap" />
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
                <para>
            The name of the plugin must not change one the 
            plugin has been attached to a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginSkeleton.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
            <remarks>
                <para>
            A plugin may only be attached to a single repository.
            </para>
                <para>
            This method is called when the plugin is attached to the repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.PluginSkeleton.Shutdown">
            <summary>
            Is called when the plugin is to shutdown.
            </summary>
            <remarks>
                <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.PluginSkeleton.LoggerRepository">
            <summary>
            The repository for this plugin
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is attached to.
            </value>
            <remarks>
                <para>
            Gets or sets the <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is 
            attached to.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Plugin.PluginSkeleton.m_name">
            <summary>
            The name of this plugin.
            </summary>
        </member>
        <member name="F:log4net.Plugin.PluginSkeleton.m_repository">
            <summary>
            The repository this plugin is attached to.
            </summary>
        </member>
        <member name="T:log4net.Plugin.RemoteLoggingServerPlugin">
            <summary>
            Plugin that listens for events from the <see cref="T:log4net.Appender.RemotingAppender" /></summary>
            <remarks>
                <para>
            This plugin publishes an instance of <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" /> 
            on a specified <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" />. This listens for logging events delivered from
            a remote <see cref="T:log4net.Appender.RemotingAppender" />.
            </para>
                <para>
            When an event is received it is relogged within the attached repository
            as if it had been raised locally.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class.
            </para>
                <para>
            The <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" /> property must be set.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor(System.String)">
            <summary>
            Construct with sink Uri.
            </summary>
            <param name="sinkUri">The name to publish the sink under in the remoting infrastructure. 
            See <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" /> for more details.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class
            with specified name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri">
            <summary>
            Gets or sets the URI of this sink.
            </summary>
            <value>
            The URI of this sink.
            </value>
            <remarks>
                <para>
            This is the name under which the object is marshaled.
            <see cref="M:RemotingServices.Marshal(MarshalByRefObject,String,Type)" /></para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Attach(log4net.Repository.ILoggerRepository)">
            <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
            <remarks>
                <para>
            A plugin may only be attached to a single repository.
            </para>
                <para>
            This method is called when the plugin is attached to the repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Shutdown">
            <summary>
            Is called when the plugin is to shutdown.
            </summary>
            <remarks>
                <para>
            When the plugin is shutdown the remote logging
            sink is disconnected.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Plugin.RemoteLoggingServerPlugin.declaringType">
            <summary>
            The fully qualified type of the RemoteLoggingServerPlugin class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl">
            <summary>
            Delivers <see cref="T:log4net.Core.LoggingEvent" /> objects to a remote sink.
            </summary>
            <remarks>
                <para>
            Internal class used to listen for logging events
            and deliver them to the local repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.#ctor(log4net.Repository.ILoggerRepository)">
            <summary>
            Constructor
            </summary>
            <param name="repository">The repository to log to.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl" /> for the
            specified <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.LogEvents(log4net.Core.LoggingEvent[])">
            <summary>
            Logs the events to the repository.
            </summary>
            <param name="events">The events to log.</param>
            <remarks>
                <para>
            The events passed are logged to the <see cref="T:log4net.Repository.ILoggerRepository" /></para>
            </remarks>
        </member>
        <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance.
            </summary>
            <returns>
                <c>null</c> to indicate that this instance should live forever.</returns>
            <remarks>
                <para>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance. This object should live forever
            therefore this implementation returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.m_repository">
            <summary>
            The underlying <see cref="T:log4net.Repository.ILoggerRepository" /> that events should
            be logged to.
            </summary>
        </member>
        <member name="T:log4net.Repository.ConfigurationChangedEventArgs">
            <summary></summary>
        </member>
        <member name="M:log4net.Repository.ConfigurationChangedEventArgs.#ctor(System.Collections.ICollection)">
            <summary></summary>
            <param name="configurationMessages"></param>
        </member>
        <member name="P:log4net.Repository.ConfigurationChangedEventArgs.ConfigurationMessages">
            <summary></summary>
        </member>
        <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory">
            <summary>
            Default implementation of <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></summary>
            <remarks>
                <para>
            This default implementation of the <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />
            interface is used to create the default subclass
            of the <see cref="T:log4net.Repository.Hierarchy.Logger" /> object.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> class. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)">
            <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that will own the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
            <remarks>
                <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
                <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances.
            </para>
                <para>
            If the <paramref name="name" /> is <c>null</c> then the root logger
            must be returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl">
            <summary>
            Default internal subclass of <see cref="T:log4net.Repository.Hierarchy.Logger" /></summary>
            <remarks>
                <para>
            This subclass has no additional behavior over the
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> class but does allow instances
            to be created.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl.#ctor(System.String)">
            <summary>
            Construct a new Logger
            </summary>
            <param name="name">the name of the logger</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl" /> class
            with the specified name. 
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventHandler">
            <summary>
            Delegate used to handle logger creation event notifications.
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> in which the <see cref="T:log4net.Repository.Hierarchy.Logger" /> has been created.</param>
            <param name="e">The <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event args that hold the <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance that has been created.</param>
            <remarks>
                <para>
            Delegate used to handle logger creation event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs">
            <summary>
            Provides data for the <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent" /> event.
            </summary>
            <remarks>
                <para>
            A <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent" /> event is raised every time a
            <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> is created.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.LoggerCreationEventArgs.m_log">
            <summary>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> created
            </summary>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerCreationEventArgs.#ctor(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Constructor
            </summary>
            <param name="log">The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event argument 
            class,with the specified <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger">
            <summary>
            Gets the <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </summary>
            <value>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </value>
            <remarks>
                <para>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.Hierarchy">
            <summary>
            Hierarchical organization of loggers
            </summary>
            <remarks>
                <para>
                    <i>The casual user should not have to deal with this class
            directly.</i>
                </para>
                <para>
            This class is specialized in retrieving loggers by name and
            also maintaining the logger hierarchy. Implements the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            </para>
                <para>
            The structure of the logger hierarchy is maintained by the
            <see cref="M:GetLogger(string)" /> method. The hierarchy is such that children
            link to their parent but parents do not have any references to their
            children. Moreover, loggers can be instantiated in any order, in
            particular descendant before ancestor.
            </para>
                <para>
            In case a descendant is created before a particular ancestor,
            then it creates a provision node for the ancestor and adds itself
            to the provision node. Other descendants of the same ancestor add
            themselves to the previously created provision node.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent">
            <summary>
            Event used to notify that a logger has been created.
            </summary>
            <remarks>
                <para>
            Event raised when a logger is created.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary)">
            <summary>
            Construct with properties
            </summary>
            <param name="properties">The properties to pass to this repository.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            Construct with a logger factory
            </summary>
            <param name="loggerFactory">The factory to use to create new logger instances.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary,log4net.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            Construct with properties and a logger factory
            </summary>
            <param name="properties">The properties to pass to this repository.</param>
            <param name="loggerFactory">The factory to use to create new logger instances.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.EmittedNoAppenderWarning">
            <summary>
            Has no appender warning been emitted
            </summary>
            <remarks>
                <para>
            Flag to indicate if we have already issued a warning
            about not having an appender warning.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.Root">
            <summary>
            Get the root of this hierarchy
            </summary>
            <remarks>
                <para>
            Get the root of this hierarchy.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LoggerFactory">
            <summary>
            Gets or sets the default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> instance.
            </summary>
            <value>The default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></value>
            <remarks>
                <para>
            The logger factory is used to create logger instances.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Exists(System.String)">
            <summary>
            Test if a logger exists
            </summary>
            <param name="name">The name of the logger to lookup</param>
            <returns>The Logger object with the name specified</returns>
            <remarks>
                <para>
            Check if the named logger exists in the hierarchy. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the hierarchy as an Array
            </summary>
            <returns>All the defined loggers</returns>
            <remarks>
                <para>
            Returns all the currently defined loggers in the hierarchy as an Array.
            The root logger is <b>not</b> included in the returned
            enumeration.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String)">
            <summary>
            Return a new logger instance named as the first parameter using
            the default factory.
            </summary>
            <remarks>
                <para>
            Return a new logger instance named as the first parameter using
            the default factory.
            </para>
                <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
            </remarks>
            <param name="name">The name of the logger to retrieve</param>
            <returns>The logger object with the name specified</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Shutdown">
            <summary>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </summary>
            <remarks>
                <para>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
                <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
                <para>
            The <c>Shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.ResetConfiguration">
            <summary>
            Reset all values contained in this hierarchy instance to their default.
            </summary>
            <remarks>
                <para>
            Reset all values contained in this hierarchy instance to their
            default.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
                <para>
            Existing loggers are not removed. They are just reset.
            </para>
                <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Log(log4net.Core.LoggingEvent)">
            <summary>
            Log the logEvent through this hierarchy.
            </summary>
            <param name="logEvent">the event to log</param>
            <remarks>
                <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)" /> method.
            </para>
                <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetAppenders">
            <summary>
            Returns all the Appenders that are currently configured
            </summary>
            <returns>An array containing all the currently configured appenders</returns>
            <remarks>
                <para>
            Returns all the <see cref="T:log4net.Appender.IAppender" /> instances that are currently configured.
            All the loggers are searched for appenders. The appenders may also be containers
            for appenders and these are also searched for additional loggers.
            </para>
                <para>
            The list returned is unordered but does not contain duplicates.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppender(System.Collections.ArrayList,log4net.Appender.IAppender)">
            <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable" />.
            The appender may also be a container.
            </summary>
            <param name="appenderList"></param>
            <param name="appender"></param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppenders(System.Collections.ArrayList,log4net.Core.IAppenderAttachable)">
            <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable" /> container
            </summary>
            <param name="appenderList"></param>
            <param name="container"></param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.log4net#Repository#IBasicRepositoryConfigurator#Configure(log4net.Appender.IAppender)">
            <summary>
            Initialize the log4net system using the specified appender
            </summary>
            <param name="appender">the appender to use to log all logging events</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.log4net#Repository#IBasicRepositoryConfigurator#Configure(log4net.Appender.IAppender[])">
            <summary>
            Initialize the log4net system using the specified appenders
            </summary>
            <param name="appenders">the appenders to use to log all logging events</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.BasicRepositoryConfigure(log4net.Appender.IAppender[])">
            <summary>
            Initialize the log4net system using the specified appenders
            </summary>
            <param name="appenders">the appenders to use to log all logging events</param>
            <remarks>
                <para>
            This method provides the same functionality as the 
            <see cref="M:IBasicRepositoryConfigurator.Configure(IAppender)" /> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.log4net#Repository#IXmlRepositoryConfigurator#Configure(System.Xml.XmlElement)">
            <summary>
            Initialize the log4net system using the specified config
            </summary>
            <param name="element">the element containing the root of the config</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.XmlRepositoryConfigure(System.Xml.XmlElement)">
            <summary>
            Initialize the log4net system using the specified config
            </summary>
            <param name="element">the element containing the root of the config</param>
            <remarks>
                <para>
            This method provides the same functionality as the 
            <see cref="M:IBasicRepositoryConfigurator.Configure(IAppender)" /> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.IsDisabled(log4net.Core.Level)">
            <summary>
            Test if this hierarchy is disabled for the specified <see cref="T:log4net.Core.Level" />.
            </summary>
            <param name="level">The level to check against.</param>
            <returns>
                <c>true</c> if the repository is disabled for the level argument, <c>false</c> otherwise.
            </returns>
            <remarks>
                <para>
            If this hierarchy has not been configured then this method will
            always return <c>true</c>.
            </para>
                <para>
            This method will return <c>true</c> if this repository is
            disabled for <c>level</c> object passed as parameter and
            <c>false</c> otherwise.
            </para>
                <para>
            See also the <see cref="P:log4net.Repository.ILoggerRepository.Threshold" /> property.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.Clear">
            <summary>
            Clear all logger definitions from the internal hashtable
            </summary>
            <remarks>
                <para>
            This call will clear all logger definitions from the internal
            hashtable. Invoking this method will irrevocably mess up the
            logger hierarchy.
            </para>
                <para>
            You should <b>really</b> know what you are doing before
            invoking this method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String,log4net.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            Return a new logger instance named as the first parameter using
            <paramref name="factory" />.
            </summary>
            <param name="name">The name of the logger to retrieve</param>
            <param name="factory">The factory that will make the new logger instance</param>
            <returns>The logger object with the name specified</returns>
            <remarks>
                <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated by the
            <paramref name="factory" /> parameter and linked with its existing
            ancestors as well as children.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.OnLoggerCreationEvent(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Sends a logger creation event to all registered listeners
            </summary>
            <param name="logger">The newly created logger</param>
            <remarks>
            Raises the logger creation event.
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateParents(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Updates all the parents of the specified logger
            </summary>
            <param name="log">The logger to update the parents for</param>
            <remarks>
                <para>
            This method loops through all the <i>potential</i> parents of
            <paramref name="log" />. There 3 possible cases:
            </para>
                <list type="number">
                    <item>
                        <term>No entry for the potential parent of <paramref name="log" /> exists</term>
                        <description>
            		We create a ProvisionNode for this potential 
            		parent and insert <paramref name="log" /> in that provision node.
            		</description>
                    </item>
                    <item>
                        <term>The entry is of type Logger for the potential parent.</term>
                        <description>
            		The entry is <paramref name="log" />'s nearest existing parent. We 
            		update <paramref name="log" />'s parent field with this entry. We also break from 
            		he loop because updating our parent's parent is our parent's 
            		responsibility.
            		</description>
                    </item>
                    <item>
                        <term>The entry is of type ProvisionNode for this potential parent.</term>
                        <description>
            		We add <paramref name="log" /> to the list of children for this 
            		potential parent.
            		</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateChildren(log4net.Repository.Hierarchy.ProvisionNode,log4net.Repository.Hierarchy.Logger)">
            <summary>
            Replace a <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> with a <see cref="T:log4net.Repository.Hierarchy.Logger" /> in the hierarchy.
            </summary>
            <param name="pn"></param>
            <param name="log"></param>
            <remarks>
                <para>
            We update the links for all the children that placed themselves
            in the provision node 'pn'. The second argument 'log' is a
            reference for the newly created Logger, parent of all the
            children in 'pn'.
            </para>
                <para>
            We loop on all the children 'c' in 'pn'.
            </para>
                <para>
            If the child 'c' has been already linked to a child of
            'log' then there is no need to update 'c'.
            </para>
                <para>
            Otherwise, we set log's parent field to c's parent and set
            c's parent field to log.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddLevel(log4net.Repository.Hierarchy.Hierarchy.LevelEntry)">
            <summary>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </summary>
            <param name="levelEntry">the level values</param>
            <remarks>
                <para>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </para>
                <para>
            Supports setting levels via the configuration file.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry">
            <summary>
            A class to hold the value, name and display name for a level
            </summary>
            <remarks>
                <para>
            A class to hold the value, name and display name for a level
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Value">
            <summary>
            Value of the level
            </summary>
            <remarks>
                <para>
            If the value is not set (defaults to -1) the value will be looked
            up for the current level with the same name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Name">
            <summary>
            Name of the level
            </summary>
            <value>
            The name of the level
            </value>
            <remarks>
                <para>
            The name of the level.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.DisplayName">
            <summary>
            Display name for the level
            </summary>
            <value>
            The display name of the level
            </value>
            <remarks>
                <para>
            The display name of the level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.ToString">
            <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
            <returns>string info about this object</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddProperty(log4net.Util.PropertyEntry)">
            <summary>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </summary>
            <param name="propertyEntry">the property value</param>
            <remarks>
                <para>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument.
            </para>
                <para>
            Supports setting property values via the configuration file.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Hierarchy.declaringType">
            <summary>
            The fully qualified type of the Hierarchy class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.ILoggerFactory">
            <summary>
            Interface abstracts creation of <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances
            </summary>
            <remarks>
                <para>
            This interface is used by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to 
            create new <see cref="T:log4net.Repository.Hierarchy.Logger" /> objects.
            </para>
                <para>
            The <see cref="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)" /> method is called
            to create a named <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
                <para>
            Implement this interface to create new subclasses of <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(log4net.Repository.ILoggerRepository,System.String)">
            <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
            <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that will own the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
            <remarks>
                <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
                <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances.
            </para>
                <para>
            If the <paramref name="name" /> is <c>null</c> then the root logger
            must be returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.Logger">
            <summary>
            Implementation of <see cref="T:log4net.Core.ILogger" /> used by <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /></summary>
            <remarks>
                <para>
            Internal class used to provide implementation of <see cref="T:log4net.Core.ILogger" />
            interface. Applications should use <see cref="T:log4net.LogManager" /> to get
            logger instances.
            </para>
                <para>
            This is one of the central classes in the log4net implementation. One of the
            distinctive features of log4net are hierarchical loggers and their
            evaluation. The <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /> organizes the <see cref="T:log4net.Repository.Hierarchy.Logger" />
            instances into a rooted tree hierarchy.
            </para>
                <para>
            The <see cref="T:log4net.Repository.Hierarchy.Logger" /> class is abstract. Only concrete subclasses of
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> can be created. The <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />
            is used to create instances of this type for the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Aspi Havewala</author>
            <author>Douglas de la Torre</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.#ctor(System.String)">
            <summary>
            This constructor created a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance and
            sets its name.
            </summary>
            <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
            <remarks>
                <para>
            This constructor is protected and designed to be used by
            a subclass that is not abstract.
            </para>
                <para>
            Loggers are constructed by <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> 
            objects. See <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> for the default
            logger creator.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Parent">
            <summary>
            Gets or sets the parent logger in the hierarchy.
            </summary>
            <value>
            The parent logger in the hierarchy.
            </value>
            <remarks>
                <para>
            Part of the Composite pattern that makes the hierarchy.
            The hierarchy is parent linked rather than child linked.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Additivity">
            <summary>
            Gets or sets a value indicating if child loggers inherit their parent's appenders.
            </summary>
            <value>
                <c>true</c> if child loggers inherit their parent's appenders.
            </value>
            <remarks>
                <para>
            Additivity is set to <c>true</c> by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.EffectiveLevel">
            <summary>
            Gets the effective level for this logger.
            </summary>
            <returns>The nearest level in the logger hierarchy.</returns>
            <remarks>
                <para>
            Starting from this logger, searches the logger hierarchy for a
            non-null level and returns it. Otherwise, returns the level of the
            root logger.
            </para>
                <para>The Logger class is designed so that this method executes as
            quickly as possible.</para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Hierarchy">
            <summary>
            Gets or sets the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
            <value>The hierarchy that this logger belongs to.</value>
            <remarks>
                <para>
            This logger must be attached to a single <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Level">
            <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level" />, if any, for this Logger.  
            </summary>
            <value>
            The <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> of this logger.
            </value>
            <remarks>
                <para>
            The assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> can be <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Add <paramref name="newAppender" /> to the list of appenders of this
            Logger instance.
            </summary>
            <param name="newAppender">An appender to add to this logger</param>
            <remarks>
                <para>
            Add <paramref name="newAppender" /> to the list of appenders of this
            Logger instance.
            </para>
                <para>
            If <paramref name="newAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Appenders">
            <summary>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>A collection of the appenders in this logger</returns>
            <remarks>
                <para>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection" />. If no appenders 
            can be found, then a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.GetAppender(System.String)">
            <summary>
            Look for the appender named as <c>name</c></summary>
            <param name="name">The name of the appender to lookup</param>
            <returns>The appender with the name specified, or <c>null</c>.</returns>
            <remarks>
                <para>
            Returns the named appender, or null if the appender is not found.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAllAppenders">
            <summary>
            Remove all previously added appenders from this Logger instance.
            </summary>
            <remarks>
                <para>
            Remove all previously added appenders from this Logger instance.
            </para>
                <para>
            This is useful when re-reading configuration information.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="appender">The appender to remove</param>
            <returns>The appender removed from the list</returns>
            <remarks>
                <para>
            Remove the appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(System.String)">
            <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove</param>
            <returns>The appender removed from the list</returns>
            <remarks>
                <para>
            Remove the named appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Name">
            <summary>
            Gets the logger name.
            </summary>
            <value>
            The name of the logger.
            </value>
            <remarks>
                <para>
            The name of this logger
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            This generic form is intended to be used by wrappers.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Generate a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" /> and <paramref name="exception" />.
            </para>
                <para>
            This method must not throw any exception to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.LoggingEvent)">
            <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
                <para>
            Logs the specified logging event through this logger.
            </para>
                <para>
            This method must not throw any exception to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.IsEnabledFor(log4net.Core.Level)">
            <summary>
            Checks if this logger is enabled for a given <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> passed as parameter.
            </summary>
            <param name="level">The level to check.</param>
            <returns>
                <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
            Test if this logger is going to log events of the specified <paramref name="level" />.
            </para>
                <para>
            This method must not throw any exception to the caller.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.Logger.Repository">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
            <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
            <remarks>
                <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)">
            <summary>
            Deliver the <see cref="T:log4net.Core.LoggingEvent" /> to the attached appenders.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
                <para>
            Call the appenders in the hierarchy starting at
            <c>this</c>. If no appenders could be found, emit a
            warning.
            </para>
                <para>
            This method calls all the appenders inherited from the
            hierarchy circumventing any evaluation of whether to log or not
            to log the particular log request.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.CloseNestedAppenders">
            <summary>
            Closes all attached appenders implementing the <see cref="T:log4net.Core.IAppenderAttachable" /> interface.
            </summary>
            <remarks>
                <para>
            Used to ensure that the appenders are correctly shutdown.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            This is the most generic printing method. This generic form is intended to be used by wrappers
            </summary>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Generate a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(System.Type,log4net.Core.Level,System.Object,System.Exception)">
            <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
            <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
            <param name="level">The level of the message to be logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            Generates a logging event and delivers it to the attached
            appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(log4net.Core.LoggingEvent)">
            <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
                <para>
            Delivers the logging event to the attached appenders.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.declaringType">
            <summary>
            The fully qualified type of the Logger class.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_name">
            <summary>
            The name of this logger.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_level">
            <summary>
            The assigned level of this logger. 
            </summary>
            <remarks>
                <para>
            The <c>level</c> variable need not be 
            assigned a value in which case it is inherited 
            form the hierarchy.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_parent">
            <summary>
            The parent of this logger.
            </summary>
            <remarks>
                <para>
            The parent of this logger. 
            All loggers have at least one ancestor which is the root logger.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_hierarchy">
            <summary>
            Loggers need to know what Hierarchy they are in.
            </summary>
            <remarks>
                <para>
            Loggers need to know what Hierarchy they are in.
            The hierarchy that this logger is a member of is stored
            here.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderAttachedImpl">
            <summary>
            Helper implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_additive">
            <summary>
            Flag indicating if child loggers inherit their parents appenders
            </summary>
            <remarks>
                <para>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderLock">
            <summary>
            Lock to protect AppenderAttachedImpl variable m_appenderAttachedImpl
            </summary>
        </member>
        <member name="T:log4net.Repository.Hierarchy.LoggerKey">
            <summary>
            Used internally to accelerate hash table searches.
            </summary>
            <remarks>
                <para>
            Internal class used to improve performance of 
            string keyed hashtables.
            </para>
                <para>
            The hashcode of the string is cached for reuse.
            The string is stored as an interned value.
            When comparing two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> objects for equality 
            the reference equality of the interned strings is compared.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerKey.#ctor(System.String)">
            <summary>
            Construct key with string name
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> class 
            with the specified name.
            </para>
                <para>
            Stores the hashcode of the string and interns
            the string key to optimize comparisons.
            </para>
                <note>
            The Compact Framework 1.0 the <see cref="M:System.String.Intern(System.String)" />
            method does not work. On the Compact Framework
            the string keys are not interned nor are they
            compared by reference.
            </note>
            </remarks>
            <param name="name">The name of the logger.</param>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerKey.GetHashCode">
            <summary>
            Returns a hash code for the current instance.
            </summary>
            <returns>A hash code for the current instance.</returns>
            <remarks>
                <para>
            Returns the cached hashcode.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.LoggerKey.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> instances 
            are equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />; otherwise, <c>false</c>.
            </returns>
            <remarks>
                <para>
            Compares the references of the interned strings.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.ProvisionNode">
            <summary>
            Provision nodes are used where no logger instance has been specified
            </summary>
            <remarks>
                <para>
                    <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> instances are used in the 
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> when there is no specified 
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> for that node.
            </para>
                <para>
            A provision node holds a list of child loggers on behalf of
            a logger that does not exist.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.ProvisionNode.#ctor(log4net.Repository.Hierarchy.Logger)">
            <summary>
            Create a new provision node with child node
            </summary>
            <param name="log">A child logger to add to this node.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> class 
            with the specified child logger.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.RootLogger">
            <summary>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> sits at the root of the logger hierarchy tree. 
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> is a regular <see cref="T:log4net.Repository.Hierarchy.Logger" /> except 
            that it provides several guarantees.
            </para>
                <para>
            First, it cannot be assigned a <c>null</c>
            level. Second, since the root logger cannot have a parent, the
            <see cref="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel" /> property always returns the value of the
            level field without walking the hierarchy.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.RootLogger.#ctor(log4net.Core.Level)">
            <summary>
            Construct a <see cref="T:log4net.Repository.Hierarchy.RootLogger" /></summary>
            <param name="level">The level to assign to the root logger.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> class with
            the specified logging level.
            </para>
                <para>
            The root logger names itself as "root". However, the root
            logger cannot be retrieved by name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel">
            <summary>
            Gets the assigned level value without walking the logger hierarchy.
            </summary>
            <value>The assigned level value without walking the logger hierarchy.</value>
            <remarks>
                <para>
            Because the root logger cannot have a parent and its level
            must not be <c>null</c> this property just returns the
            value of <see cref="P:log4net.Repository.Hierarchy.Logger.Level" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.Hierarchy.RootLogger.Level">
            <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level" /> for the root logger.  
            </summary>
            <value>
            The <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level" /> of the root logger.
            </value>
            <remarks>
                <para>
            Setting the level of the root logger to a <c>null</c> reference
            may have catastrophic results. We prevent this here.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.RootLogger.declaringType">
            <summary>
            The fully qualified type of the RootLogger class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator">
            <summary>
            Initializes the log4net environment using an XML DOM.
            </summary>
            <remarks>
                <para>
            Configures a <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> using an XML DOM.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.#ctor(log4net.Repository.Hierarchy.Hierarchy)">
            <summary>
            Construct the configurator for a hierarchy
            </summary>
            <param name="hierarchy">The hierarchy to build.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator" /> class
            with the specified <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </summary>
            <param name="element">The root element to parse.</param>
            <remarks>
                <para>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
            <summary>
            Parse appenders by IDREF.
            </summary>
            <param name="appenderRef">The appender ref element.</param>
            <returns>The instance of the appender that the ref refers to.</returns>
            <remarks>
                <para>
            Parse an XML element that represents an appender and return 
            the appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement)">
            <summary>
            Parses an appender element.
            </summary>
            <param name="appenderElement">The appender element.</param>
            <returns>The appender instance or <c>null</c> when parsing failed.</returns>
            <remarks>
                <para>
            Parse an XML element that represents an appender and return
            the appender instance.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLogger(System.Xml.XmlElement)">
            <summary>
            Parses a logger element.
            </summary>
            <param name="loggerElement">The logger element.</param>
            <remarks>
                <para>
            Parse an XML element that represents a logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRoot(System.Xml.XmlElement)">
            <summary>
            Parses the root logger element.
            </summary>
            <param name="rootElement">The root element.</param>
            <remarks>
                <para>
            Parse an XML element that represents the root logger.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseChildrenOfLoggerElement(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
            <summary>
            Parses the children of a logger element.
            </summary>
            <param name="catElement">The category element.</param>
            <param name="log">The logger instance.</param>
            <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
            <remarks>
                <para>
            Parse the child elements of a &lt;logger&gt; element.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRenderer(System.Xml.XmlElement)">
            <summary>
            Parses an object renderer.
            </summary>
            <param name="element">The renderer element.</param>
            <remarks>
                <para>
            Parse an XML element that represents a renderer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLevel(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
            <summary>
            Parses a level element.
            </summary>
            <param name="element">The level element.</param>
            <param name="log">The logger object to set the level on.</param>
            <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
            <remarks>
                <para>
            Parse an XML element that represents a level.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
            <summary>
            Sets a parameter on an object.
            </summary>
            <param name="element">The parameter element.</param>
            <param name="target">The object to set the parameter on.</param>
            <remarks>
            The parameter name must correspond to a writable property
            on the object. The value of the parameter is a string,
            therefore this function will attempt to set a string
            property first. If unable to set a string property it
            will inspect the property and its argument type. It will
            attempt to call a static method called <c>Parse</c> on the
            type of the property. This method will take a single
            string argument and return a value that can be used to
            set the property.
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.HasAttributesOrElements(System.Xml.XmlElement)">
            <summary>
            Test if an element has no attributes or child elements
            </summary>
            <param name="element">the element to inspect</param>
            <returns>
                <c>true</c> if the element has any attributes or child elements, <c>false</c> otherwise</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.IsTypeConstructible(System.Type)">
            <summary>
            Test if a <see cref="T:System.Type" /> is constructible with <c>Activator.CreateInstance</c>.
            </summary>
            <param name="type">the type to inspect</param>
            <returns>
                <c>true</c> if the type is creatable using a default constructor, <c>false</c> otherwise</returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindMethodInfo(System.Type,System.String)">
            <summary>
            Look for a method on the <paramref name="targetType" /> that matches the <paramref name="name" /> supplied
            </summary>
            <param name="targetType">the type that has the method</param>
            <param name="name">the name of the method</param>
            <returns>the method info found</returns>
            <remarks>
                <para>
            The method must be a public instance method on the <paramref name="targetType" />.
            The method must be named <paramref name="name" /> or "Add" followed by <paramref name="name" />.
            The method must take a single parameter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ConvertStringTo(System.Type,System.String)">
            <summary>
            Converts a string value to a target type.
            </summary>
            <param name="type">The type of object to convert the string to.</param>
            <param name="value">The string value to use as the value of the object.</param>
            <returns>
                <para>
            An object of type <paramref name="type" /> with value <paramref name="value" /> or 
            <c>null</c> when the conversion could not be performed.
            </para>
            </returns>
        </member>
        <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(System.Xml.XmlElement,System.Type,System.Type)">
            <summary>
            Creates an object as specified in XML.
            </summary>
            <param name="element">The XML element that contains the definition of the object.</param>
            <param name="defaultTargetType">The object type to use if not explicitly specified.</param>
            <param name="typeConstraint">The type that the returned object must be or must inherit from.</param>
            <returns>The object or <c>null</c></returns>
            <remarks>
                <para>
            Parse an XML element and create an object instance based on the configuration
            data.
            </para>
                <para>
            The type of the instance may be specified in the XML. If not
            specified then the <paramref name="defaultTargetType" /> is used
            as the type. However the type is specified it must support the
            <paramref name="typeConstraint" /> type.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_appenderBag">
            <summary>
            key: appenderName, value: appender.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_hierarchy">
            <summary>
            The Hierarchy being configured.
            </summary>
        </member>
        <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.declaringType">
            <summary>
            The fully qualified type of the XmlHierarchyConfigurator class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Repository.IBasicRepositoryConfigurator">
            <summary>
            Basic Configurator interface for repositories
            </summary>
            <remarks>
                <para>
            Interface used by basic configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository" />
            with a default <see cref="T:log4net.Appender.IAppender" />.
            </para>
                <para>
            A <see cref="T:log4net.Repository.ILoggerRepository" /> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.BasicConfigurator" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)">
            <summary>
            Initialize the repository using the specified appender
            </summary>
            <param name="appender">the appender to use to log all logging events</param>
            <remarks>
                <para>
            Configure the repository to route all logging events to the
            specified appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender[])">
            <summary>
            Initialize the repository using the specified appenders
            </summary>
            <param name="appenders">the appenders to use to log all logging events</param>
            <remarks>
                <para>
            Configure the repository to route all logging events to the
            specified appenders.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositoryShutdownEventHandler">
            <summary>
            Delegate used to handle logger repository shutdown event notifications
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that is shutting down.</param>
            <param name="e">Empty event args</param>
            <remarks>
                <para>
            Delegate used to handle logger repository shutdown event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositoryConfigurationResetEventHandler">
            <summary>
            Delegate used to handle logger repository configuration reset event notifications
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that has had its configuration reset.</param>
            <param name="e">Empty event args</param>
            <remarks>
                <para>
            Delegate used to handle logger repository configuration reset event notifications.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler">
            <summary>
            Delegate used to handle event notifications for logger repository configuration changes.
            </summary>
            <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that has had its configuration changed.</param>
            <param name="e">Empty event arguments.</param>
            <remarks>
                <para>
            Delegate used to handle event notifications for logger repository configuration changes.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.ILoggerRepository">
            <summary>
            Interface implemented by logger repositories.
            </summary>
            <remarks>
                <para>
            This interface is implemented by logger repositories. e.g. 
            <see cref="N:log4net.Repository.Hierarchy" />.
            </para>
                <para>
            This interface is used by the <see cref="T:log4net.LogManager" />
            to obtain <see cref="T:log4net.ILog" /> interfaces.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Name">
            <summary>
            The name of the repository
            </summary>
            <value>
            The name of the repository
            </value>
            <remarks>
                <para>
            The name of the repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.RendererMap">
            <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
            <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
            <remarks>
                <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
                <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> objects.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.PluginMap">
            <summary>
            The plugin map for this repository.
            </summary>
            <value>
            The plugin map for this repository.
            </value>
            <remarks>
                <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin" /> instances
            that have been attached to this repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.LevelMap">
            <summary>
            Get the level map for the Repository.
            </summary>
            <remarks>
                <para>
            Get the level map for the Repository.
            </para>
                <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level" /> objects in
            this repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Threshold">
            <summary>
            The threshold for all events in this repository
            </summary>
            <value>
            The threshold for all events in this repository
            </value>
            <remarks>
                <para>
            The threshold for all events in this repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.Exists(System.String)">
            <summary>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </summary>
            <param name="name">The name of the logger to lookup</param>
            <returns>The Logger object with the name specified</returns>
            <remarks>
                <para>
            If the names logger exists it is returned, otherwise
            <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers as an Array.
            </summary>
            <returns>All the defined loggers</returns>
            <remarks>
                <para>
            Returns all the currently defined loggers as an Array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.GetLogger(System.String)">
            <summary>
            Returns a named logger instance
            </summary>
            <param name="name">The name of the logger to retrieve</param>
            <returns>The logger object with the name specified</returns>
            <remarks>
                <para>
            Returns a named logger instance.
            </para>
                <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.Shutdown">
            <summary>Shutdown the repository</summary>
            <remarks>
                <para>
            Shutting down a repository will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
                <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
                <para>
            The <see cref="M:Shutdown()" /> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.ResetConfiguration">
            <summary>
            Reset the repositories configuration to a default state
            </summary>
            <remarks>
                <para>
            Reset all values contained in this instance to their
            default state.
            </para>
                <para>
            Existing loggers are not removed. They are just reset.
            </para>
                <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.Log(log4net.Core.LoggingEvent)">
            <summary>
            Log the <see cref="T:log4net.Core.LoggingEvent" /> through this repository.
            </summary>
            <param name="logEvent">the event to log</param>
            <remarks>
                <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)" /> method.
            </para>
                <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Configured">
            <summary>
            Flag indicates if this repository has been configured.
            </summary>
            <value>
            Flag indicates if this repository has been configured.
            </value>
            <remarks>
                <para>
            Flag indicates if this repository has been configured.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.ConfigurationMessages">
            <summary>
            Collection of internal messages captured during the most 
            recent configuration process.
            </summary>
        </member>
        <member name="E:log4net.Repository.ILoggerRepository.ShutdownEvent">
            <summary>
            Event to notify that the repository has been shutdown.
            </summary>
            <value>
            Event to notify that the repository has been shutdown.
            </value>
            <remarks>
                <para>
            Event raised when the repository has been shutdown.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.ILoggerRepository.ConfigurationReset">
            <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
            <value>
            Event to notify that the repository has had its configuration reset.
            </value>
            <remarks>
                <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.ILoggerRepository.ConfigurationChanged">
            <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
            <value>
            Event to notify that the repository has had its configuration changed.
            </value>
            <remarks>
                <para>
            Event raised when the repository's configuration has been changed.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.ILoggerRepository.Properties">
            <summary>
            Repository specific properties
            </summary>
            <value>
            Repository specific properties
            </value>
            <remarks>
                <para>
            These properties can be specified on a repository specific basis.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.ILoggerRepository.GetAppenders">
            <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
            <returns>All the Appenders</returns>
            <remarks>
                <para>
            Returns all the Appenders that are configured as an Array.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.IXmlRepositoryConfigurator">
            <summary>
            Configure repository using XML
            </summary>
            <remarks>
                <para>
            Interface used by Xml configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
                <para>
            A <see cref="T:log4net.Repository.ILoggerRepository" /> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.XmlConfigurator" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.IXmlRepositoryConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            Initialize the repository using the specified config
            </summary>
            <param name="element">the element containing the root of the config</param>
            <remarks>
                <para>
            The schema for the XML configuration data is defined by
            the implementation.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Repository.LoggerRepositorySkeleton">
            <summary>
            Base implementation of <see cref="T:log4net.Repository.ILoggerRepository" /></summary>
            <remarks>
                <para>
            Default abstract implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            </para>
                <para>
            Skeleton implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            All <see cref="T:log4net.Repository.ILoggerRepository" /> types can extend this type.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
                <para>
            Initializes the repository with default (empty) properties.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor(log4net.Util.PropertiesDictionary)">
            <summary>
            Construct the repository using specific properties
            </summary>
            <param name="properties">the properties to set for this repository</param>
            <remarks>
                <para>
            Initializes the repository with specified properties.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Name">
            <summary>
            The name of the repository
            </summary>
            <value>
            The string name of the repository
            </value>
            <remarks>
                <para>
            The name of this repository. The name is
            used to store and lookup the repositories 
            stored by the <see cref="T:log4net.Core.IRepositorySelector" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Threshold">
            <summary>
            The threshold for all events in this repository
            </summary>
            <value>
            The threshold for all events in this repository
            </value>
            <remarks>
                <para>
            The threshold for all events in this repository
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.RendererMap">
            <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
            <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
            <remarks>
                <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
                <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> objects.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.PluginMap">
            <summary>
            The plugin map for this repository.
            </summary>
            <value>
            The plugin map for this repository.
            </value>
            <remarks>
                <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin" /> instances
            that have been attached to this repository.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.LevelMap">
            <summary>
            Get the level map for the Repository.
            </summary>
            <remarks>
                <para>
            Get the level map for the Repository.
            </para>
                <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level" /> objects in
            this repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Exists(System.String)">
            <summary>
            Test if logger exists
            </summary>
            <param name="name">The name of the logger to lookup</param>
            <returns>The Logger object with the name specified</returns>
            <remarks>
                <para>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the repository
            </summary>
            <returns>All the defined loggers</returns>
            <remarks>
                <para>
            Returns all the currently defined loggers in the repository as an Array.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetLogger(System.String)">
            <summary>
            Return a new logger instance
            </summary>
            <param name="name">The name of the logger to retrieve</param>
            <returns>The logger object with the name specified</returns>
            <remarks>
                <para>
            Return a new logger instance.
            </para>
                <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Shutdown">
            <summary>
            Shutdown the repository
            </summary>
            <remarks>
                <para>
            Shutdown the repository. Can be overridden in a subclass.
            This base class implementation notifies the <see cref="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent" />
            listeners and all attached plugins of the shutdown event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.ResetConfiguration">
            <summary>
            Reset the repositories configuration to a default state
            </summary>
            <remarks>
                <para>
            Reset all values contained in this instance to their
            default state.
            </para>
                <para>
            Existing loggers are not removed. They are just reset.
            </para>
                <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Log(log4net.Core.LoggingEvent)">
            <summary>
            Log the logEvent through this repository.
            </summary>
            <param name="logEvent">the event to log</param>
            <remarks>
                <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(string)" /> method.
            </para>
                <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Configured">
            <summary>
            Flag indicates if this repository has been configured.
            </summary>
            <value>
            Flag indicates if this repository has been configured.
            </value>
            <remarks>
                <para>
            Flag indicates if this repository has been configured.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.ConfigurationMessages">
            <summary>
            Contains a list of internal messages captures during the 
            last configuration.
            </summary>
        </member>
        <member name="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent">
            <summary>
            Event to notify that the repository has been shutdown.
            </summary>
            <value>
            Event to notify that the repository has been shutdown.
            </value>
            <remarks>
                <para>
            Event raised when the repository has been shutdown.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationReset">
            <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
            <value>
            Event to notify that the repository has had its configuration reset.
            </value>
            <remarks>
                <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
            </remarks>
        </member>
        <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationChanged">
            <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
            <value>
            Event to notify that the repository has had its configuration changed.
            </value>
            <remarks>
                <para>
            Event raised when the repository's configuration has been changed.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Repository.LoggerRepositorySkeleton.Properties">
            <summary>
            Repository specific properties
            </summary>
            <value>
            Repository specific properties
            </value>
            <remarks>
            These properties can be specified on a repository specific basis
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetAppenders">
            <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
            <returns>All the Appenders</returns>
            <remarks>
                <para>
            Returns all the Appenders that are configured as an Array.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Repository.LoggerRepositorySkeleton.declaringType">
            <summary>
            The fully qualified type of the LoggerRepositorySkeleton class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.AddRenderer(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
            <summary>
            Adds an object renderer for a specific class. 
            </summary>
            <param name="typeToRender">The type that will be rendered by the renderer supplied.</param>
            <param name="rendererInstance">The object renderer used to render the object.</param>
            <remarks>
                <para>
            Adds an object renderer for a specific class. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnShutdown(System.EventArgs)">
            <summary>
            Notify the registered listeners that the repository is shutting down
            </summary>
            <param name="e">Empty EventArgs</param>
            <remarks>
                <para>
            Notify any listeners that this repository is shutting down.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationReset(System.EventArgs)">
            <summary>
            Notify the registered listeners that the repository has had its configuration reset
            </summary>
            <param name="e">Empty EventArgs</param>
            <remarks>
                <para>
            Notify any listeners that this repository's configuration has been reset.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationChanged(System.EventArgs)">
            <summary>
            Notify the registered listeners that the repository has had its configuration changed
            </summary>
            <param name="e">Empty EventArgs</param>
            <remarks>
                <para>
            Notify any listeners that this repository's configuration has changed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.RaiseConfigurationChanged(System.EventArgs)">
            <summary>
            Raise a configuration changed event on this repository
            </summary>
            <param name="e">EventArgs.Empty</param>
            <remarks>
                <para>
            Applications that programmatically change the configuration of the repository should
            raise this event notification to notify listeners.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Repository.LoggerRepositorySkeleton.Flush(System.Int32)">
            <summary>
            Flushes all configured Appenders that implement <see cref="T:log4net.Appender.IFlushable" />.
            </summary>
            <param name="millisecondsTimeout">The maximum time in milliseconds to wait for logging events from asycnhronous appenders to be flushed,
            or <see cref="F:System.Threading.Timeout.Infinite" /> to wait indefinitely.</param>
            <returns>
                <c>True</c> if all logging events were flushed successfully, else <c>false</c>.</returns>
        </member>
        <member name="T:log4net.ThreadContext">
            <summary>
            The log4net Thread Context.
            </summary>
            <remarks>
                <para>
            The <c>ThreadContext</c> provides a location for thread specific debugging 
            information to be stored.
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
                <para>
            The thread context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputting these properties.
            </para>
                <para>
            The Thread Context provides a diagnostic context for the current thread. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
                <para>
            The Thread Context is managed on a per thread basis.
            </para>
            </remarks>
            <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            ThreadContext.Properties["user"] = userName;
            log.Info("This log message has a ThreadContext Property called 'user'");
            </code></example>
            <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(ThreadContext.Stacks["NDC"].Push("my context message"))
            {
            	log.Info("This log message has a ThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code></example>
            <threadsafety static="true" instance="true" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.ThreadContext.#ctor">
            <summary>
            Private Constructor. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.ThreadContext.Properties">
            <summary>
            The thread properties map
            </summary>
            <value>
            The thread properties map
            </value>
            <remarks>
                <para>
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.ThreadContext.Stacks">
            <summary>
            The thread stacks
            </summary>
            <value>
            stack map
            </value>
            <remarks>
                <para>
            The thread local stacks.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.ThreadContext.s_properties">
            <summary>
            The thread context properties instance
            </summary>
        </member>
        <member name="F:log4net.ThreadContext.s_stacks">
            <summary>
            The thread context stacks instance
            </summary>
        </member>
        <member name="T:log4net.Util.AppenderAttachedImpl">
            <summary>
            A straightforward implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface.
            </summary>
            <remarks>
                <para>
            This is the default implementation of the <see cref="T:log4net.Core.IAppenderAttachable" />
            interface. Implementors of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            should aggregate an instance of this type.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.AppenderAttachedImpl" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent)">
            <summary>
            Append on on all attached appenders.
            </summary>
            <param name="loggingEvent">The event being logged.</param>
            <returns>The number of appenders called.</returns>
            <remarks>
                <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent[])">
            <summary>
            Append on on all attached appenders.
            </summary>
            <param name="loggingEvents">The array of events being logged.</param>
            <returns>The number of appenders called.</returns>
            <remarks>
                <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.CallAppend(log4net.Appender.IAppender,log4net.Core.LoggingEvent[])">
            <summary>
            Calls the DoAppende method on the <see cref="T:log4net.Appender.IAppender" /> with 
            the <see cref="T:log4net.Core.LoggingEvent" /> objects supplied.
            </summary>
            <param name="appender">The appender</param>
            <param name="loggingEvents">The events</param>
            <remarks>
                <para>
            If the <paramref name="appender" /> supports the <see cref="T:log4net.Appender.IBulkAppender" />
            interface then the <paramref name="loggingEvents" /> will be passed 
            through using that interface. Otherwise the <see cref="T:log4net.Core.LoggingEvent" />
            objects in the array will be passed one at a time.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.AddAppender(log4net.Appender.IAppender)">
            <summary>
            Attaches an appender.
            </summary>
            <param name="newAppender">The appender to add.</param>
            <remarks>
                <para>
            If the appender is already in the list it won't be added again.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.AppenderAttachedImpl.Appenders">
            <summary>
            Gets all attached appenders.
            </summary>
            <returns>
            A collection of attached appenders, or <c>null</c> if there
            are no attached appenders.
            </returns>
            <remarks>
                <para>
            The read only collection of all currently attached appenders.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.GetAppender(System.String)">
            <summary>
            Gets an attached appender with the specified name.
            </summary>
            <param name="name">The name of the appender to get.</param>
            <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
            <remarks>
                <para>
            Lookup an attached appender by name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAllAppenders">
            <summary>
            Removes all attached appenders.
            </summary>
            <remarks>
                <para>
            Removes and closes all attached appenders
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(log4net.Appender.IAppender)">
            <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
            <param name="appender">The appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
                <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(System.String)">
            <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
            <param name="name">The name of the appender to remove.</param>
            <returns>The appender removed from the list</returns>
            <remarks>
                <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderList">
            <summary>
            List of appenders
            </summary>
        </member>
        <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderArray">
            <summary>
            Array of appenders, used to cache the m_appenderList
            </summary>
        </member>
        <member name="F:log4net.Util.AppenderAttachedImpl.declaringType">
            <summary>
            The fully qualified type of the AppenderAttachedImpl class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.CompositeProperties">
            <summary>
            This class aggregates several PropertiesDictionary collections together.
            </summary>
            <remarks>
                <para>
            Provides a dictionary style lookup over an ordered list of
            <see cref="T:log4net.Util.PropertiesDictionary" /> collections.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.CompositeProperties.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CompositeProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CompositeProperties.Item(System.String)">
            <summary>
            Gets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
                <para>
            Looks up the value for the <paramref name="key" /> specified.
            The <see cref="T:log4net.Util.PropertiesDictionary" /> collections are searched
            in the order in which they were added to this collection. The value
            returned is the value held by the first collection that contains
            the specified key.
            </para>
                <para>
            If none of the collections contain the specified key then
            <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CompositeProperties.Add(log4net.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            Add a Properties Dictionary to this composite collection
            </summary>
            <param name="properties">the properties to add</param>
            <remarks>
                <para>
            Properties dictionaries added first take precedence over dictionaries added
            later.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CompositeProperties.Flatten">
            <summary>
            Flatten this composite collection into a single properties dictionary
            </summary>
            <returns>the flattened dictionary</returns>
            <remarks>
                <para>
            Reduces the collection of ordered dictionaries to a single dictionary
            containing the resultant values for the keys.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ContextPropertiesBase">
            <summary>
            Base class for Context Properties implementations
            </summary>
            <remarks>
                <para>
            This class defines a basic property get set accessor
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="P:log4net.Util.ContextPropertiesBase.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
                <para>
            Gets or sets the value of a property
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ConverterInfo">
            <summary>
            Wrapper class used to map converter names to converter types
            </summary>
            <remarks>
                <para>
            Pattern converter info class used during configuration by custom
            PatternString and PatternLayer converters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ConverterInfo.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:log4net.Util.ConverterInfo.Name">
            <summary>
            Gets or sets the name of the conversion pattern
            </summary>
            <remarks>
                <para>
            The name of the pattern in the format string
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ConverterInfo.Type">
            <summary>
            Gets or sets the type of the converter
            </summary>
            <remarks>
                <para>
            The value specified must extend the 
            <see cref="T:log4net.Util.PatternConverter" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ConverterInfo.AddProperty(log4net.Util.PropertyEntry)">
            <summary></summary>
            <param name="entry"></param>
        </member>
        <member name="P:log4net.Util.ConverterInfo.Properties">
            <summary></summary>
        </member>
        <member name="T:log4net.Util.CountingQuietTextWriter">
            <summary>
            Subclass of <see cref="T:log4net.Util.QuietTextWriter" /> that maintains a count of 
            the number of bytes written.
            </summary>
            <remarks>
                <para>
            This writer counts the number of bytes written.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
            <summary>
            Constructor
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> to actually write to.</param>
            <param name="errorHandler">The <see cref="T:log4net.Core.IErrorHandler" /> to report errors to.</param>
            <remarks>
                <para>
            Creates a new instance of the <see cref="T:log4net.Util.CountingQuietTextWriter" /> class 
            with the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the underlying writer and counts the number of bytes written.
            </summary>
            <param name="value">the char to write</param>
            <remarks>
                <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the underlying writer and counts the number of bytes written.
            </summary>
            <param name="buffer">the buffer to write</param>
            <param name="index">the start index to write from</param>
            <param name="count">the number of characters to write</param>
            <remarks>
                <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.String)">
            <summary>
            Writes a string to the output and counts the number of bytes written.
            </summary>
            <param name="str">The string data to write to the output.</param>
            <remarks>
                <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CountingQuietTextWriter.Count">
            <summary>
            Gets or sets the total number of bytes written.
            </summary>
            <value>
            The total number of bytes written.
            </value>
            <remarks>
                <para>
            Gets or sets the total number of bytes written.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.CountingQuietTextWriter.m_countBytes">
            <summary>
            Total number of bytes written.
            </summary>
        </member>
        <member name="T:log4net.Util.CyclicBuffer">
            <summary>
            A fixed size rolling buffer of logging events.
            </summary>
            <remarks>
                <para>
            An array backed fixed size leaky bucket.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxSize">The maximum number of logging events in the buffer.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CyclicBuffer" /> class with 
            the specified maximum number of buffered logging events.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxSize" /> argument is not a positive integer.</exception>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.Append(log4net.Core.LoggingEvent)">
            <summary>
            Appends a <paramref name="loggingEvent" /> to the buffer.
            </summary>
            <param name="loggingEvent">The event to append to the buffer.</param>
            <returns>The event discarded from the buffer, if the buffer is full, otherwise <c>null</c>.</returns>
            <remarks>
                <para>
            Append an event to the buffer. If the buffer still contains free space then
            <c>null</c> is returned. If the buffer is full then an event will be dropped
            to make space for the new event, the event dropped is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.PopOldest">
            <summary>
            Get and remove the oldest event in the buffer.
            </summary>
            <returns>The oldest logging event in the buffer</returns>
            <remarks>
                <para>
            Gets the oldest (first) logging event in the buffer and removes it 
            from the buffer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.PopAll">
            <summary>
            Pops all the logging events from the buffer into an array.
            </summary>
            <returns>An array of all the logging events in the buffer.</returns>
            <remarks>
                <para>
            Get all the events in the buffer and clear the buffer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.CyclicBuffer.Clear">
            <summary>
            Clear the buffer
            </summary>
            <remarks>
                <para>
            Clear the buffer of all events. The events in the buffer are lost.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CyclicBuffer.Item(System.Int32)">
            <summary>
            Gets the <paramref name="i" />th oldest event currently in the buffer.
            </summary>
            <value>The <paramref name="i" />th oldest event currently in the buffer.</value>
            <remarks>
                <para>
            If <paramref name="i" /> is outside the range 0 to the number of events
            currently in the buffer, then <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CyclicBuffer.MaxSize">
            <summary>
            Gets the maximum size of the buffer.
            </summary>
            <value>The maximum size of the buffer.</value>
            <remarks>
                <para>
            Gets the maximum size of the buffer
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.CyclicBuffer.Length">
            <summary>
            Gets the number of logging events in the buffer.
            </summary>
            <value>The number of logging events in the buffer.</value>
            <remarks>
                <para>
            This number is guaranteed to be in the range 0 to <see cref="P:log4net.Util.CyclicBuffer.MaxSize" />
            (inclusive).
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.EmptyCollection">
            <summary>
            An always empty <see cref="T:System.Collections.ICollection" />.
            </summary>
            <remarks>
                <para>
            A singleton implementation of the <see cref="T:System.Collections.ICollection" />
            interface that always represents an empty collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.EmptyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyCollection" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.Instance">
            <summary>
            Gets the singleton instance of the empty collection.
            </summary>
            <returns>The singleton instance of the empty collection.</returns>
            <remarks>
                <para>
            Gets the singleton instance of the empty collection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The Array must have zero-based 
            indexing.</param>
            <param name="index">The zero-based index in array at which 
            copying begins.</param>
            <remarks>
                <para>
            As the collection is empty no values are copied into the array.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.IsSynchronized">
            <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe).
            </summary>
            <value>
                <b>true</b> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
            <remarks>
                <para>
            For the <see cref="T:log4net.Util.EmptyCollection" /> this property is always <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </value>
            <remarks>
                <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyCollection.Count" /> is always <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </value>
            <remarks>
                <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyCollection.SyncRoot" /> object.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
                <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.EmptyCollection.s_instance">
            <summary>
            The singleton instance of the empty collection.
            </summary>
        </member>
        <member name="T:log4net.Util.EmptyDictionary">
            <summary>
            An always empty <see cref="T:System.Collections.IDictionary" />.
            </summary>
            <remarks>
                <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionary" />
            interface that always represents an empty collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyDictionary" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <returns>The singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.</returns>
            <remarks>
                <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The Array must have zero-based 
            indexing.</param>
            <param name="index">The zero-based index in array at which 
            copying begins.</param>
            <remarks>
                <para>
            As the collection is empty no values are copied into the array.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.IsSynchronized">
            <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe).
            </summary>
            <value>
                <b>true</b> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
            <remarks>
                <para>
            For the <see cref="T:log4net.Util.EmptyCollection" /> this property is always <b>true</b>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" /></summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </value>
            <remarks>
                <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyDictionary.Count" /> is always <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </value>
            <remarks>
                <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyDictionary.SyncRoot" /> object.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
                <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
            <remarks>
                <para>
            As the collection is empty no new values can be added. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <remarks>
                <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:log4net.Util.EmptyDictionary" /> contains an element 
            with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:log4net.Util.EmptyDictionary" />.</param>
            <returns>
                <c>false</c>
            </returns>
            <remarks>
                <para>
            As the collection is empty the <see cref="M:log4net.Util.EmptyDictionary.Contains(System.Object)" /> method always returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
                <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.EmptyDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <remarks>
                <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> has a fixed size.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsFixedSize" /> always returns <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> is read-only.
            </summary>
            <value>
                <c>true</c>
            </value>
            <remarks>
                <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsReadOnly" /> always returns <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
            <remarks>
                <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
            <remarks>
                <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.EmptyDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <value>
                <c>null</c>
            </value>
            <remarks>
                <para>
            As the collection is empty no values can be looked up or stored. 
            If the index getter is called then <c>null</c> is returned.
            A <see cref="T:System.InvalidOperationException" /> is thrown if the setter is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="F:log4net.Util.EmptyDictionary.s_instance">
            <summary>
            The singleton instance of the empty dictionary.
            </summary>
        </member>
        <member name="T:log4net.Util.FormattingInfo">
            <summary>
            Contain the information obtained when parsing formatting modifiers 
            in conversion modifiers.
            </summary>
            <remarks>
                <para>
            Holds the formatting information extracted from the format string by
            the <see cref="T:log4net.Util.PatternParser" />. This is used by the <see cref="T:log4net.Util.PatternConverter" />
            objects when rendering the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.FormattingInfo.#ctor">
            <summary>
            Defaut Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.FormattingInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class
            with the specified parameters.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.FormattingInfo.Min">
            <summary>
            Gets or sets the minimum value.
            </summary>
            <value>
            The minimum value.
            </value>
            <remarks>
                <para>
            Gets or sets the minimum value.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.FormattingInfo.Max">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
            <remarks>
                <para>
            Gets or sets the maximum value.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.FormattingInfo.LeftAlign">
            <summary>
            Gets or sets a flag indicating whether left align is enabled
            or not.
            </summary>
            <value>
            A flag indicating whether left align is enabled or not.
            </value>
            <remarks>
                <para>
            Gets or sets a flag indicating whether left align is enabled or not.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.GlobalContextProperties">
            <summary>
            Implementation of Properties collection for the <see cref="T:log4net.GlobalContext" /></summary>
            <remarks>
                <para>
            This class implements a properties collection that is thread safe and supports both
            storing properties and capturing a read only copy of the current propertied.
            </para>
                <para>
            This class is optimized to the scenario where the properties are read frequently
            and are modified infrequently.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.GlobalContextProperties.m_readOnlyProperties">
            <summary>
            The read only copy of the properties.
            </summary>
            <remarks>
                <para>
            This variable is declared <c>volatile</c> to prevent the compiler and JIT from
            reordering reads and writes of this thread performed on different threads.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.GlobalContextProperties.m_syncRoot">
            <summary>
            Lock object used to synchronize updates within this instance
            </summary>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.GlobalContextProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.GlobalContextProperties.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
                <para>
            Reading the value for a key is faster than setting the value.
            When the value is written a new read only copy of 
            the properties is created.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.Remove(System.String)">
            <summary>
            Remove a property from the global context
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
                <para>
            Removing an entry from the global context properties is relatively expensive compared
            with reading a value. 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.Clear">
            <summary>
            Clear the global context properties
            </summary>
        </member>
        <member name="M:log4net.Util.GlobalContextProperties.GetReadOnlyProperties">
            <summary>
            Get a readonly immutable copy of the properties
            </summary>
            <returns>the current global context properties</returns>
            <remarks>
                <para>
            This implementation is fast because the GlobalContextProperties class
            stores a readonly copy of the properties.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ILogExtensions">
            <summary>
            The static class ILogExtensions contains a set of widely used
            methods that ease the interaction with the ILog interface implementations.
            </summary>
            <remarks>
                <para>
            This class contains methods for logging at different levels and checks the
            properties for determining if those logging levels are enabled in the current
            configuration.
            </para>
            </remarks>
            <example>Simple example of logging messages
            <code lang="C#">
            using log4net.Util;
            
            ILog log = LogManager.GetLogger("application-log");
            
            log.InfoExt("Application Start");
            log.DebugExt("This is a debug message");
            </code></example>
        </member>
        <member name="F:log4net.Util.ILogExtensions.declaringType">
            <summary>
            The fully qualified type of the Logger class.
            </summary>
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsDebugEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>INFO</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsDebugEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>INFO</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Debug(System.Object)" /><seealso cref="P:log4net.ILog.IsDebugEnabled" /></member>
        <member name="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.DebugFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.DebugExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Debug(System.Object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsInfoEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>INFO</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>INFO</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsInfoEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>INFO</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Info(System.Object)" /><seealso cref="P:log4net.ILog.IsInfoEnabled" /></member>
        <member name="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.InfoFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.InfoExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Info(System.Object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsWarnEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>WARN</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>WARN</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsWarnEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>WARN</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Warn(System.Object)" /><seealso cref="P:log4net.ILog.IsWarnEnabled" /></member>
        <member name="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.WarnFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.WarnExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Warn(System.Object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsErrorEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>ERROR</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsErrorEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>ERROR</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Error(System.Object)" /><seealso cref="P:log4net.ILog.IsErrorEnabled" /></member>
        <member name="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.ErrorFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.ErrorExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Error(System.Object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object})">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <remarks>
                <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsFatalEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation.  If this logger is <c>FATAL</c> enabled, then it converts 
            the message object (retrieved by invocation of the provided callback) to a 
            string by invoking the appropriate <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            It then proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
                <para>
                    <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object},System.Exception)" /> form instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Func{System.Object},System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="callback">The lambda expression that gets the object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)">
            <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads> //TODO
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary><param name="logger">The logger on which the message is logged.</param><param name="message">The message object to log.</param><remarks><para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by reading the value <seealso cref="P:log4net.ILog.IsFatalEnabled" /> property.
            This check happens always and does not depend on the <seealso cref="T:log4net.ILog" />
            implementation. If this logger is <c>FATAL</c> enabled, then it converts 
            the message object (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para><para><b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" /> form instead.
            </para></remarks><seealso cref="M:log4net.ILog.Fatal(System.Object)" /><seealso cref="P:log4net.ILog.IsFatalEnabled" /></member>
        <member name="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
            <remarks>
                <para>
            See the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object)" /> form for more detailed information.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:log4net.Util.ILogExtensions.FatalFormatExt(log4net.ILog,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="logger">The logger on which the message is logged.</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <remarks>
                <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
                <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Util.ILogExtensions.FatalExt(log4net.ILog,System.Object,System.Exception)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="T:log4net.Util.LevelMapping">
            <summary>
            Manages a mapping from levels to <see cref="T:log4net.Util.LevelMappingEntry" /></summary>
            <remarks>
                <para>
            Manages an ordered mapping from <see cref="T:log4net.Core.Level" /> instances 
            to <see cref="T:log4net.Util.LevelMappingEntry" /> subclasses.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.LevelMapping.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Initialise a new instance of <see cref="T:log4net.Util.LevelMapping" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMapping.Add(log4net.Util.LevelMappingEntry)">
            <summary>
            Add a <see cref="T:log4net.Util.LevelMappingEntry" /> to this mapping
            </summary>
            <param name="entry">the entry to add</param>
            <remarks>
                <para>
            If a <see cref="T:log4net.Util.LevelMappingEntry" /> has previously been added
            for the same <see cref="T:log4net.Core.Level" /> then that entry will be 
            overwritten.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMapping.Lookup(log4net.Core.Level)">
            <summary>
            Lookup the mapping for the specified level
            </summary>
            <param name="level">the level to lookup</param>
            <returns>the <see cref="T:log4net.Util.LevelMappingEntry" /> for the level or <c>null</c> if no mapping found</returns>
            <remarks>
                <para>
            Lookup the value for the specified level. Finds the nearest
            mapping value for the level that is equal to or less than the
            <paramref name="level" /> specified.
            </para>
                <para>
            If no mapping could be found then <c>null</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMapping.ActivateOptions">
            <summary>
            Initialize options
            </summary>
            <remarks>
                <para>
            Caches the sorted list of <see cref="T:log4net.Util.LevelMappingEntry" /> in an array
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LevelMappingEntry">
            <summary>
            An entry in the <see cref="T:log4net.Util.LevelMapping" /></summary>
            <remarks>
                <para>
            This is an abstract base class for types that are stored in the
            <see cref="T:log4net.Util.LevelMapping" /> object.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.LevelMappingEntry.#ctor">
            <summary>
            Default protected constructor
            </summary>
            <remarks>
                <para>
            Default protected constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LevelMappingEntry.Level">
            <summary>
            The level that is the key for this mapping 
            </summary>
            <value>
            The <see cref="P:log4net.Util.LevelMappingEntry.Level" /> that is the key for this mapping 
            </value>
            <remarks>
                <para>
            Get or set the <see cref="P:log4net.Util.LevelMappingEntry.Level" /> that is the key for this
            mapping subclass.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LevelMappingEntry.ActivateOptions">
            <summary>
            Initialize any options defined on this entry
            </summary>
            <remarks>
                <para>
            Should be overridden by any classes that need to initialise based on their options
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextProperties">
            <summary>
            Implementation of Properties collection for the <see cref="T:log4net.LogicalThreadContext" /></summary>
            <remarks>
                <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary" />.
            </para>
                <para>
            This class stores its properties in a slot on the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> named
            <c>log4net.Util.LogicalThreadContextProperties</c>.
            </para>
                <para>
            For .NET Standard 1.3 this class uses
            System.Threading.AsyncLocal rather than <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />.
            </para>
                <para>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> requires a link time 
            <see cref="T:System.Security.Permissions.SecurityPermission" /> for the
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" />.
            If the calling code does not have this permission then this context will be disabled.
            It will not store any property values set on it.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextProperties.m_disabled">
            <summary>
            Flag used to disable this context if we don't have permission to access the CallContext.
            </summary>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextProperties.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
                <para>
            Get or set the property value for the <paramref name="key" /> specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.Remove(System.String)">
            <summary>
            Remove a property
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
                <para>
            Remove the value for the specified <paramref name="key" /> from the context.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.Clear">
            <summary>
            Clear all the context properties
            </summary>
            <remarks>
                <para>
            Clear all the context properties
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.GetProperties(System.Boolean)">
            <summary>
            Get the PropertiesDictionary stored in the LocalDataStoreSlot for this thread.
            </summary>
            <param name="create">create the dictionary if it does not exist, otherwise return null if is does not exist</param>
            <returns>the properties for this thread</returns>
            <remarks>
                <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doings so.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.GetLogicalProperties">
            <summary>
            Gets the call context get data.
            </summary>
            <returns>The peroperties dictionary stored in the call context</returns>
            <remarks>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> method <see cref="M:System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)" /> has a
            security link demand, therfore we must put the method call in a seperate method
            that we can wrap in an exception handler.
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextProperties.SetLogicalProperties(log4net.Util.PropertiesDictionary)">
            <summary>
            Sets the call context data.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            The <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> method <see cref="M:System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)" /> has a
            security link demand, therfore we must put the method call in a seperate method
            that we can wrap in an exception handler.
            </remarks>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextProperties.declaringType">
            <summary>
            The fully qualified type of the LogicalThreadContextProperties class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.TwoArgAction`2">
            <summary>
            Delegate type used for LogicalThreadContextStack's callbacks.
            </summary>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStack">
            <summary>
            Implementation of Stack for the <see cref="T:log4net.LogicalThreadContext" /></summary>
            <remarks>
                <para>
            Implementation of Stack for the <see cref="T:log4net.LogicalThreadContext" /></para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.m_stack">
            <summary>
            The stack store.
            </summary>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.m_propertyKey">
            <summary>
            The name of this <see cref="T:log4net.Util.LogicalThreadContextStack" /> within the
            <see cref="T:log4net.Util.LogicalThreadContextProperties" />.
            </summary>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.m_registerNew">
            <summary>
            The callback used to let the <see cref="T:log4net.Util.LogicalThreadContextStacks" /> register a
            new instance of a <see cref="T:log4net.Util.LogicalThreadContextStack" />.
            </summary>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.#ctor(System.String,log4net.Util.TwoArgAction{System.String,log4net.Util.LogicalThreadContextStack})">
            <summary>
            Internal constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextStack" /> class. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.Count">
            <summary>
            The number of messages in the stack
            </summary>
            <value>
            The current number of messages in the stack
            </value>
            <remarks>
                <para>
            The current number of messages in the stack. That is
            the number of times <see cref="M:log4net.Util.LogicalThreadContextStack.Push(System.String)" /> has been called
            minus the number of times <see cref="M:log4net.Util.LogicalThreadContextStack.Pop" /> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.Clear">
            <summary>
            Clears all the contextual information held in this stack.
            </summary>
            <remarks>
                <para>
            Clears all the contextual information held in this stack.
            Only call this if you think that this thread is being reused after
            a previous call execution which may not have completed correctly.
            You do not need to use this method if you always guarantee to call
            the <see cref="M:System.IDisposable.Dispose" /> method of the <see cref="T:System.IDisposable" />
            returned from <see cref="M:log4net.Util.LogicalThreadContextStack.Push(System.String)" /> even in exceptional circumstances,
            for example by using the <c>using(log4net.LogicalThreadContext.Stacks["NDC"].Push("Stack_Message"))</c> 
            syntax.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.Pop">
            <summary>
            Removes the top context from this stack.
            </summary>
            <returns>The message in the context that was removed from the top of this stack.</returns>
            <remarks>
                <para>
            Remove the top context from this stack, and return
            it to the caller. If this stack is empty then an
            empty string (not <see langword="null" />) is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.Push(System.String)">
            <summary>
            Pushes a new context message into this stack.
            </summary>
            <param name="message">The new context message.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up the context stack.
            </returns>
            <remarks>
                <para>
            Pushes a new context onto this stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up this stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.LogicalThreadContext.Stacks["NDC"].Push("Stack_Message"))
            {
            	log.Warn("This should have an ThreadContext Stack message");
            }
            </code></example>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.GetFullMessage">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>The current context information.</returns>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.InternalStack">
            <summary>
            Gets and sets the internal stack used by this <see cref="T:log4net.Util.LogicalThreadContextStack" /></summary>
            <value>The internal storage stack</value>
            <remarks>
                <para>
            This property is provided only to support backward compatability 
            of the <see cref="T:log4net.NDC" />. Tytpically the internal stack should not
            be modified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.ToString">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>Gets the current context information</returns>
            <remarks>
                <para>
            Gets the current context information for this stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.log4net#Core#IFixingRequired#GetFixedObject">
            <summary>
            Get a portable version of this object
            </summary>
            <returns>the portable instance of this object</returns>
            <remarks>
                <para>
            Get a cross thread portable version of this object
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStack.StackFrame">
            <summary>
            Inner class used to represent a single context frame in the stack.
            </summary>
            <remarks>
                <para>
            Inner class used to represent a single context frame in the stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.StackFrame.#ctor(System.String,log4net.Util.LogicalThreadContextStack.StackFrame)">
            <summary>
            Constructor
            </summary>
            <param name="message">The message for this context.</param>
            <param name="parent">The parent context in the chain.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextStack.StackFrame" /> class
            with the specified message and parent context.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.StackFrame.Message">
            <summary>
            Get the message.
            </summary>
            <value>The message.</value>
            <remarks>
                <para>
            Get the message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStack.StackFrame.FullMessage">
            <summary>
            Gets the full text of the context down to the root level.
            </summary>
            <value>
            The full text of the context down to the root level.
            </value>
            <remarks>
                <para>
            Gets the full text of the context down to the root level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame">
            <summary>
            Struct returned from the <see cref="M:log4net.Util.LogicalThreadContextStack.Push(System.String)" /> method.
            </summary>
            <remarks>
                <para>
            This struct implements the <see cref="T:System.IDisposable" /> and is designed to be used
            with the <see langword="using" /> pattern to remove the stack frame at the end of the scope.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.m_frameDepth">
            <summary>
            The depth to trim the stack to when this instance is disposed
            </summary>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.m_logicalThreadContextStack">
            <summary>
            The outer LogicalThreadContextStack.
            </summary>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.#ctor(log4net.Util.LogicalThreadContextStack,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="logicalThreadContextStack">The internal stack used by the ThreadContextStack.</param>
            <param name="frameDepth">The depth to return the stack to when this object is disposed.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame" /> class with
            the specified stack and return depth.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStack.AutoPopStackFrame.Dispose">
            <summary>
            Returns the stack to the correct depth.
            </summary>
            <remarks>
                <para>
            Returns the stack to the correct depth.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.LogicalThreadContextStacks">
            <summary>
            Implementation of Stacks collection for the <see cref="T:log4net.LogicalThreadContext" /></summary>
            <remarks>
                <para>
            Implementation of Stacks collection for the <see cref="T:log4net.LogicalThreadContext" /></para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.LogicalThreadContextStacks.#ctor(log4net.Util.LogicalThreadContextProperties)">
            <summary>
            Internal constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStacks" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogicalThreadContextStacks.Item(System.String)">
            <summary>
            Gets the named thread context stack
            </summary>
            <value>
            The named stack
            </value>
            <remarks>
                <para>
            Gets the named thread context stack
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.LogicalThreadContextStacks.declaringType">
            <summary>
            The fully qualified type of the ThreadContextStacks class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.LogReceivedEventHandler">
            <summary></summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="T:log4net.Util.LogLog">
            <summary>
            Outputs log statements from within the log4net assembly.
            </summary>
            <remarks>
                <para>
            Log4net components cannot make log4net logging calls. However, it is
            sometimes useful for the user to learn about what log4net is
            doing.
            </para>
                <para>
            All log4net internal debug calls go to the standard output stream
            whereas internal error messages are sent to the standard error output 
            stream.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="E:log4net.Util.LogLog.LogReceived">
            <summary>
            The event raised when an internal message has been received.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.Source">
            <summary>
            The Type that generated the internal message.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.TimeStamp">
            <summary>
            The DateTime stamp of when the internal message was received.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.TimeStampUtc">
            <summary>
            The UTC DateTime stamp of when the internal message was received.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.Prefix">
            <summary>
            A string indicating the severity of the internal message.
            </summary>
            <remarks>
            "log4net: ", 
            "log4net:ERROR ", 
            "log4net:WARN "
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.Message">
            <summary>
            The internal log message.
            </summary>
        </member>
        <member name="P:log4net.Util.LogLog.Exception">
            <summary>
            The Exception related to the message.
            </summary>
            <remarks>
            Optional. Will be null if no Exception was passed.
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.ToString">
            <summary>
            Formats Prefix, Source, and Message in the same format as the value
            sent to Console.Out and Trace.Write.
            </summary>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.LogLog.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.LogLog" /> class. 
            </summary>
            <param name="source"></param>
            <param name="prefix"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:log4net.Util.LogLog.#cctor">
            <summary>
            Static constructor that initializes logging by reading 
            settings from the application configuration file.
            </summary>
            <remarks>
                <para>
            The <c>log4net.Internal.Debug</c> application setting
            controls internal debugging. This setting should be set
            to <c>true</c> to enable debugging.
            </para>
                <para>
            The <c>log4net.Internal.Quiet</c> application setting
            suppresses all internal logging including error messages. 
            This setting should be set to <c>true</c> to enable message
            suppression.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.InternalDebugging">
            <summary>
            Gets or sets a value indicating whether log4net internal logging
            is enabled or disabled.
            </summary>
            <value>
                <c>true</c> if log4net internal logging is enabled, otherwise 
            <c>false</c>.
            </value>
            <remarks>
                <para>
            When set to <c>true</c>, internal debug level logging will be 
            displayed.
            </para>
                <para>
            This value can be set by setting the application setting 
            <c>log4net.Internal.Debug</c> in the application configuration
            file.
            </para>
                <para>
            The default value is <c>false</c>, i.e. debugging is
            disabled.
            </para>
            </remarks>
            <example>
                <para>
            The following example enables internal debugging using the 
            application configuration file :
            </para>
                <code lang="XML" escaped="true">
                    <configuration>
                        <appSettings>
                            <add key="log4net.Internal.Debug" value="true" />
                        </appSettings>
                    </configuration>
                </code>
            </example>
        </member>
        <member name="P:log4net.Util.LogLog.QuietMode">
            <summary>
            Gets or sets a value indicating whether log4net should generate no output
            from internal logging, not even for errors. 
            </summary>
            <value>
                <c>true</c> if log4net should generate no output at all from internal 
            logging, otherwise <c>false</c>.
            </value>
            <remarks>
                <para>
            When set to <c>true</c> will cause internal logging at all levels to be 
            suppressed. This means that no warning or error reports will be logged. 
            This option overrides the <see cref="P:log4net.Util.LogLog.InternalDebugging" /> setting and 
            disables all debug also.
            </para>
                <para>This value can be set by setting the application setting
            <c>log4net.Internal.Quiet</c> in the application configuration file.
            </para>
                <para>
            The default value is <c>false</c>, i.e. internal logging is not
            disabled.
            </para>
            </remarks>
            <example>
            The following example disables internal logging using the 
            application configuration file :
            <code lang="XML" escaped="true"><configuration><appSettings><add key="log4net.Internal.Quiet" value="true" /></appSettings></configuration></code></example>
        </member>
        <member name="P:log4net.Util.LogLog.EmitInternalMessages">
            <summary></summary>
        </member>
        <member name="M:log4net.Util.LogLog.OnLogReceived(System.Type,System.String,System.String,System.Exception)">
            <summary>
            Raises the LogReceived event when an internal messages is received.
            </summary>
            <param name="source"></param>
            <param name="prefix"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="P:log4net.Util.LogLog.IsDebugEnabled">
            <summary>
            Test if LogLog.Debug is enabled for output.
            </summary>
            <value>
                <c>true</c> if Debug is enabled
            </value>
            <remarks>
                <para>
            Test if LogLog.Debug is enabled for output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Debug(System.Type,System.String)">
            <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
            <param name="source"></param>
            <param name="message">The message to log.</param>
            <remarks>
                <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Debug(System.Type,System.String,System.Exception)">
            <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <param name="exception">An exception to log.</param>
            <remarks>
                <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.IsWarnEnabled">
            <summary>
            Test if LogLog.Warn is enabled for output.
            </summary>
            <value>
                <c>true</c> if Warn is enabled
            </value>
            <remarks>
                <para>
            Test if LogLog.Warn is enabled for output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Warn(System.Type,System.String)">
            <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <remarks>
                <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Warn(System.Type,System.String,System.Exception)">
            <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <param name="exception">An exception to log.</param>
            <remarks>
                <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.LogLog.IsErrorEnabled">
            <summary>
            Test if LogLog.Error is enabled for output.
            </summary>
            <value>
                <c>true</c> if Error is enabled
            </value>
            <remarks>
                <para>
            Test if LogLog.Error is enabled for output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Error(System.Type,System.String)">
            <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <remarks>
                <para>
            All internal error messages are prepended with 
            the string "log4net:ERROR ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.Error(System.Type,System.String,System.Exception)">
            <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
            <param name="source">The Type that generated this message.</param>
            <param name="message">The message to log.</param>
            <param name="exception">An exception to log.</param>
            <remarks>
                <para>
            All internal debug messages are prepended with 
            the string "log4net:ERROR ".
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.EmitOutLine(System.String)">
            <summary>
            Writes output to the standard output stream.  
            </summary>
            <param name="message">The message to log.</param>
            <remarks>
                <para>
            Writes to both Console.Out and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
                <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.LogLog.EmitErrorLine(System.String)">
            <summary>
            Writes output to the standard error stream.  
            </summary>
            <param name="message">The message to log.</param>
            <remarks>
                <para>
            Writes to both Console.Error and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
                <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.LogLog.s_debugEnabled">
            <summary>
             Default debug level
            </summary>
        </member>
        <member name="F:log4net.Util.LogLog.s_quietMode">
            <summary>
            In quietMode not even errors generate any output.
            </summary>
        </member>
        <member name="T:log4net.Util.LogLog.LogReceivedAdapter">
            <summary>
            Subscribes to the LogLog.LogReceived event and stores messages
            to the supplied IList instance.
            </summary>
        </member>
        <member name="M:log4net.Util.LogLog.LogReceivedAdapter.#ctor(System.Collections.IList)">
            <summary></summary>
            <param name="items"></param>
        </member>
        <member name="P:log4net.Util.LogLog.LogReceivedAdapter.Items">
            <summary></summary>
        </member>
        <member name="M:log4net.Util.LogLog.LogReceivedAdapter.Dispose">
            <summary></summary>
        </member>
        <member name="T:log4net.Util.LogReceivedEventArgs">
            <summary></summary>
        </member>
        <member name="M:log4net.Util.LogReceivedEventArgs.#ctor(log4net.Util.LogLog)">
            <summary></summary>
            <param name="loglog"></param>
        </member>
        <member name="P:log4net.Util.LogReceivedEventArgs.LogLog">
            <summary></summary>
        </member>
        <member name="T:log4net.Util.NativeError">
            <summary>
            Represents a native error code and message.
            </summary>
            <remarks>
                <para>
            Represents a Win32 platform native error.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.NativeError.#ctor(System.Int32,System.String)">
            <summary>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </summary>
            <param name="number">The number of the native error.</param>
            <param name="message">The message of the native error.</param>
            <remarks>
                <para>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NativeError.Number">
            <summary>
            Gets the number of the native error.
            </summary>
            <value>
            The number of the native error.
            </value>
            <remarks>
                <para>
            Gets the number of the native error.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NativeError.Message">
            <summary>
            Gets the message of the native error.
            </summary>
            <value>
            The message of the native error.
            </value>
            <remarks>
                <para></para>
            Gets the message of the native error.
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.GetLastError">
            <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class for the last Windows error.
            </summary>
            <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the last windows error.
            </returns>
            <remarks>
                <para>
            The message for the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" /> error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.GetError(System.Int32)">
            <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class.
            </summary>
            <param name="number">the error number for the native error</param>
            <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the specified 
            error number.
            </returns>
            <remarks>
                <para>
            The message for the specified error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.GetErrorMessage(System.Int32)">
            <summary>
            Retrieves the message corresponding with a Win32 message identifier.
            </summary>
            <param name="messageId">Message identifier for the requested message.</param>
            <returns>
            The message corresponding with the specified message identifier.
            </returns>
            <remarks>
                <para>
            The message will be searched for in system message-table resource(s)
            using the native <c>FormatMessage</c> function.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.ToString">
            <summary>
            Return error information string
            </summary>
            <returns>error information string</returns>
            <remarks>
                <para>
            Return error information string
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NativeError.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr)">
            <summary>
            Formats a message string.
            </summary>
            <param name="dwFlags">Formatting options, and how to interpret the <paramref name="lpSource" /> parameter.</param>
            <param name="lpSource">Location of the message definition.</param>
            <param name="dwMessageId">Message identifier for the requested message.</param>
            <param name="dwLanguageId">Language identifier for the requested message.</param>
            <param name="lpBuffer">If <paramref name="dwFlags" /> includes FORMAT_MESSAGE_ALLOCATE_BUFFER, the function allocates a buffer using the <c>LocalAlloc</c> function, and places the pointer to the buffer at the address specified in <paramref name="lpBuffer" />.</param>
            <param name="nSize">If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this parameter specifies the maximum number of TCHARs that can be stored in the output buffer. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer.</param>
            <param name="Arguments">Pointer to an array of values that are used as insert values in the formatted message.</param>
            <remarks>
                <para>
            The function requires a message definition as input. The message definition can come from a 
            buffer passed into the function. It can come from a message table resource in an 
            already-loaded module. Or the caller can ask the function to search the system's message 
            table resource(s) for the message definition. The function finds the message definition 
            in a message table resource based on a message identifier and a language identifier. 
            The function copies the formatted message text to an output buffer, processing any embedded 
            insert sequences if requested.
            </para>
                <para>
            To prevent the usage of unsafe code, this stub does not support inserting values in the formatted message.
            </para>
            </remarks>
            <returns>
                <para>
            If the function succeeds, the return value is the number of TCHARs stored in the output 
            buffer, excluding the terminating null character.
            </para>
                <para>
            If the function fails, the return value is zero. To get extended error information, 
            call <see cref="M:Marshal.GetLastWin32Error()" />.
            </para>
            </returns>
        </member>
        <member name="T:log4net.Util.NullDictionaryEnumerator">
            <summary>
            An always empty <see cref="T:System.Collections.IDictionaryEnumerator" />.
            </summary>
            <remarks>
                <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionaryEnumerator" /> over a collection
            that is empty and not modifiable.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.NullDictionaryEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
            <returns>The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.</returns>
            <remarks>
                <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Current">
            <summary>
            Gets the current object from the enumerator.
            </summary>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="M:log4net.Util.NullDictionaryEnumerator.MoveNext">
            <summary>
            Test if the enumerator can advance, if so advance.
            </summary>
            <returns>
                <c>false</c> as the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> cannot advance.</returns>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullDictionaryEnumerator.MoveNext" />
            will always return <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullDictionaryEnumerator.Reset">
            <summary>
            Resets the enumerator back to the start.
            </summary>
            <remarks>
                <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullDictionaryEnumerator.Reset" /> does nothing.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Key">
            <summary>
            Gets the current key from the enumerator.
            </summary>
            <remarks>
            Throws an exception because the <see cref="T:log4net.Util.NullDictionaryEnumerator" />
            never has a current value.
            </remarks>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Key" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Value">
            <summary>
            Gets the current value from the enumerator.
            </summary>
            <value>The current value from the enumerator.</value>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Value" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="P:log4net.Util.NullDictionaryEnumerator.Entry">
            <summary>
            Gets the current entry from the enumerator.
            </summary>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current entry.
            </remarks>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Entry" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="F:log4net.Util.NullDictionaryEnumerator.s_instance">
            <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
        </member>
        <member name="T:log4net.Util.NullEnumerator">
            <summary>
            An always empty <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <remarks>
                <para>
            A singleton implementation of the <see cref="T:System.Collections.IEnumerator" /> over a collection
            that is empty and not modifiable.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.NullEnumerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullEnumerator" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullEnumerator.Instance">
            <summary>
            Get the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
            <returns>The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.</returns>
            <remarks>
                <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.NullEnumerator.Current">
            <summary>
            Gets the current object from the enumerator.
            </summary>
            <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullEnumerator.Current" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
        </member>
        <member name="M:log4net.Util.NullEnumerator.MoveNext">
            <summary>
            Test if the enumerator can advance, if so advance
            </summary>
            <returns>
                <c>false</c> as the <see cref="T:log4net.Util.NullEnumerator" /> cannot advance.</returns>
            <remarks>
                <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullEnumerator.MoveNext" />
            will always return <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullEnumerator.Reset">
            <summary>
            Resets the enumerator back to the start.
            </summary>
            <remarks>
                <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullEnumerator.Reset" /> does nothing.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.NullEnumerator.s_instance">
            <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
        </member>
        <member name="T:log4net.Util.NullSecurityContext">
            <summary>
            A SecurityContext used when a SecurityContext is not required
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.Util.NullSecurityContext" /> is a no-op implementation of the
            <see cref="T:log4net.Core.SecurityContext" /> base class. It is used where a <see cref="T:log4net.Core.SecurityContext" />
            is required but one has not been provided.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.NullSecurityContext.Instance">
            <summary>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext" /></summary>
            <remarks>
                <para>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext" /></para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullSecurityContext.#ctor">
            <summary>
            Private constructor
            </summary>
            <remarks>
                <para>
            Private constructor for singleton pattern.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.NullSecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate this SecurityContext
            </summary>
            <param name="state">State supplied by the caller</param>
            <returns>
                <c>null</c>
            </returns>
            <remarks>
                <para>
            No impersonation is done and <c>null</c> is always returned.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.OnlyOnceErrorHandler">
            <summary>
            Implements log4net's default error handling policy which consists 
            of emitting a message for the first error in an appender and 
            ignoring all subsequent errors.
            </summary>
            <remarks>
                <para>
            The error message is processed using the LogLog sub-system by default.
            </para>
                <para>
            This policy aims at protecting an otherwise working application
            from being flooded with error messages when logging fails.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor">
            <summary>
            Default Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="prefix">The prefix to use for each message.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class
            with the specified prefix.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Reset">
            <summary>
            Reset the error handler back to its initial disabled state.
            </summary>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
            <summary>
            Log an Error
            </summary>
            <param name="message">The error message.</param>
            <param name="e">The exception.</param>
            <param name="errorCode">The internal error code.</param>
            <remarks>
                <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)" /> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset" /> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)">
            <summary>
            Log the very first error
            </summary>
            <param name="message">The error message.</param>
            <param name="e">The exception.</param>
            <param name="errorCode">The internal error code.</param>
            <remarks>
                <para>
            Sends the error information to <see cref="T:log4net.Util.LogLog" />'s Error method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception)">
            <summary>
            Log an Error
            </summary>
            <param name="message">The error message.</param>
            <param name="e">The exception.</param>
            <remarks>
                <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)" /> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset" /> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String)">
            <summary>
            Log an error
            </summary>
            <param name="message">The error message.</param>
            <remarks>
                <para>
            Invokes <see cref="M:log4net.Util.OnlyOnceErrorHandler.FirstError(System.String,System.Exception,log4net.Core.ErrorCode)" /> if and only if this is the first error or the first error after <see cref="M:log4net.Util.OnlyOnceErrorHandler.Reset" /> has been called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.IsEnabled">
            <summary>
            Is error logging enabled
            </summary>
            <remarks>
                <para>
            Is error logging enabled. Logging is only enabled for the
            first error delivered to the <see cref="T:log4net.Util.OnlyOnceErrorHandler" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.EnabledDate">
            <summary>
            The date the first error that trigged this error handler occurred, or <see cref="F:System.DateTime.MinValue" /> if it has not been triggered.
            </summary>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.EnabledDateUtc">
            <summary>
            The UTC date the first error that trigged this error handler occured, or <see cref="F:System.DateTime.MinValue" /> if it has not been triggered.
            </summary>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.ErrorMessage">
            <summary>
            The message from the first error that trigged this error handler.
            </summary>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.Exception">
            <summary>
            The exception from the first error that trigged this error handler.
            </summary>
            <remarks>
            May be <see langword="null" />.
            </remarks>
        </member>
        <member name="P:log4net.Util.OnlyOnceErrorHandler.ErrorCode">
            <summary>
            The error code from the first error that trigged this error handler.
            </summary>
            <remarks>
            Defaults to <see cref="F:log4net.Core.ErrorCode.GenericFailure" /></remarks>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_enabledDateUtc">
            <summary>
            The UTC date the error was recorded.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_firstTime">
            <summary>
            Flag to indicate if it is the first error
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_message">
            <summary>
            The message recorded during the first error.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_exception">
            <summary>
            The exception recorded during the first error.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_errorCode">
            <summary>
            The error code recorded during the first error.
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.m_prefix">
            <summary>
            String to prefix each message with
            </summary>
        </member>
        <member name="F:log4net.Util.OnlyOnceErrorHandler.declaringType">
            <summary>
            The fully qualified type of the OnlyOnceErrorHandler class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.OptionConverter">
            <summary>
            A convenience class to convert property values to specific types.
            </summary>
            <remarks>
                <para>
            Utility functions for converting types and parsing values.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.OptionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.OptionConverter" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ToBoolean(System.String,System.Boolean)">
            <summary>
            Converts a string to a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="argValue">String to convert.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="T:System.Boolean" /> value of <paramref name="argValue" />.</returns>
            <remarks>
                <para>
            If <paramref name="argValue" /> is "true", then <c>true</c> is returned. 
            If <paramref name="argValue" /> is "false", then <c>false</c> is returned. 
            Otherwise, <paramref name="defaultValue" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ToFileSize(System.String,System.Int64)">
            <summary>
            Parses a file size into a number.
            </summary>
            <param name="argValue">String to parse.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The <see cref="T:System.Int64" /> value of <paramref name="argValue" />.</returns>
            <remarks>
                <para>
            Parses a file size of the form: number[KB|MB|GB] into a
            long value. It is scaled with the appropriate multiplier.
            </para>
                <para>
                    <paramref name="defaultValue" /> is returned when <paramref name="argValue" />
            cannot be converted to a <see cref="T:System.Int64" /> value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ConvertStringTo(System.Type,System.String)">
            <summary>
            Converts a string to an object.
            </summary>
            <param name="target">The target type to convert to.</param>
            <param name="txt">The string to convert to an object.</param>
            <returns>
            The object converted from a string or <c>null</c> when the 
            conversion failed.
            </returns>
            <remarks>
                <para>
            Converts a string to an object. Uses the converter registry to try
            to convert the string value into the specified target type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.CanConvertTypeTo(System.Type,System.Type)">
            <summary>
            Checks if there is an appropriate type conversion from the source type to the target type.
            </summary>
            <param name="sourceType">The type to convert from.</param>
            <param name="targetType">The type to convert to.</param>
            <returns>
                <c>true</c> if there is a conversion from the source type to the target type.</returns>
            <remarks>
            Checks if there is an appropriate type conversion from the source type to the target type.
            <para></para></remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ConvertTypeTo(System.Object,System.Type)">
            <summary>
            Converts an object to the target type.
            </summary>
            <param name="sourceInstance">The object to convert to the target type.</param>
            <param name="targetType">The type to convert to.</param>
            <returns>The converted object.</returns>
            <remarks>
                <para>
            Converts an object to the target type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
            <summary>
            Instantiates an object given a class name.
            </summary>
            <param name="className">The fully qualified class name of the object to instantiate.</param>
            <param name="superClass">The class to which the new object should belong.</param>
            <param name="defaultValue">The object to return in case of non-fulfillment.</param>
            <returns>
            An instance of the <paramref name="className" /> or <paramref name="defaultValue" />
            if the object could not be instantiated.
            </returns>
            <remarks>
                <para>
            Checks that the <paramref name="className" /> is a subclass of
            <paramref name="superClass" />. If that test fails or the object could
            not be instantiated, then <paramref name="defaultValue" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.SubstituteVariables(System.String,System.Collections.IDictionary)">
            <summary>
            Performs variable substitution in string <paramref name="value" /> from the 
            values of keys found in <paramref name="props" />.
            </summary>
            <param name="value">The string on which variable substitution is performed.</param>
            <param name="props">The dictionary to use to lookup variables.</param>
            <returns>The result of the substitutions.</returns>
            <remarks>
                <para>
            The variable substitution delimiters are <b>${</b> and <b>}</b>.
            </para>
                <para>
            For example, if props contains <c>key=value</c>, then the call
            </para>
                <para>
                    <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of key is ${key}.");
            </code>
                </para>
                <para>
            will set the variable <c>s</c> to "Value of key is value.".
            </para>
                <para>
            If no value could be found for the specified key, then substitution 
            defaults to an empty string.
            </para>
                <para>
            For example, if system properties contains no value for the key
            "nonExistentKey", then the call
            </para>
                <para>
                    <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of nonExistentKey is [${nonExistentKey}]");
            </code>
                </para>
                <para>
            will set <s>s</s> to "Value of nonExistentKey is []".	 
            </para>
                <para>
            An Exception is thrown if <paramref name="value" /> contains a start 
            delimiter "${" which is not balanced by a stop delimiter "}". 
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.OptionConverter.ParseEnum(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or 
            more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">The type to convert to.</param>
            <param name="value">The enum string value.</param>
            <param name="ignoreCase">If <c>true</c>, ignore case; otherwise, regard case.</param>
            <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
        </member>
        <member name="F:log4net.Util.OptionConverter.declaringType">
            <summary>
            The fully qualified type of the OptionConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternConverter">
            <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
            <remarks>
                <para>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.PatternConverter.#ctor">
            <summary>
            Protected constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternConverter" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.Next">
            <summary>
            Get the next pattern converter in the chain
            </summary>
            <value>
            the next pattern converter in the chain
            </value>
            <remarks>
                <para>
            Get the next pattern converter in the chain
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.FormattingInfo">
            <summary>
            Gets or sets the formatting info for this converter
            </summary>
            <value>
            The formatting info for this converter
            </value>
            <remarks>
                <para>
            Gets or sets the formatting info for this converter
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.Option">
            <summary>
            Gets or sets the option value for this converter
            </summary>
            <summary>
            The option for this converter
            </summary>
            <remarks>
                <para>
            Gets or sets the option value for this converter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Evaluate this pattern converter and write the output to a writer.
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">The state object on which the pattern converter should be executed.</param>
            <remarks>
                <para>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the appropriate way.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.SetNext(log4net.Util.PatternConverter)">
            <summary>
            Set the next pattern converter in the chains
            </summary>
            <param name="patternConverter">the pattern converter that should follow this converter in the chain</param>
            <returns>the next converter</returns>
            <remarks>
                <para>
            The PatternConverter can merge with its neighbor during this method (or a sub class).
            Therefore the return value may or may not be the value of the argument passed in.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.Format(System.IO.TextWriter,System.Object)">
            <summary>
            Write the pattern converter to the writer with appropriate formatting
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">The state object on which the pattern converter should be executed.</param>
            <remarks>
                <para>
            This method calls <see cref="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)" /> to allow the subclass to perform
            appropriate conversion of the pattern converter. If formatting options have
            been specified via the <see cref="P:log4net.Util.PatternConverter.FormattingInfo" /> then this method will
            apply those formattings before writing the output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.SpacePad(System.IO.TextWriter,System.Int32)">
            <summary>
            Fast space padding method.
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> to which the spaces will be appended.</param>
            <param name="length">The number of spaces to be padded.</param>
            <remarks>
                <para>
            Fast space padding method.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternConverter.m_option">
            <summary>
            The option string to the converter
            </summary>
        </member>
        <member name="F:log4net.Util.PatternConverter.c_renderBufferSize">
            <summary>
            Initial buffer size
            </summary>
        </member>
        <member name="F:log4net.Util.PatternConverter.c_renderBufferMaxCapacity">
            <summary>
            Maximum buffer size before it is recycled
            </summary>
        </member>
        <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionary)">
            <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter" /></summary>
            <param name="writer">the writer to write to</param>
            <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
            <param name="value">the value to write to the writer</param>
            <remarks>
                <para>
            Writes the <see cref="T:System.Collections.IDictionary" /> to a writer in the form:
            </para>
                <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
                <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionaryEnumerator)">
            <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter" /></summary>
            <param name="writer">the writer to write to</param>
            <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
            <param name="value">the value to write to the writer</param>
            <remarks>
                <para>
            Writes the <see cref="T:System.Collections.IDictionaryEnumerator" /> to a writer in the form:
            </para>
                <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
                <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternConverter.WriteObject(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Object)">
            <summary>
            Write an object to a <see cref="T:System.IO.TextWriter" /></summary>
            <param name="writer">the writer to write to</param>
            <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
            <param name="value">the value to write to the writer</param>
            <remarks>
                <para>
            Writes the Object to a writer. If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the object to text, otherwise
            the object's ToString method is called.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternConverter.Properties">
            <summary></summary>
        </member>
        <member name="T:log4net.Util.PatternParser">
            <summary>
            Most of the work of the <see cref="T:log4net.Layout.PatternLayout" /> class
            is delegated to the PatternParser class.
            </summary>
            <remarks>
                <para>
            The <c>PatternParser</c> processes a pattern string and
            returns a chain of <see cref="T:log4net.Util.PatternConverter" /> objects.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.PatternParser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pattern">The pattern to parse.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternParser" /> class 
            with the specified pattern string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.Parse">
            <summary>
            Parses the pattern into a chain of pattern converters.
            </summary>
            <returns>The head of a chain of pattern converters.</returns>
            <remarks>
                <para>
            Parses the pattern into a chain of pattern converters.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternParser.PatternConverters">
            <summary>
            Get the converter registry used by this parser
            </summary>
            <value>
            The converter registry used by this parser
            </value>
            <remarks>
                <para>
            Get the converter registry used by this parser
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.BuildCache">
            <summary>
            Build the unified cache of converters from the static and instance maps
            </summary>
            <returns>the list of all the converter names</returns>
            <remarks>
                <para>
            Build the unified cache of converters from the static and instance maps
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternParser.StringLengthComparer">
            <summary>
            Sort strings by length
            </summary>
            <remarks>
                <para>
                    <see cref="T:System.Collections.IComparer" /> that orders strings by string length.
            The longest strings are placed first
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.ParseInternal(System.String,System.String[])">
            <summary>
            Internal method to parse the specified pattern to find specified matches
            </summary>
            <param name="pattern">the pattern to parse</param>
            <param name="matches">the converter names to match in the pattern</param>
            <remarks>
                <para>
            The matches param must be sorted such that longer strings come before shorter ones.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternParser.ProcessLiteral(System.String)">
            <summary>
            Process a parsed literal
            </summary>
            <param name="text">the literal text</param>
        </member>
        <member name="M:log4net.Util.PatternParser.ProcessConverter(System.String,System.String,log4net.Util.FormattingInfo)">
            <summary>
            Process a parsed converter pattern
            </summary>
            <param name="converterName">the name of the converter</param>
            <param name="option">the optional option for the converter</param>
            <param name="formattingInfo">the formatting info for the converter</param>
        </member>
        <member name="M:log4net.Util.PatternParser.AddConverter(log4net.Util.PatternConverter)">
            <summary>
            Resets the internal state of the parser and adds the specified pattern converter 
            to the chain.
            </summary>
            <param name="pc">The pattern converter to add.</param>
        </member>
        <member name="F:log4net.Util.PatternParser.m_head">
            <summary>
            The first pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.Util.PatternParser.m_tail">
            <summary>
             the last pattern converter in the chain
            </summary>
        </member>
        <member name="F:log4net.Util.PatternParser.m_pattern">
            <summary>
            The pattern
            </summary>
        </member>
        <member name="F:log4net.Util.PatternParser.m_patternConverters">
            <summary>
            Internal map of converter identifiers to converter types
            </summary>
            <remarks>
                <para>
            This map overrides the static s_globalRulesRegistry map.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternParser.declaringType">
            <summary>
            The fully qualified type of the PatternParser class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternString">
            <summary>
            This class implements a patterned string.
            </summary>
            <remarks>
                <para>
            This string has embedded patterns that are resolved and expanded
            when the string is formatted.
            </para>
                <para>
            This class functions similarly to the <see cref="T:log4net.Layout.PatternLayout" />
            in that it accepts a pattern and renders it to a string. Unlike the 
            <see cref="T:log4net.Layout.PatternLayout" /> however the <c>PatternString</c>
            does not render the properties of a specific <see cref="T:log4net.Core.LoggingEvent" /> but
            of the process in general.
            </para>
                <para>
            The recognized conversion pattern names are:
            </para>
                <list type="table">
                    <listheader>
                        <term>Conversion Pattern Name</term>
                        <description>Effect</description>
                    </listheader>
                    <item>
                        <term>appdomain</term>
                        <description>
                            <para>
                        Used to output the friendly name of the current AppDomain.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>appsetting</term>
                        <description>
                            <para>
                        Used to output the value of a specific appSetting key in the application
                        configuration file.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>date</term>
                        <description>
                            <para>
            			Used to output the current date and time in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
                            <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
                            <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
                            <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>env</term>
                        <description>
                            <para>
            			Used to output the a specific environment variable. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%env{COMPUTERNAME}</b> would include the value
            			of the <c>COMPUTERNAME</c> environment variable.
                        </para>
                            <para>
                        The <c>env</c> pattern is not supported on the .NET Compact Framework.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>identity</term>
                        <description>
                            <para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>newline</term>
                        <description>
                            <para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
                            <para>
            			This conversion pattern name offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>processid</term>
                        <description>
                            <para>
            			Used to output the system process ID for the current process.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>property</term>
                        <description>
                            <para>
            			Used to output a specific context property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are stored in logging contexts. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
                            <para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
                            <para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
                            <list type="definition">
                                <item>
                                    <term>the thread properties</term>
                                    <description>
            					The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
                                </item>
                                <item>
                                    <term>the global properties</term>
                                    <description>
            					The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>random</term>
                        <description>
                            <para>
                        Used to output a random string of characters. The string is made up of
                        uppercase letters and numbers. By default the string is 4 characters long.
                        The length of the string can be specified within braces directly following the
            			pattern specifier, e.g. <b>%random{8}</b> would output an 8 character string.
                        </para>
                        </description>
                    </item>
                    <item>
                        <term>username</term>
                        <description>
                            <para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>utcdate</term>
                        <description>
                            <para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
                            <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:DateTime.ToString(string)" />.
            			</para>
                            <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
                            <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:DateTime.ToString(string)" />.
            			</para>
                        </description>
                    </item>
                    <item>
                        <term>%</term>
                        <description>
                            <para>
            			The sequence %% outputs a single percent sign.
            			</para>
                        </description>
                    </item>
                </list>
                <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Util.PatternString" />
            instance using <see cref="M:AddConverter(ConverterInfo)" /> or
            <see cref="M:AddConverter(string, Type)" />.
            </para>
                <para>
            See the <see cref="T:log4net.Layout.PatternLayout" /> for details on the 
            <i>format modifiers</i> supported by the patterns.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.PatternString.s_globalRulesRegistry">
            <summary>
            Internal map of converter identifiers to converter types.
            </summary>
        </member>
        <member name="F:log4net.Util.PatternString.m_pattern">
            <summary>
            the pattern
            </summary>
        </member>
        <member name="F:log4net.Util.PatternString.m_head">
            <summary>
            the head of the pattern converter chain
            </summary>
        </member>
        <member name="F:log4net.Util.PatternString.m_instanceRulesRegistry">
            <summary>
            patterns defined on this PatternString only
            </summary>
        </member>
        <member name="M:log4net.Util.PatternString.#cctor">
            <summary>
            Initialize the global registry
            </summary>
        </member>
        <member name="M:log4net.Util.PatternString.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString" /></para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.#ctor(System.String)">
            <summary>
            Constructs a PatternString
            </summary>
            <param name="pattern">The pattern to use with this PatternString</param>
            <remarks>
                <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString" /> with the pattern specified.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PatternString.ConversionPattern">
            <summary>
            Gets or sets the pattern formatting string
            </summary>
            <value>
            The pattern formatting string
            </value>
            <remarks>
                <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.ActivateOptions">
            <summary>
            Initialize object options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternString.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternString.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternString.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.CreatePatternParser(System.String)">
            <summary>
            Create the <see cref="T:log4net.Util.PatternParser" /> used to parse the pattern
            </summary>
            <param name="pattern">the pattern to parse</param>
            <returns>The <see cref="T:log4net.Util.PatternParser" /></returns>
            <remarks>
                <para>
            Returns PatternParser used to parse the conversion string. Subclasses
            may override this to return a subclass of PatternParser which recognize
            custom conversion pattern name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.Format(System.IO.TextWriter)">
            <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
            <param name="writer">The TextWriter to write the formatted event to</param>
            <remarks>
                <para>
            Format the pattern to the <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.Format">
            <summary>
            Format the pattern as a string
            </summary>
            <returns>the pattern formatted as a string</returns>
            <remarks>
                <para>
            Format the pattern to a string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.AddConverter(log4net.Util.ConverterInfo)">
            <summary>
            Add a converter to this PatternString
            </summary>
            <param name="converterInfo">the converter info</param>
            <remarks>
                <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:AddConverter(string,Type)" /> method.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternString.AddConverter(System.String,System.Type)">
            <summary>
            Add a converter to this PatternString
            </summary>
            <param name="name">the name of the conversion pattern for this converter</param>
            <param name="type">the type of the converter</param>
            <remarks>
                <para>
            Add a converter to this PatternString
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.AppDomainPatternConverter">
            <summary>
            Write the name of the current AppDomain to the output
            </summary>
            <remarks>
                <para>
            Write the name of the current AppDomain to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.AppDomainPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the name of the current AppDomain to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Writes name of the current AppDomain to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.AppSettingPatternConverter">
            <summary>
            AppSetting pattern converter
            </summary>
            <remarks>
                <para>
            This pattern converter reads appSettings from the application configuration file.
            </para>
                <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is specified then that will be used to
            lookup a single appSettings value. If no <see cref="P:log4net.Util.PatternConverter.Option" /> is specified
            then all appSettings will be dumped as a list of key value pairs.
            </para>
                <para>
            A typical use is to specify a base directory for log files, e.g.
            <example><![CDATA[
            <log4net>
               <appender name="MyAppender" type="log4net.Appender.RollingFileAppender">
                 <file type="log4net.Util.PatternString" value="appsetting{LogDirectory}MyApp.log"/>
                  ...
              </appender>
            </log4net>
            ]]></example></para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.AppSettingPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the property value to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
                <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.DatePatternConverter">
            <summary>
            Write the current date to the output
            </summary>
            <remarks>
                <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the current date and time to the writer as a string.
            </para>
                <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition"><listheader><term>Option value</term><description>Output</description></listheader><item><term>ISO8601</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description></item><item><term>DATE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description></item><item><term>ABSOLUTE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" /> formatter. 
            		Formats using the <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            		</description></item><item><term>other</term><description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime" /><see cref="M:DateTime.ToString(string)" /> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description></item></list></para>
                <para>
            The date and time is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.m_dateFormatter">
            <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </summary>
            <remarks>
                <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current date to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
                <para>
            The date and time passed is in the local time zone.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the DatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter">
            <summary>
            Write an <see cref="T:System.Environment.SpecialFolder" /> folder path to the output
            </summary>
            <remarks>
                <para>
            Write an special path environment folder path to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the name of the variable to output. <see cref="P:log4net.Util.PatternConverter.Option" />
            should be a value in the <see cref="T:System.Environment.SpecialFolder" /> enumeration.
            </para>
            </remarks>
            <author>Ron Grabowski</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write an special path environment folder path to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Writes the special path environment folder path to the output <paramref name="writer" />.
            The name of the special path environment folder path to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.EnvironmentFolderPathPatternConverter.declaringType">
            <summary>
            The fully qualified type of the EnvironmentFolderPathPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.EnvironmentPatternConverter">
            <summary>
            Write an environment variable to the output
            </summary>
            <remarks>
                <para>
            Write an environment variable to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the name of the variable to output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write an environment variable to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Writes the environment variable to the output <paramref name="writer" />.
            The name of the environment variable to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.declaringType">
            <summary>
            The fully qualified type of the EnvironmentPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.IdentityPatternConverter">
            <summary>
            Write the current thread identity to the output
            </summary>
            <remarks>
                <para>
            Write the current thread identity to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.IdentityPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current thread identity to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Writes the current thread identity to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.IdentityPatternConverter.declaringType">
            <summary>
            The fully qualified type of the IdentityPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.LiteralPatternConverter">
            <summary>
            Pattern converter for literal string instances in the pattern
            </summary>
            <remarks>
                <para>
            Writes the literal string value specified in the 
            <see cref="P:log4net.Util.PatternConverter.Option" /> property to 
            the output.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.SetNext(log4net.Util.PatternConverter)">
            <summary>
            Set the next converter in the chain
            </summary>
            <param name="pc">The next pattern converter in the chain</param>
            <returns>The next pattern converter</returns>
            <remarks>
                <para>
            Special case the building of the pattern converter chain
            for <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter" /> instances. Two adjacent
            literals in the pattern can be represented by a single combined
            pattern converter. This implementation detects when a 
            <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter" /> is added to the chain
            after this converter and combines its value with this converter's
            literal value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Format(System.IO.TextWriter,System.Object)">
            <summary>
            Write the literal to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, not set</param>
            <remarks>
                <para>
            Override the formatting behavior to ignore the FormattingInfo
            because we have a literal instead.
            </para>
                <para>
            Writes the value of <see cref="P:log4net.Util.PatternConverter.Option" />
            to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Convert this pattern into the rendered message
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, not set</param>
            <remarks>
                <para>
            This method is not used.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.NewLinePatternConverter">
            <summary>
            Writes a newline to the output
            </summary>
            <remarks>
                <para>
            Writes the system dependent line terminator to the output.
            This behavior can be overridden by setting the <see cref="P:log4net.Util.PatternConverter.Option" />:
            </para>
                <list type="definition">
                    <listheader>
                        <term>Option Value</term>
                        <description>Output</description>
                    </listheader>
                    <item>
                        <term>DOS</term>
                        <description>DOS or Windows line terminator <c>"\r\n"</c></description>
                    </item>
                    <item>
                        <term>UNIX</term>
                        <description>UNIX line terminator <c>"\n"</c></description>
                    </item>
                </list>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions">
            <summary>
            Initialize the converter
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.ProcessIdPatternConverter">
            <summary>
            Write the current process ID to the output
            </summary>
            <remarks>
                <para>
            Write the current process ID to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current process ID to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Write the current process ID to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.declaringType">
            <summary>
            The fully qualified type of the ProcessIdPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.PropertyPatternConverter">
            <summary>
            Property pattern converter
            </summary>
            <remarks>
                <para>
            This pattern converter reads the thread and global properties.
            The thread properties take priority over global properties.
            See <see cref="P:log4net.ThreadContext.Properties" /> for details of the 
            thread properties. See <see cref="P:log4net.GlobalContext.Properties" /> for
            details of the global properties.
            </para>
                <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is specified then that will be used to
            lookup a single property. If no <see cref="P:log4net.Util.PatternConverter.Option" /> is specified
            then all properties will be dumped as a list of key value pairs.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.PropertyPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the property value to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
                <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.RandomStringPatternConverter">
            <summary>
            A Pattern converter that generates a string of random characters
            </summary>
            <remarks>
                <para>
            The converter generates a string of random characters. By default
            the string is length 4. This can be changed by setting the <see cref="P:log4net.Util.PatternConverter.Option" />
            to the string value of the length required.
            </para>
                <para>
            The random characters in the string are limited to uppercase letters
            and numbers only.
            </para>
                <para>
            The random number generator used by this class is not cryptographically secure.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.s_random">
            <summary>
            Shared random number generator
            </summary>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.m_length">
            <summary>
            Length of random string to generate. Default length 4.
            </summary>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions">
            <summary>
            Initialize the converter options
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write a randoim string to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Write a randoim string to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.declaringType">
            <summary>
            The fully qualified type of the RandomStringPatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.UserNamePatternConverter">
            <summary>
            Write the current threads username to the output
            </summary>
            <remarks>
                <para>
            Write the current threads username to the output writer
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.UserNamePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current threads username to the output
            </summary>
            <param name="writer">the writer to write to</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Write the current threads username to the output <paramref name="writer" />.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.PatternStringConverters.UserNamePatternConverter.declaringType">
            <summary>
            The fully qualified type of the UserNamePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter">
            <summary>
            Write the UTC date time to the output
            </summary>
            <remarks>
                <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the current date and time in Universal time.
            </para>
                <para>
            See the <see cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" /> for details on the date pattern syntax.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.PatternStringConverters.UtcDatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            Write the current date and time to the output
            </summary>
            <param name="writer">
                <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
            <param name="state">null, state is not set</param>
            <remarks>
                <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
                <para>
            The date is in Universal time when it is rendered.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" />
        </member>
        <member name="F:log4net.Util.PatternStringConverters.UtcDatePatternConverter.declaringType">
            <summary>
            The fully qualified type of the UtcDatePatternConverter class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.PropertiesDictionary">
            <summary>
            String keyed object map.
            </summary>
            <remarks>
                <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="propertiesDictionary">properties to copy</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class 
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
                <para>
            Because this class is sealed the serialization constructor is private.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
            <value>
            The value of the property with the specified key.
            </value>
            <param name="key">The key of the property to get or set.</param>
            <remarks>
                <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.Remove(System.String)">
            <summary>
            Remove the entry with the specified key from this dictionary
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
                <para>
            Remove the entry with the specified key from this dictionary
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IDictionary.GetEnumerator" /></summary>
            <returns>an enumerator</returns>
            <remarks>
                <para>
            Returns a <see cref="T:System.Collections.IDictionaryEnumerator" /> over the contest of this collection.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Remove(System.Object)" /></summary>
            <param name="key">the key to remove</param>
            <remarks>
                <para>
            Remove the entry with the specified key from this dictionary
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Contains(System.Object)" /></summary>
            <param name="key">the key to lookup in the collection</param>
            <returns>
                <c>true</c> if the collection contains the specified key</returns>
            <remarks>
                <para>
            Test if this collection contains a specified key.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.Clear">
            <summary>
            Remove all properties from the properties collection
            </summary>
            <remarks>
                <para>
            Remove all properties from the properties collection
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /></summary>
            <param name="key">the key</param>
            <param name="value">the value to store for the key</param>
            <remarks>
                <para>
            Store a value for the specified <see cref="T:System.String" /><paramref name="key" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="key" /> is not a string</exception>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsReadOnly" /></summary>
            <value>
                <c>false</c>
            </value>
            <remarks>
                <para>
            This collection is modifiable. This property always
            returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Item(System.Object)" /></summary>
            <value>
            The value for the key specified.
            </value>
            <remarks>
                <para>
            Get or set a value for the specified <see cref="T:System.String" /><paramref name="key" />.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="key" /> is not a string</exception>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Values">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Values" /></summary>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#Keys">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Keys" /></summary>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsFixedSize" /></summary>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /></summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized" /></summary>
        </member>
        <member name="P:log4net.Util.PropertiesDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot" /></summary>
        </member>
        <member name="M:log4net.Util.PropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator" /></summary>
        </member>
        <member name="T:log4net.Util.PropertyEntry">
            <summary>
            A class to hold the key and data for a property set in the config file
            </summary>
            <remarks>
                <para>
            A class to hold the key and data for a property set in the config file
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertyEntry.Key">
            <summary>
            Property Key
            </summary>
            <value>
            Property Key
            </value>
            <remarks>
                <para>
            Property Key.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.PropertyEntry.Value">
            <summary>
            Property Value
            </summary>
            <value>
            Property Value
            </value>
            <remarks>
                <para>
            Property Value.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.PropertyEntry.ToString">
            <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
            <returns>string info about this object</returns>
        </member>
        <member name="T:log4net.Util.ProtectCloseTextWriter">
            <summary>
            A <see cref="T:System.IO.TextWriter" /> that ignores the <see cref="M:log4net.Util.ProtectCloseTextWriter.Close" /> message
            </summary>
            <remarks>
                <para>
            This writer is used in special cases where it is necessary 
            to protect a writer from being closed by a client.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ProtectCloseTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer">the writer to actually write to</param>
            <remarks>
                <para>
            Create a new ProtectCloseTextWriter using a writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ProtectCloseTextWriter.Attach(System.IO.TextWriter)">
            <summary>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter" /></summary>
            <param name="writer">the writer to attach to</param>
            <remarks>
                <para>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter" /></para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ProtectCloseTextWriter.Close">
            <summary>
            Does not close the underlying output writer.
            </summary>
            <remarks>
                <para>
            Does not close the underlying output writer.
            This method does nothing.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.QuietTextWriter">
            <summary>
                <see cref="T:System.IO.TextWriter" /> that does not leak exceptions
            </summary>
            <remarks>
                <para>
                    <see cref="T:log4net.Util.QuietTextWriter" /> does not throw exceptions when things go wrong. 
            Instead, it delegates error handling to its <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
            <summary>
            Constructor
            </summary>
            <param name="writer">the writer to actually write to</param>
            <param name="errorHandler">the error handler to report error to</param>
            <remarks>
                <para>
            Create a new QuietTextWriter using a writer and error handler
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.QuietTextWriter.ErrorHandler">
            <summary>
            Gets or sets the error handler that all errors are passed to.
            </summary>
            <value>
            The error handler that all errors are passed to.
            </value>
            <remarks>
                <para>
            Gets or sets the error handler that all errors are passed to.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.QuietTextWriter.Closed">
            <summary>
            Gets a value indicating whether this writer is closed.
            </summary>
            <value>
                <c>true</c> if this writer is closed, otherwise <c>false</c>.
            </value>
            <remarks>
                <para>
            Gets a value indicating whether this writer is closed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the underlying writer
            </summary>
            <param name="value">the char to write</param>
            <remarks>
                <para>
            Writes a character to the underlying writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a buffer to the underlying writer
            </summary>
            <param name="buffer">the buffer to write</param>
            <param name="index">the start index to write from</param>
            <param name="count">the number of characters to write</param>
            <remarks>
                <para>
            Writes a buffer to the underlying writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Write(System.String)">
            <summary>
            Writes a string to the output.
            </summary>
            <param name="value">The string data to write to the output.</param>
            <remarks>
                <para>
            Writes a string to the output.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.QuietTextWriter.Close">
            <summary>
            Closes the underlying output writer.
            </summary>
            <remarks>
                <para>
            Closes the underlying output writer.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.QuietTextWriter.m_errorHandler">
            <summary>
            The error handler instance to pass all errors to
            </summary>
        </member>
        <member name="F:log4net.Util.QuietTextWriter.m_closed">
            <summary>
            Flag to indicate if this writer is closed
            </summary>
        </member>
        <member name="T:log4net.Util.ReaderWriterLock">
            <summary>
            Defines a lock that supports single writers and multiple readers
            </summary>
            <remarks>
                <para>
                    <c>ReaderWriterLock</c> is used to synchronize access to a resource. 
            At any given time, it allows either concurrent read access for 
            multiple threads, or write access for a single thread. In a 
            situation where a resource is changed infrequently, a 
            <c>ReaderWriterLock</c> provides better throughput than a simple 
            one-at-a-time lock, such as <see cref="T:System.Threading.Monitor" />.
            </para>
                <para>
            If a platform does not support a <c>System.Threading.ReaderWriterLock</c> 
            implementation then all readers and writers are serialized. Therefore 
            the caller must not rely on multiple simultaneous readers.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReaderWriterLock" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.AcquireReaderLock">
            <summary>
            Acquires a reader lock
            </summary>
            <remarks>
                <para>
                    <see cref="M:log4net.Util.ReaderWriterLock.AcquireReaderLock" /> blocks if a different thread has the writer 
            lock, or if at least one thread is waiting for the writer lock.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock">
            <summary>
            Decrements the lock count
            </summary>
            <remarks>
                <para>
                    <see cref="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock" /> decrements the lock count. When the count 
            reaches zero, the lock is released.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.AcquireWriterLock">
            <summary>
            Acquires the writer lock
            </summary>
            <remarks>
                <para>
            This method blocks if another thread has a reader lock or writer lock.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReaderWriterLock.ReleaseWriterLock">
            <summary>
            Decrements the lock count on the writer lock
            </summary>
            <remarks>
                <para>
            ReleaseWriterLock decrements the writer lock count. 
            When the count reaches zero, the writer lock is released.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ReadOnlyPropertiesDictionary">
            <summary>
            String keyed object map that is read only.
            </summary>
            <remarks>
                <para>
            This collection is readonly and cannot be modified.
            </para>
                <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Util.ReadOnlyPropertiesDictionary.m_hashtable">
            <summary>
            The Hashtable used to store the properties data
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            Copy Constructor
            </summary>
            <param name="propertiesDictionary">properties to copy</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetKeys">
            <summary>
            Gets the key names.
            </summary>
            <returns>An array of all the keys.</returns>
            <remarks>
                <para>
            Gets the key names.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
            <value>
            The value of the property with the specified key.
            </value>
            <param name="key">The key of the property to get or set.</param>
            <remarks>
                <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Contains(System.String)">
            <summary>
            Test if the dictionary contains a specified key
            </summary>
            <param name="key">the key to look for</param>
            <returns>true if the dictionary contains the specified key</returns>
            <remarks>
                <para>
            Test if the dictionary contains a specified key
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.InnerHashtable">
            <summary>
            The hashtable used to store the properties
            </summary>
            <value>
            The internal collection used to store the properties
            </value>
            <remarks>
                <para>
            The hashtable used to store the properties
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
            <remarks>
                <para>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IDictionary.GetEnumerator" /></summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Remove(System.Object)" /></summary>
            <param name="key"></param>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Contains(System.Object)" /></summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Clear">
            <summary>
            Remove all properties from the properties collection
            </summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /></summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsReadOnly" /></summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Item(System.Object)" /></summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Values">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Values" /></summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Keys">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Keys" /></summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsFixedSize" /></summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /></summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized" /></summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Count">
            <summary>
            The number of properties in this collection
            </summary>
        </member>
        <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot" /></summary>
        </member>
        <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator" /></summary>
        </member>
        <member name="T:log4net.Util.ReusableStringWriter">
            <summary>
            A <see cref="T:System.IO.StringWriter" /> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)" /> and reused
            </summary>
            <remarks>
                <para>
            A <see cref="T:System.IO.StringWriter" /> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)" /> and reused.
            This uses a single buffer for string operations.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ReusableStringWriter.#ctor(System.IFormatProvider)">
            <summary>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter" /></summary>
            <param name="formatProvider">the format provider to use</param>
            <remarks>
                <para>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter" /></para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReusableStringWriter.Dispose(System.Boolean)">
            <summary>
            Override Dispose to prevent closing of writer
            </summary>
            <param name="disposing">flag</param>
            <remarks>
                <para>
            Override Dispose to prevent closing of writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)">
            <summary>
            Reset this string writer so that it can be reused.
            </summary>
            <param name="maxCapacity">the maximum buffer capacity before it is trimmed</param>
            <param name="defaultSize">the default size to make the buffer</param>
            <remarks>
                <para>
            Reset this string writer so that it can be reused.
            The internal buffers are cleared and reset.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.SystemInfo">
            <summary>
            Utility class for system specific information.
            </summary>
            <remarks>
                <para>
            Utility class of static methods for system specific information.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Alexey Solofnenko</author>
        </member>
        <member name="M:log4net.Util.SystemInfo.#ctor">
            <summary>
            Private constructor to prevent instances.
            </summary>
            <remarks>
                <para>
            Only static methods are exposed from this type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.#cctor">
            <summary>
            Initialize default values for private static fields.
            </summary>
            <remarks>
                <para>
            Only static methods are exposed from this type.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.NewLine">
            <summary>
            Gets the system dependent line terminator.
            </summary>
            <value>
            The system dependent line terminator.
            </value>
            <remarks>
                <para>
            Gets the system dependent line terminator.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ApplicationBaseDirectory">
            <summary>
            Gets the base directory for this <see cref="T:System.AppDomain" />.
            </summary>
            <value>The base directory path for the current <see cref="T:System.AppDomain" />.</value>
            <remarks>
                <para>
            Gets the base directory for this <see cref="T:System.AppDomain" />.
            </para>
                <para>
            The value returned may be either a local file path or a URI.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ConfigurationFileLocation">
            <summary>
            Gets the path to the configuration file for the current <see cref="T:System.AppDomain" />.
            </summary>
            <value>The path to the configuration file for the current <see cref="T:System.AppDomain" />.</value>
            <remarks>
                <para>
            The .NET Compact Framework 1.0 does not have a concept of a configuration
            file. For this runtime, we use the entry assembly location as the root for
            the configuration file name.
            </para>
                <para>
            The value returned may be either a local file path or a URI.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.EntryAssemblyLocation">
            <summary>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain" />.
            </summary>
            <value>The path to the entry assembly.</value>
            <remarks>
                <para>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.CurrentThreadId">
            <summary>
            Gets the ID of the current thread.
            </summary>
            <value>The ID of the current thread.</value>
            <remarks>
                <para>
            On the .NET framework, the <c>AppDomain.GetCurrentThreadId</c> method
            is used to obtain the thread ID for the current thread. This is the 
            operating system ID for the thread.
            </para>
                <para>
            On the .NET Compact Framework 1.0 it is not possible to get the 
            operating system thread ID for the current thread. The native method 
            <c>GetCurrentThreadId</c> is implemented inline in a header file
            and cannot be called.
            </para>
                <para>
            On the .NET Framework 2.0 the <c>Thread.ManagedThreadId</c> is used as this
            gives a stable id unrelated to the operating system thread ID which may 
            change if the runtime is using fibers.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.HostName">
            <summary>
            Get the host name or machine name for the current machine
            </summary>
            <value>
            The hostname or machine name
            </value>
            <remarks>
                <para>
            Get the host name or machine name for the current machine
            </para>
                <para>
            The host name (<see cref="M:System.Net.Dns.GetHostName" />) or
            the machine name (<c>Environment.MachineName</c>) for
            the current machine, or if neither of these are available
            then <c>NOT AVAILABLE</c> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ApplicationFriendlyName">
            <summary>
            Get this application's friendly name
            </summary>
            <value>
            The friendly name of this application as a string
            </value>
            <remarks>
                <para>
            If available the name of the application is retrieved from
            the <c>AppDomain</c> using <c>AppDomain.CurrentDomain.FriendlyName</c>.
            </para>
                <para>
            Otherwise the file name of the entry assembly is used.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ProcessStartTime">
            <summary>
            Get the start time for the current process.
            </summary>
            <remarks>
                <para>
            This is the time at which the log4net library was loaded into the
            AppDomain. Due to reports of a hang in the call to <c>System.Diagnostics.Process.StartTime</c>
            this is not the start time for the current process.
            </para>
                <para>
            The log4net library should be loaded by an application early during its
            startup, therefore this start time should be a good approximation for
            the actual start time.
            </para>
                <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating, however this start time
            will be set per AppDomain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.ProcessStartTimeUtc">
            <summary>
            Get the UTC start time for the current process.
            </summary>
            <remarks>
                <para>
            This is the UTC time at which the log4net library was loaded into the
            AppDomain. Due to reports of a hang in the call to <c>System.Diagnostics.Process.StartTime</c>
            this is not the start time for the current process.
            </para>
                <para>
            The log4net library should be loaded by an application early during its
            startup, therefore this start time should be a good approximation for
            the actual start time.
            </para>
                <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating, however this start time
            will be set per AppDomain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.NullText">
            <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
            <remarks>
                <para>
            Use this value to indicate a <c>null</c> has been encountered while
            outputting a string representation of an item.
            </para>
                <para>
            The default value is <c>(null)</c>. This value can be overridden by specifying
            a value for the <c>log4net.NullText</c> appSetting in the application's
            .config file.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.SystemInfo.NotAvailableText">
            <summary>
            Text to output when an unsupported feature is requested.
            </summary>
            <remarks>
                <para>
            Use this value when an unsupported feature is requested.
            </para>
                <para>
            The default value is <c>NOT AVAILABLE</c>. This value can be overridden by specifying
            a value for the <c>log4net.NotAvailableText</c> appSetting in the application's
            .config file.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyLocationInfo(System.Reflection.Assembly)">
            <summary>
            Gets the assembly location path for the specified assembly.
            </summary>
            <param name="myAssembly">The assembly to get the location for.</param>
            <returns>The location of the assembly.</returns>
            <remarks>
                <para>
            This method does not guarantee to return the correct path
            to the assembly. If only tries to give an indication as to
            where the assembly was loaded from.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyQualifiedName(System.Type)">
            <summary>
            Gets the fully qualified name of the <see cref="T:System.Type" />, including 
            the name of the assembly from which the <see cref="T:System.Type" /> was 
            loaded.
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to get the fully qualified name for.</param>
            <returns>The fully qualified name for the <see cref="T:System.Type" />.</returns>
            <remarks>
                <para>
            This is equivalent to the <c>Type.AssemblyQualifiedName</c> property,
            but this method works on the .NET Compact Framework 1.0 as well as
            the full .NET runtime.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyShortName(System.Reflection.Assembly)">
            <summary>
            Gets the short name of the <see cref="T:System.Reflection.Assembly" />.
            </summary>
            <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the name for.</param>
            <returns>The short name of the <see cref="T:System.Reflection.Assembly" />.</returns>
            <remarks>
                <para>
            The short name of the assembly is the <see cref="P:System.Reflection.Assembly.FullName" /> 
            without the version, culture, or public key. i.e. it is just the 
            assembly's file name without the extension.
            </para>
                <para>
            Use this rather than <c>Assembly.GetName().Name</c> because that
            is not available on the Compact Framework.
            </para>
                <para>
            Because of a FileIOPermission security demand we cannot do
            the obvious Assembly.GetName().Name. We are allowed to get
            the <see cref="P:System.Reflection.Assembly.FullName" /> of the assembly so we 
            start from there and strip out just the assembly name.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.AssemblyFileName(System.Reflection.Assembly)">
            <summary>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </summary>
            <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the file name for.</param>
            <returns>The file name of the assembly.</returns>
            <remarks>
                <para>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the type specified in the type string.
            </summary>
            <param name="relativeType">A sibling type to use to load the type.</param>
            <param name="typeName">The name of the type to load.</param>
            <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
            <param name="ignoreCase">
                <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
            <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
            <remarks>
                <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)" />.
            </para>
                <para>
            If the type name is not fully qualified, it will be loaded from the assembly
            containing the specified relative type. If the type is not found in the assembly 
            then all the loaded assemblies will be searched for the type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the type specified in the type string.
            </summary>
            <param name="typeName">The name of the type to load.</param>
            <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
            <param name="ignoreCase">
                <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
            <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
            <remarks>
                <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)" />.
            </para>
                <para>
            If the type name is not fully qualified it will be loaded from the
            assembly that is directly calling this method. If the type is not found 
            in the assembly then all the loaded assemblies will be searched for the type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Reflection.Assembly,System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads the type specified in the type string.
            </summary>
            <param name="relativeAssembly">An assembly to load the type from.</param>
            <param name="typeName">The name of the type to load.</param>
            <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
            <param name="ignoreCase">
                <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
            <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
            <remarks>
                <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:Type.GetType(string,bool)" />.
            </para>
                <para>
            If the type name is not fully qualified it will be loaded from the specified
            assembly. If the type is not found in the assembly then all the loaded assemblies 
            will be searched for the type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.NewGuid">
            <summary>
            Generate a new guid
            </summary>
            <returns>A new Guid</returns>
            <remarks>
                <para>
            Generate a new guid
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Create an <see cref="T:System.ArgumentOutOfRangeException" /></summary>
            <param name="parameterName">The name of the parameter that caused the exception</param>
            <param name="actualValue">The value of the argument that causes this exception</param>
            <param name="message">The message that describes the error</param>
            <returns>the ArgumentOutOfRangeException object</returns>
            <remarks>
                <para>
            Create a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class 
            with a specified error message, the parameter name, and the value 
            of the argument.
            </para>
                <para>
            The Compact Framework does not support the 3 parameter constructor for the
            <see cref="T:System.ArgumentOutOfRangeException" /> type. This method provides an
            implementation that works for all platforms.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int32@)">
            <summary>
            Parse a string into an <see cref="T:System.Int32" /> value
            </summary>
            <param name="s">the string to parse</param>
            <param name="val">out param where the parsed value is placed</param>
            <returns>
                <c>true</c> if the string was able to be parsed into an integer</returns>
            <remarks>
                <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int64@)">
            <summary>
            Parse a string into an <see cref="T:System.Int64" /> value
            </summary>
            <param name="s">the string to parse</param>
            <param name="val">out param where the parsed value is placed</param>
            <returns>
                <c>true</c> if the string was able to be parsed into an integer</returns>
            <remarks>
                <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int16@)">
            <summary>
            Parse a string into an <see cref="T:System.Int16" /> value
            </summary>
            <param name="s">the string to parse</param>
            <param name="val">out param where the parsed value is placed</param>
            <returns>
                <c>true</c> if the string was able to be parsed into an integer</returns>
            <remarks>
                <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.GetAppSetting(System.String)">
            <summary>
            Lookup an application setting
            </summary>
            <param name="key">the application settings key to lookup</param>
            <returns>the value for the key, or <c>null</c></returns>
            <remarks>
                <para>
            Configuration APIs are not supported under the Compact Framework
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.ConvertToFullPath(System.String)">
            <summary>
            Convert a path into a fully qualified local file path.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
            <remarks>
                <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
                <para>
            The path specified must be a local file path, a URI is not supported.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.CreateCaseInsensitiveHashtable">
            <summary>
            Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity. 
            </summary>
            <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity</returns>
            <remarks>
                <para>
            The new Hashtable instance uses the default load factor, the CaseInsensitiveHashCodeProvider, and the CaseInsensitiveComparer.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemInfo.EqualsIgnoringCase(System.String,System.String)">
            <summary>
            Tests two strings for equality, the ignoring case.
            </summary>
            <remarks>
            If the platform permits, culture information is ignored completely (ordinal comparison).
            The aim of this method is to provide a fast comparison that deals with <c>null</c> and ignores different casing.
            It is not supposed to deal with various, culture-specific habits.
            Use it to compare against pure ASCII constants, like keywords etc.
            </remarks>
            <param name="a">The one string.</param>
            <param name="b">The other string.</param>
            <returns>
                <c>true</c> if the strings are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:log4net.Util.SystemInfo.EmptyTypes">
            <summary>
            Gets an empty array of types.
            </summary>
            <remarks>
                <para>
            The <c>Type.EmptyTypes</c> field is not available on
            the .NET Compact Framework 1.0.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.SystemInfo.declaringType">
            <summary>
            The fully qualified type of the SystemInfo class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_hostName">
            <summary>
            Cache the host name for the current machine
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_appFriendlyName">
            <summary>
            Cache the application friendly name
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_nullText">
            <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_notAvailableText">
            <summary>
            Text to output when an unsupported feature is requested.
            </summary>
        </member>
        <member name="F:log4net.Util.SystemInfo.s_processStartTimeUtc">
            <summary>
            Start time for the current process.
            </summary>
        </member>
        <member name="T:log4net.Util.SystemStringFormat">
            <summary>
            Utility class that represents a format string.
            </summary>
            <remarks>
                <para>
            Utility class that represents a format string.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.#ctor(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initialise the <see cref="T:log4net.Util.SystemStringFormat" /></summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
            <param name="format">A <see cref="T:System.String" /> containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.ToString">
            <summary>
            Format the string and arguments
            </summary>
            <returns>the formatted string</returns>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.StringFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent 
            of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array.
            A specified parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
            <param name="format">A <see cref="T:System.String" /> containing zero or more format items.</param>
            <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
            <returns>
            A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> 
            equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.
            </returns>
            <remarks>
                <para>
            This method does not throw exceptions. If an exception thrown while formatting the result the
            exception and arguments are returned in the result string.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.StringFormatError(System.Exception,System.String,System.Object[])">
            <summary>
            Process an error during StringFormat
            </summary>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.RenderArray(System.Array,System.Text.StringBuilder)">
            <summary>
            Dump the contents of an array into a string builder
            </summary>
        </member>
        <member name="M:log4net.Util.SystemStringFormat.RenderObject(System.Object,System.Text.StringBuilder)">
            <summary>
            Dump an object to a string
            </summary>
        </member>
        <member name="F:log4net.Util.SystemStringFormat.declaringType">
            <summary>
            The fully qualified type of the SystemStringFormat class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.TextWriterAdapter">
            <summary>
            Adapter that extends <see cref="T:System.IO.TextWriter" /> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter" />.
            </summary>
            <remarks>
                <para>
            Adapter that extends <see cref="T:System.IO.TextWriter" /> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.TextWriterAdapter.m_writer">
            <summary>
            The writer to forward messages to
            </summary>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.#ctor(System.IO.TextWriter)">
            <summary>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter" /> that forwards all
            messages to a <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> to forward to</param>
            <remarks>
                <para>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter" /> that forwards all
            messages to a <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.Writer">
            <summary>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
            <value>
            The underlying <see cref="T:System.IO.TextWriter" />.
            </value>
            <remarks>
                <para>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.Encoding">
            <summary>
            The Encoding in which the output is written
            </summary>
            <value>
            The <see cref="P:log4net.Util.TextWriterAdapter.Encoding" /></value>
            <remarks>
                <para>
            The Encoding in which the output is written
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.FormatProvider">
            <summary>
            Gets an object that controls formatting
            </summary>
            <value>
            The format provider
            </value>
            <remarks>
                <para>
            Gets an object that controls formatting
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TextWriterAdapter.NewLine">
            <summary>
            Gets or sets the line terminator string used by the TextWriter
            </summary>
            <value>
            The line terminator to use
            </value>
            <remarks>
                <para>
            Gets or sets the line terminator string used by the TextWriter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Close">
            <summary>
            Closes the writer and releases any system resources associated with the writer
            </summary>
            <remarks>
                <para></para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Dispose(System.Boolean)">
            <summary>
            Dispose this writer
            </summary>
            <param name="disposing">flag indicating if we are being disposed</param>
            <remarks>
                <para>
            Dispose this writer
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Flush">
            <summary>
            Flushes any buffered output
            </summary>
            <remarks>
                <para>
            Clears all buffers for the writer and causes any buffered data to be written 
            to the underlying device
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char)">
            <summary>
            Writes a character to the wrapped TextWriter
            </summary>
            <param name="value">the value to write to the TextWriter</param>
            <remarks>
                <para>
            Writes a character to the wrapped TextWriter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a character buffer to the wrapped TextWriter
            </summary>
            <param name="buffer">the data buffer</param>
            <param name="index">the start index</param>
            <param name="count">the number of characters to write</param>
            <remarks>
                <para>
            Writes a character buffer to the wrapped TextWriter
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TextWriterAdapter.Write(System.String)">
            <summary>
            Writes a string to the wrapped TextWriter
            </summary>
            <param name="value">the value to write to the TextWriter</param>
            <remarks>
                <para>
            Writes a string to the wrapped TextWriter
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextProperties">
            <summary>
            Implementation of Properties collection for the <see cref="T:log4net.ThreadContext" /></summary>
            <remarks>
                <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.ThreadContextProperties._dictionary">
            <summary>
            Each thread will automatically have its instance.
            </summary>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.#ctor">
            <summary>
            Internal constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextProperties" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextProperties.Item(System.String)">
            <summary>
            Gets or sets the value of a property
            </summary>
            <value>
            The value for the property with the specified key
            </value>
            <remarks>
                <para>
            Gets or sets the value of a property
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.Remove(System.String)">
            <summary>
            Remove a property
            </summary>
            <param name="key">the key for the entry to remove</param>
            <remarks>
                <para>
            Remove a property
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.GetKeys">
            <summary>
            Get the keys stored in the properties.
            </summary>
            <para>
            Gets the keys stored in the properties.
            </para>
            <returns>a set of the defined keys</returns>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.Clear">
            <summary>
            Clear all properties
            </summary>
            <remarks>
                <para>
            Clear all properties
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextProperties.GetProperties(System.Boolean)">
            <summary>
            Get the <c>PropertiesDictionary</c> for this thread.
            </summary>
            <param name="create">create the dictionary if it does not exist, otherwise return null if does not exist</param>
            <returns>the properties for this thread</returns>
            <remarks>
                <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doing so.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStack">
            <summary>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext" /></summary>
            <remarks>
                <para>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext" /></para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="F:log4net.Util.ThreadContextStack.m_stack">
            <summary>
            The stack store.
            </summary>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.#ctor">
            <summary>
            Internal constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack" /> class. 
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.Count">
            <summary>
            The number of messages in the stack
            </summary>
            <value>
            The current number of messages in the stack
            </value>
            <remarks>
                <para>
            The current number of messages in the stack. That is
            the number of times <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> has been called
            minus the number of times <see cref="M:log4net.Util.ThreadContextStack.Pop" /> has been called.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.Clear">
            <summary>
            Clears all the contextual information held in this stack.
            </summary>
            <remarks>
                <para>
            Clears all the contextual information held in this stack.
            Only call this if you think that this tread is being reused after
            a previous call execution which may not have completed correctly.
            You do not need to use this method if you always guarantee to call
            the <see cref="M:System.IDisposable.Dispose" /> method of the <see cref="T:System.IDisposable" />
            returned from <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> even in exceptional circumstances,
            for example by using the <c>using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))</c> 
            syntax.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.Pop">
            <summary>
            Removes the top context from this stack.
            </summary>
            <returns>The message in the context that was removed from the top of this stack.</returns>
            <remarks>
                <para>
            Remove the top context from this stack, and return
            it to the caller. If this stack is empty then an
            empty string (not <see langword="null" />) is returned.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.Push(System.String)">
            <summary>
            Pushes a new context message into this stack.
            </summary>
            <param name="message">The new context message.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up the context stack.
            </returns>
            <remarks>
                <para>
            Pushes a new context onto this stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up this stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
            </remarks>
            <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))
            {
            	log.Warn("This should have an ThreadContext Stack message");
            }
            </code></example>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.GetFullMessage">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>The current context information.</returns>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.InternalStack">
            <summary>
            Gets and sets the internal stack used by this <see cref="T:log4net.Util.ThreadContextStack" /></summary>
            <value>The internal storage stack</value>
            <remarks>
                <para>
            This property is provided only to support backward compatability 
            of the <see cref="T:log4net.NDC" />. Tytpically the internal stack should not
            be modified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.ToString">
            <summary>
            Gets the current context information for this stack.
            </summary>
            <returns>Gets the current context information</returns>
            <remarks>
                <para>
            Gets the current context information for this stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.log4net#Core#IFixingRequired#GetFixedObject">
            <summary>
            Get a portable version of this object
            </summary>
            <returns>the portable instance of this object</returns>
            <remarks>
                <para>
            Get a cross thread portable version of this object
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStack.StackFrame">
            <summary>
            Inner class used to represent a single context frame in the stack.
            </summary>
            <remarks>
                <para>
            Inner class used to represent a single context frame in the stack.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.StackFrame.#ctor(System.String,log4net.Util.ThreadContextStack.StackFrame)">
            <summary>
            Constructor
            </summary>
            <param name="message">The message for this context.</param>
            <param name="parent">The parent context in the chain.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.StackFrame" /> class
            with the specified message and parent context.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.StackFrame.Message">
            <summary>
            Get the message.
            </summary>
            <value>The message.</value>
            <remarks>
                <para>
            Get the message.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStack.StackFrame.FullMessage">
            <summary>
            Gets the full text of the context down to the root level.
            </summary>
            <value>
            The full text of the context down to the root level.
            </value>
            <remarks>
                <para>
            Gets the full text of the context down to the root level.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStack.AutoPopStackFrame">
            <summary>
            Struct returned from the <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> method.
            </summary>
            <remarks>
                <para>
            This struct implements the <see cref="T:System.IDisposable" /> and is designed to be used
            with the <see langword="using" /> pattern to remove the stack frame at the end of the scope.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.ThreadContextStack.AutoPopStackFrame.m_frameStack">
            <summary>
            The ThreadContextStack internal stack
            </summary>
        </member>
        <member name="F:log4net.Util.ThreadContextStack.AutoPopStackFrame.m_frameDepth">
            <summary>
            The depth to trim the stack to when this instance is disposed
            </summary>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.#ctor(System.Collections.Stack,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="frameStack">The internal stack used by the ThreadContextStack.</param>
            <param name="frameDepth">The depth to return the stack to when this object is disposed.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.AutoPopStackFrame" /> class with
            the specified stack and return depth.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.Dispose">
            <summary>
            Returns the stack to the correct depth.
            </summary>
            <remarks>
                <para>
            Returns the stack to the correct depth.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.ThreadContextStacks">
            <summary>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext" /></summary>
            <remarks>
                <para>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext" /></para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.ThreadContextStacks.#ctor(log4net.Util.ContextPropertiesBase)">
            <summary>
            Internal constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStacks" /> class.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.ThreadContextStacks.Item(System.String)">
            <summary>
            Gets the named thread context stack
            </summary>
            <value>
            The named stack
            </value>
            <remarks>
                <para>
            Gets the named thread context stack
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.ThreadContextStacks.declaringType">
            <summary>
            The fully qualified type of the ThreadContextStacks class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="T:log4net.Util.Transform">
            <summary>
            Utility class for transforming strings.
            </summary>
            <remarks>
                <para>
            Utility class for transforming strings.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.Transform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.Transform" /> class. 
            </summary>
            <remarks>
                <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.Transform.WriteEscapedXmlString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Write a string to an <see cref="T:System.Xml.XmlWriter" /></summary>
            <param name="writer">the writer to write to</param>
            <param name="textData">the string to write</param>
            <param name="invalidCharReplacement">The string to replace non XML compliant chars with</param>
            <remarks>
                <para>
            The test is escaped either using XML escape entities
            or using CDATA sections.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.Transform.MaskXmlInvalidCharacters(System.String,System.String)">
            <summary>
            Replace invalid XML characters in text string
            </summary>
            <param name="textData">the XML text input string</param>
            <param name="mask">the string to use in place of invalid characters</param>
            <returns>A string that does not contain invalid XML characters.</returns>
            <remarks>
                <para>
            Certain Unicode code points are not allowed in the XML InfoSet, for
            details see: <a href="http://www.w3.org/TR/REC-xml/#charsets">http://www.w3.org/TR/REC-xml/#charsets</a>.
            </para>
                <para>
            This method replaces any illegal characters in the input string
            with the mask string specified.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.Transform.CountSubstrings(System.String,System.String)">
            <summary>
            Count the number of times that the substring occurs in the text
            </summary>
            <param name="text">the text to search</param>
            <param name="substring">the substring to find</param>
            <returns>the number of times the substring occurs in the text</returns>
            <remarks>
                <para>
            The substring is assumed to be non repeating within itself.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.Transform.INVALIDCHARS">
            <summary>
            Characters illegal in XML 1.0
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.BooleanConverter">
            <summary>
            Type converter for Boolean.
            </summary>
            <remarks>
                <para>
            Supports conversion from string to <c>bool</c> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.BooleanConverter.ConvertFrom(System.Object)">
            <summary>
            Convert the source object to the type supported by this object
            </summary>
            <param name="source">the object to convert</param>
            <returns>the converted object</returns>
            <remarks>
                <para>
            Uses the <see cref="M:System.Boolean.Parse(System.String)" /> method to convert the
            <see cref="T:System.String" /> argument to a <see cref="T:System.Boolean" />.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            <summary>
            Exception base type for conversion errors.
            </summary>
            <remarks>
                <para>
            This type extends <see cref="T:System.ApplicationException" />. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message to include with the exception.</param>
            <param name="innerException">A nested exception to include.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message and inner exception.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <remarks>
                <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class 
            with serialized data.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
            <param name="destinationType">The conversion destination type.</param>
            <param name="sourceValue">The value to convert.</param>
            <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
            <remarks>
                <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
            <param name="destinationType">The conversion destination type.</param>
            <param name="sourceValue">The value to convert.</param>
            <param name="innerException">A nested exception to include.</param>
            <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
            <remarks>
                <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.TypeConverters.ConverterRegistry">
            <summary>
            Register of type converters for specific types.
            </summary>
            <remarks>
                <para>
            Maintains a registry of type converters used to convert between
            types.
            </para>
                <para>
            Use the <see cref="M:AddConverter(Type, object)" /> and 
            <see cref="M:AddConverter(Type, Type)" /> methods to register new converters.
            The <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)" /> and <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)" /> methods
            lookup appropriate converters to use.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.#ctor">
            <summary>
            Private constructor
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConverterRegistry" /> class.
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.#cctor">
            <summary>
            Static constructor.
            </summary>
            <remarks>
                <para>
            This constructor defines the intrinsic type converters.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Object)">
            <summary>
            Adds a converter for a specific type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <param name="converter">The type converter to use to convert to the destination type.</param>
            <remarks>
                <para>
            Adds a converter instance for a specific type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Type)">
            <summary>
            Adds a converter for a specific type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <param name="converterType">The type of the type converter to use to convert to the destination type.</param>
            <remarks>
                <para>
            Adds a converter <see cref="T:System.Type" /> for a specific type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)">
            <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
            <param name="sourceType">The type being converted from.</param>
            <param name="destinationType">The type being converted to.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
            <remarks>
                <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)">
            <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
            <remarks>
                <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConverterFromAttribute(System.Type)">
            <summary>
            Lookups the type converter to use as specified by the attributes on the 
            destination type.
            </summary>
            <param name="destinationType">The type being converted to.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
        </member>
        <member name="M:log4net.Util.TypeConverters.ConverterRegistry.CreateConverterInstance(System.Type)">
            <summary>
            Creates the instance of the type converter.
            </summary>
            <param name="converterType">The type of the type converter.</param>
            <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
            <remarks>
                <para>
            The type specified for the type converter must implement 
            the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> or <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces 
            and must have a public default (no argument) constructor.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.TypeConverters.ConverterRegistry.declaringType">
            <summary>
            The fully qualified type of the ConverterRegistry class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="F:log4net.Util.TypeConverters.ConverterRegistry.s_type2converter">
            <summary>
            Mapping from <see cref="T:System.Type" /> to type converter.
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.EncodingConverter">
            <summary>
            Supports conversion from string to <see cref="T:System.Text.Encoding" /> type.
            </summary>
            <remarks>
                <para>
            Supports conversion from string to <see cref="T:System.Text.Encoding" /> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.EncodingConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to an encoding</param>
            <returns>the encoding</returns>
            <remarks>
                <para>
            Uses the <see cref="M:Encoding.GetEncoding(string)" /> method to 
            convert the <see cref="T:System.String" /> argument to an <see cref="T:System.Text.Encoding" />.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.IConvertFrom">
            <summary>
            Interface supported by type converters
            </summary>
            <remarks>
                <para>
            This interface supports conversion from arbitrary types
            to a single target type. See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertFrom.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Test if the <paramref name="sourceType" /> can be converted to the
            type supported by this converter.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(System.Object)">
            <summary>
            Convert the source object to the type supported by this object
            </summary>
            <param name="source">the object to convert</param>
            <returns>the converted object</returns>
            <remarks>
                <para>
            Converts the <paramref name="source" /> to the type supported
            by this converter.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.TypeConverters.IConvertTo">
            <summary>
            Interface supported by type converters
            </summary>
            <remarks>
                <para>
            This interface supports conversion from a single type to arbitrary types.
            See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute" />.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertTo.CanConvertTo(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type
            </summary>
            <param name="targetType">A Type that represents the type you want to convert to</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Test if the type supported by this converter can be converted to the
            <paramref name="targetType" />.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.IConvertTo.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
            <param name="source">the object to convert</param>
            <param name="targetType">The Type to convert the value parameter to</param>
            <returns>the converted object</returns>
            <remarks>
                <para>
            Converts the <paramref name="source" /> (which must be of the type supported
            by this converter) to the <paramref name="targetType" /> specified..
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.TypeConverters.IPAddressConverter">
            <summary>
            Supports conversion from string to <see cref="T:System.Net.IPAddress" /> type.
            </summary>
            <remarks>
                <para>
            Supports conversion from string to <see cref="T:System.Net.IPAddress" /> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.IPAddressConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to an IPAddress</param>
            <returns>the IPAddress</returns>
            <remarks>
                <para>
            Uses the <see cref="M:System.Net.IPAddress.Parse(System.String)" /> method to convert the
            <see cref="T:System.String" /> argument to an <see cref="T:System.Net.IPAddress" />.
            If that fails then the string is resolved as a DNS hostname.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
        </member>
        <member name="F:log4net.Util.TypeConverters.IPAddressConverter.validIpAddressChars">
            <summary>
            Valid characters in an IPv4 or IPv6 address string. (Does not support subnets)
            </summary>
        </member>
        <member name="T:log4net.Util.TypeConverters.PatternLayoutConverter">
            <summary>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout" /> type.
            </summary>
            <remarks>
                <para>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout" /> type.
            </para>
                <para>
            The string is used as the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" /> 
            of the <see cref="T:log4net.Layout.PatternLayout" />.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to a PatternLayout</param>
            <returns>the PatternLayout</returns>
            <remarks>
                <para>
            Creates and returns a new <see cref="T:log4net.Layout.PatternLayout" /> using
            the <paramref name="source" /><see cref="T:System.String" /> as the
            <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" />.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.PatternStringConverter">
            <summary>
            Convert between string and <see cref="T:log4net.Util.PatternString" /></summary>
            <remarks>
                <para>
            Supports conversion from string to <see cref="T:log4net.Util.PatternString" /> type, 
            and from a <see cref="T:log4net.Util.PatternString" /> type to a string.
            </para>
                <para>
            The string is used as the <see cref="P:log4net.Util.PatternString.ConversionPattern" /> 
            of the <see cref="T:log4net.Util.PatternString" />.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)">
            <summary>
            Can the target type be converted to the type supported by this object
            </summary>
            <param name="targetType">A <see cref="T:System.Type" /> that represents the type you want to convert to</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="targetType" /> is
            assignable from a <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
            <param name="source">the object to convert</param>
            <param name="targetType">The Type to convert the value parameter to</param>
            <returns>the converted object</returns>
            <remarks>
                <para>
            Uses the <see cref="M:PatternString.Format()" /> method to convert the
            <see cref="T:log4net.Util.PatternString" /> argument to a <see cref="T:System.String" />.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            <paramref name="targetType" />. To check for this condition use the 
            <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)" /> method.
            </exception>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to a PatternString</param>
            <returns>the PatternString</returns>
            <remarks>
                <para>
            Creates and returns a new <see cref="T:log4net.Util.PatternString" /> using
            the <paramref name="source" /><see cref="T:System.String" /> as the
            <see cref="P:log4net.Util.PatternString.ConversionPattern" />.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.TypeConverter">
            <summary>
            Supports conversion from string to <see cref="T:System.Type" /> type.
            </summary>
            <remarks>
                <para>
            Supports conversion from string to <see cref="T:System.Type" /> type.
            </para>
            </remarks>
            <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
            <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
            <author>Nicko Cadell</author>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Can the source type be converted to the type supported by this object
            </summary>
            <param name="sourceType">the type to convert</param>
            <returns>true if the conversion is possible</returns>
            <remarks>
                <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverter.ConvertFrom(System.Object)">
            <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
            <param name="source">the object to convert to a Type</param>
            <returns>the Type</returns>
            <remarks>
                <para>
            Uses the <see cref="M:Type.GetType(string,bool)" /> method to convert the
            <see cref="T:System.String" /> argument to a <see cref="T:System.Type" />.
            Additional effort is made to locate partially specified types
            by searching the loaded assemblies.
            </para>
            </remarks>
            <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
        </member>
        <member name="T:log4net.Util.TypeConverters.TypeConverterAttribute">
            <summary>
            Attribute used to associate a type converter
            </summary>
            <remarks>
                <para>
            Class and Interface level attribute that specifies a type converter
            to use with the associated type.
            </para>
                <para>
            To associate a type converter with a target type apply a
            <c>TypeConverterAttribute</c> to the target type. Specify the
            type of the type converter on the attribute.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="F:log4net.Util.TypeConverters.TypeConverterAttribute.m_typeName">
            <summary>
            The string type name of the type converter
            </summary>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.String)">
            <summary>
            Create a new type converter attribute for the specified type name
            </summary>
            <param name="typeName">The string type name of the type converter</param>
            <remarks>
                <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Create a new type converter attribute for the specified type
            </summary>
            <param name="converterType">The type of the type converter</param>
            <remarks>
                <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.TypeConverters.TypeConverterAttribute.ConverterTypeName">
            <summary>
            The string type name of the type converter 
            </summary>
            <value>
            The string type name of the type converter 
            </value>
            <remarks>
                <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.WindowsSecurityContext">
            <summary>
            Impersonate a Windows Account
            </summary>
            <remarks>
                <para>
            This <see cref="T:log4net.Core.SecurityContext" /> impersonates a Windows account.
            </para>
                <para>
            How the impersonation is done depends on the value of <see cref="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)" />.
            This allows the context to either impersonate a set of user credentials specified 
            using username, domain name and password or to revert to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.WindowsSecurityContext.ImpersonationMode">
            <summary>
            The impersonation modes for the <see cref="T:log4net.Util.WindowsSecurityContext" /></summary>
            <remarks>
                <para>
            See the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" /> property for
            details.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User">
            <summary>
            Impersonate a user using the credentials supplied
            </summary>
        </member>
        <member name="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.Process">
            <summary>
            Revert this the thread to the credentials of the process
            </summary>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
                <para>
            Default constructor
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.Credentials">
            <summary>
            Gets or sets the impersonation mode for this security context
            </summary>
            <value>
            The impersonation mode for this security context
            </value>
            <remarks>
                <para>
            Impersonate either a user with user credentials or
            revert this thread to the credentials of the process.
            The value is one of the <see cref="T:log4net.Util.WindowsSecurityContext.ImpersonationMode" />
            enum.
            </para>
                <para>
            The default value is <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /></para>
                <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" />
            the user's credentials are established using the
            <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.Password" />
            values.
            </para>
                <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.Process" />
            no other properties need to be set. If the calling thread is 
            impersonating then it will be reverted back to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.UserName">
            <summary>
            Gets or sets the Windows username for this security context
            </summary>
            <value>
            The Windows username for this security context
            </value>
            <remarks>
                <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.DomainName">
            <summary>
            Gets or sets the Windows domain name for this security context
            </summary>
            <value>
            The Windows domain name for this security context
            </value>
            <remarks>
                <para>
            The default value for <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> is the local machine name
            taken from the <see cref="P:System.Environment.MachineName" /> property.
            </para>
                <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Util.WindowsSecurityContext.Password">
            <summary>
            Sets the password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </summary>
            <value>
            The password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </value>
            <remarks>
                <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.ActivateOptions">
            <summary>
            Initialize the SecurityContext based on the options set.
            </summary>
            <remarks>
                <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
                <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> must be called again.
            </para>
                <para>
            The security context will try to Logon the specified user account and
            capture a primary token for impersonation.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, 
            <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> or <see cref="P:log4net.Util.WindowsSecurityContext.Password" /> properties were not specified.</exception>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </summary>
            <param name="state">caller provided state</param>
            <returns>
            An <see cref="T:System.IDisposable" /> instance that will revoke the impersonation of this SecurityContext
            </returns>
            <remarks>
                <para>
            Depending on the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" /> property either
            impersonate a user using credentials supplied or revert 
            to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.LogonUser(System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:System.Security.Principal.WindowsIdentity" /> given the userName, domainName and password.
            </summary>
            <param name="userName">the user name</param>
            <param name="domainName">the domain name</param>
            <param name="password">the password</param>
            <returns>the <see cref="T:System.Security.Principal.WindowsIdentity" /> for the account specified</returns>
            <remarks>
                <para>
            Uses the Windows API call LogonUser to get a principal token for the account. This
            token is used to initialize the WindowsIdentity.
            </para>
            </remarks>
        </member>
        <member name="T:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext">
            <summary>
            Adds <see cref="T:System.IDisposable" /> to <see cref="T:System.Security.Principal.WindowsImpersonationContext" /></summary>
            <remarks>
                <para>
            Helper class to expose the <see cref="T:System.Security.Principal.WindowsImpersonationContext" />
            through the <see cref="T:System.IDisposable" /> interface.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Constructor
            </summary>
            <param name="impersonationContext">the impersonation context being wrapped</param>
            <remarks>
                <para>
            Constructor
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.Dispose">
            <summary>
            Revert the impersonation
            </summary>
            <remarks>
                <para>
            Revert the impersonation
            </para>
            </remarks>
        </member>
    </members>
</doc>